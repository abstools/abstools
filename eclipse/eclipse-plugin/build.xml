<?xml version="1.0"?>
<project name="ABS Update Site" default="compile" basedir=".">
    <property name="revision.prefix" value="1.0.8" />

  <property file="eclipsehome.properties"/>
  <property name="update-site.dir" location="${basedir}/update-site" />
  <property name="frontend.dir" location="../../frontend" />
  <property name="costabs.dir" location="../costabs-plugin" />
  <property name="apet.dir" location="../apet-plugin" />
  <property name="sda.dir" location="../sda-plugin" />
  <property name="sdedit.dir" location="../sdedit-for-abs" />
  <property name="src.dir" location="${basedir}/src" />
  <property name="build.dir" location="${basedir}/bin" />
  <property name="dist.dir" location="${basedir}/dist" />
  <property name="ext.dir" location="${basedir}/lib" />
    <property name="doc.dir" location="${basedir}/doc" />
    <property name="doc.api.dir" location="${doc.dir}/api" />

  <property name="plugin.name" value="org.abs-models.abs.plugin" />
  <property name="frontend.version" value="1.0.0" />

  <macrodef name="git-revision">
    <attribute name="output"/>
    <attribute name="failonerror" default="false" />
    <sequential>
      <exec executable="git" outputproperty="head"
            failonerror="@{failonerror}" >
        <arg value="rev-parse"/>
        <arg value="--short"/>
        <arg value="HEAD"/>
      </exec>
      <exec executable="git" outputproperty="dirty"
            failonerror="@{failonerror}" >
        <arg value="diff"/>
        <arg value="--shortstat"/>
      </exec>
      <condition  property="@{output}" value="${head}" else="${head}-dirty" >
        <equals arg1="${dirty}" arg2=""/>
      </condition>
    </sequential>
  </macrodef>

  <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpath="${frontend.dir}/lib/findbugs-ant-1.3.9.jar"/>

  <target name="init">
     <mkdir dir="${dist.dir}" />
     <mkdir dir="${dist.dir}/plugins" />
     <mkdir dir="${dist.dir}/features" />
     <mkdir dir="${build.dir}" />

    <fail unless="eclipse.home">Please set 'eclipse.home'!</fail>

        <fileset id="eclipse-plugin-jars" dir="${eclipse.home}">
            <include name="**/plugins/**/org.eclipse.*" />
            <include name="**/plugins/**/javax.inject*" />
        </fileset>

        <path id="build.classpath">
           <pathelement location="${ext.dir}/mockito-all-1.8.5.jar" />
           <pathelement location="${frontend.dir}/bin" />
     <pathelement location="${costabs.dir}/bin" />
     <pathelement location="${apet.dir}/bin" />
     <pathelement location="${sda.dir}/bin" />
           <fileset dir="${frontend.dir}/lib" includes="**/*.jar" />
           <fileset refid="eclipse-plugin-jars" />
        </path>

  </target>


  <!-- Note in order to execute this task it is required that rsync is installed
       and that the necessary ssh-key is installed on the system.
       Ask Volker Stolz to get a key if you want to be deploy the update site -->
  <target name="deploy-update-site" depends="generate-update-site"
  description="deploys the update site to the official ABS update site">
    <exec executable="rsync">
      <arg value="-rcv"/>
        <arg value="--delete"/>
        <arg value="--chmod=Dugo+rx,o-w,Fugo+r,o-w"/>
        <arg value="${update-site.dir}/plugins"/>
        <arg value="${update-site.dir}/features"/>
        <arg value="${update-site.dir}/artifacts.xml"/>
        <arg value="${update-site.dir}/content.xml"/>
      <arg value="absmodels@docs.abs-models.org:update-site"/>
    </exec>
  </target>

  <target name="generate-update-site-helper" depends="init">
    <mkdir dir="${update-site.dir}"/>
    <copy todir="${update-site.dir}" failonerror="true" overwrite="true">
      <fileset dir="${dist.dir}" />
      <fileset dir="${frontend.dir}/dist" />
      <fileset dir="${costabs.dir}/dist" />
      <fileset dir="${apet.dir}/dist" />
      <fileset dir="${sda.dir}/dist" />
      <fileset dir="${sdedit.dir}/dist" />
      <fileset dir="${basedir}">
        <include name="site.xml"/>
      </fileset>
    </copy>
    <eclipse.publish.featuresAndBundles
      artifactRepository="file:///${update-site.dir}"
            metadataRepository="file:///${update-site.dir}"
      artifactRepositoryName="ABS Update-Site"
            metadataRepositoryName="ABS Update-Site"
      site="file:///${update-site.dir}"
      compress="false"
      >
      <bundles dir="${update-site.dir}/plugins" />
      <features dir="${update-site.dir}/features" />
    </eclipse.publish.featuresAndBundles>
  </target>

  <target name="generate-update-site" depends="init">
    <java classname="org.eclipse.equinox.launcher.Main" fork="true">
      <classpath>
        <fileset dir="${eclipse.home}"
                      includes="**/plugins/org.eclipse.equinox.launcher_*.jar" />
      </classpath>
      <arg value="-application" />
      <arg value="org.eclipse.ant.core.antRunner" />
      <arg value="-buildfile" />
      <arg value="build.xml" />
      <arg value="generate-update-site-helper" />
    </java>
  </target>

  <target name="clean" description="cleans everything">
    <delete failonerror="false" includeemptydirs="true">
      <fileset dir="${build.dir}" />
      <fileset dir="${dist.dir}" />
    </delete>
  </target>

  <target name="apidoc" description="generates JavaDoc" depends="init">
      <javadoc sourcepath="${src.dir}" destdir="${doc.api.dir}">
        <classpath refid="build.classpath" />
        <link href="http://help.eclipse.org/helios/nftopic/org.eclipse.platform.doc.isv/reference/api/" />
        <link href="http://download.oracle.com/javase/6/docs/api/" />
      </javadoc>
  </target>

  <target name="compile" depends="init" description="Compiles all java files in the source directory.">
    <mkdir dir="${build.dir}"/>
    <javac srcdir="${src.dir}" destdir="${build.dir}" deprecation="on" debug="on" includeantruntime="false" failonerror="true" optimize="off" encoding="utf-8" target="1.8" source="1.8">
      <classpath refid="build.classpath" />
    </javac>
  </target>

  <target name="versionstamp">
    <tstamp/>
    <git-revision output="git-revision"/>
    <condition property="plugin.version" value="${revision.prefix}.${DSTAMP}${TSTAMP}-${git-revision}" else="${revision.prefix}.${DSTAMP}${TSTAMP}">
      <isset property="git-revision" />
    </condition>
    <echo message="Version: ${plugin.version}"/>
  </target>


  <target name="build-all-plugins">
    <ant antfile="${frontend.dir}/build.xml" useNativeBasedir="true" target="build-eclipse-plugin" inheritAll="false"/>
    <ant antfile="${sdedit.dir}/build.xml" useNativeBasedir="true" target="build-eclipse-plugin" inheritAll="false"/>
    <antcall target="build-eclipse-plugin"/>
    <ant antfile="${costabs.dir}/build.xml" useNativeBasedir="true" target="build-eclipse-plugin" inheritAll="false"/>
    <ant antfile="${apet.dir}/build.xml" useNativeBasedir="true" target="build-eclipse-plugin" inheritAll="false"/>
    <ant antfile="${sda.dir}/build.xml" useNativeBasedir="true" target="build-eclipse-plugin" inheritAll="false"/>
    </target>

  <target name="build-eclipse-plugin" depends="clean,compile,versionstamp">
    <mkdir dir="${basedir}/${plugin.name}_${plugin.version}" />
    <copy todir="${basedir}/${plugin.name}_${plugin.version}" failonerror="true" overwrite="true">
      <fileset dir="${basedir}">
        <include name="META-INF/"/>
        <include name="icons/"/>
        <include name="plugin.xml"/>
        <include name="feature.xml"/>
      </fileset>
      <fileset dir="${build.dir}" />
      <!-- <fileset dir="icons/" /> -->
      <!-- <include name="abs/"/> -->
    </copy>
    <manifest file="${basedir}/${plugin.name}_${plugin.version}/META-INF/MANIFEST.MF" mode="update">
      <attribute name="Bundle-Version" value="${plugin.version}"/>
    </manifest>
    <replaceregexp file="${basedir}/${plugin.name}_${plugin.version}/META-INF/MANIFEST.MF"
                   match="org.abs-models.abs.compiler;bundle-version=\&quot;(.*)\&quot;"
                   replace="org.abs-models.abs.compiler;bundle-version=&quot;${frontend.version}&quot;"
        />
    <zip destfile="${dist.dir}/plugins/${plugin.name}_${plugin.version}.jar" basedir="${basedir}/${plugin.name}_${plugin.version}" filesonly="true" whenempty="skip" update="false">
      <exclude name="feature.xml" />
    </zip>
    <replace file="${basedir}/${plugin.name}_${plugin.version}/feature.xml" token="0.0.0.VERSION_STRING" value="${plugin.version}"/>
    <replace file="${basedir}/${plugin.name}_${plugin.version}/feature.xml" token="0.0.0.FRONTEND_VERSION" value="${frontend.version}"/>
    <zip destfile="${dist.dir}/features/${plugin.name}_${plugin.version}.jar" basedir="${basedir}/${plugin.name}_${plugin.version}" filesonly="true" whenempty="skip" update="false">
      <include name="feature.xml" />
    </zip>
    <delete dir="${basedir}/${plugin.name}_${plugin.version}"/>
  </target>

  <target name="findbugs" depends="compile">
      <findbugs home="${findbugs.home}"
                output="xml"
                outputFile="absplugin-src-findbugs.xml"
            jvmargs="-Xmx512m"
              quietErrors="true" >
        <sourcePath path="${basedir}/src" />
        <class location="${build.dir}/org" />
      	<auxClasspath path="${frontend.dir}/bin" />
      </findbugs>
    </target>

</project>
