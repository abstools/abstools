module ABS.StdLib;

// Scalar datatypes
export Unit, String, Int, Rat, Float, Bool, Fut, Exception;

// The top interface
export Object;

// Booleans
export True, False, and, not;

// Numerics
export max, min, abs, pow, sqrt_newton, exp_newton, random, truncate;

// Floats
export float, rat, floor, ceil;
export sqrt, log, exp;

// Rationals
export numerator, denominator;

// Basic utility datatypes
export Maybe, Nothing, Just, isJust, fromJust;
export Either, Left, Right, left, right, isLeft, isRight;
export Pair, fst, snd;
export Triple, fstT, sndT, trdT, trd;

// Sets
export Set, EmptySet, Insert, set; //TODO: don't export EmptySet, Insert

export contains, emptySet, size, elements, union, intersection, difference,
  isSubset, insertElement, remove, take, takeMaybe, hasNext, next;

// Lists
export List, Nil, Cons, head, tail, list;
export length, isEmpty, nth, without, concatenate, appendright, reverse, copy;

// Maps
export Map, EmptyMap, InsertAssoc, map; // TODO: don't export EmptyMap, InsertAssoc

export emptyMap, removeKey, values, keys, entries,
  lookup, lookupMaybe, lookupUnsafe, lookupDefault, insert, put;

// String functions
export toString, intToString, substr, strlen;

// Real-Time ABS datatypes
export Time, timeValue, currentms, now, timeDifference, timeLessThan;
export Duration, InfDuration, durationValue, isDurationInfinite, addDuration, subtractDuration, durationLessThan, subtractFromDuration;
export lowlevelDeadline, deadline;
export Deadline, Critical;

// KeY-ABS annotations
export Inv, Pre, Post;

// Various annotations
export Annotation, TypeAnnotation, LocationType, Far, Near, Somewhere, Infer;
export COG, Plain, Final, Atomic;
export HTTPName, HTTPCallable;
export Expansion, ExpansionCall;

// Higher order functions
export map, filter, foldl, foldr;

// Functional breakpoints
// TODO: find out where they are defined / used
export watch, watchEx;

// Input/Output
export println, print, readln;

export Cost;
export * from ABS.StdLib.Exceptions;

import Cost from ABS.DC;

import * from ABS.StdLib.Exceptions;

data Unit = Unit;               // builtin
data String;                    // builtin
data Int;                       // builtin
data Rat;                       // builtin
data Float;                     // builtin
data Bool = True | False;       // builtin
data Fut<A>;                    // builtin
data Exception;                 // builtin

interface Object { }

def Bool and(Bool a, Bool b) = a && b;
def Bool not(Bool a) = !a;

def A max<A>(A a, A b) = if a > b then a else b;
def A min<A>(A a, A b) = if a < b then a else b;

def Rat abs(Rat x) = if x > 0 then x else -x;

def Rat pow(Rat b, Int n) =
    if n < 0
    then 1 / pow(b, -n)
    else case n {
        0 => 1;
        _ => b * pow(b, n-1);
    };

def Rat sqrt_newton(Rat x, Rat estimate, Rat epsilon) =
  let (Rat next) = (estimate + x / estimate)/2
  in if abs(estimate - next) < epsilon
    then estimate
    else sqrt_newton(x, next, epsilon);

def Float sqrt(Float x) = builtin;

def Float log(Float x) = builtin;

def Float exp(Float x) = builtin;

def Rat exp_newton_helper(Rat acc, Rat x, Int next_round, Rat numerator, Int denominator, Rat epsilon) =
  let (Rat next) = (numerator * x) / (denominator * next_round)
  in if abs(next) < epsilon
    then acc + next
    else exp_newton_helper(acc + next, x, next_round + 1, numerator * x, denominator * next_round, epsilon);

def Rat exp_newton(Rat x, Rat epsilon) =
  if (x < 0) then 1/exp_newton_helper((1 - x + (x * x) / 2), -x, 3, x*x, 2, epsilon)
  else exp_newton_helper((1 + x + (x * x) / 2), x, 3, x * x, 2, epsilon);


/**
 * Returns a random number between 0 (inclusive) and below (exclusive).
 */
def Int random(Int below) = builtin;

/**
 * Truncates a towards zero.
 */
def Int truncate(Rat a) = builtin;

/**
 * Converts a rational into a float.
 */
def Float float(Rat a) = builtin;

/**
 * Converts a float into a rational.
 */
def Rat rat(Float f) = builtin;

/**
 * Converts a float into the largest smaller or equal integer.
 */
def Int floor(Float f) = builtin;

/**
 * Converts a float into the smallest larger or equal integer.
 */
def Int ceil(Float f) = builtin;

/**
 * Returns numerator of canonical form of a.
 */
def Int numerator(Rat a) = builtin;

/**
 * Returns denominator of canonical form of a.
 */
def Int denominator(Rat a) = builtin;

data Maybe<A> = Nothing | Just(A fromJust);

def Bool isJust<A>(Maybe<A> a) = 
    case a { Just(j) => True; Nothing => False; };

data Either<A, B> = Left(A left) | Right(B right);

def Bool isLeft<A,B>(Either<A, B> val) = 
    case val { Left(x) => True; _ => False; };
    
def Bool isRight<A,B>(Either<A, B> val) = !isLeft(val);


data Pair<A, B> = Pair(A fst, B snd); 

data Triple<A, B, C> = Triple(A fstT, B sndT, C trdT);

// legacy, deprecated
def C trd<A, B, C>(Triple<A, B, C> t) = case t {
    Triple(_, _, val) => val; };

// Sets

// Sets are currently implemented as sorted lists (any implementation
// must yield the same structure regardless of insertion order so that
// set equality via == is preserved).  Using the Insert_ constructor
// directly is strongly discouraged.
data Set<A> = EmptySet | Insert(A, Set<A>);

// set constructor helper
def Set<A> set<A>(List<A> l) = 
    case l { 
       Nil => EmptySet; 
       Cons(x,xs) => insertElement(set(xs), x); 
    };

/**
 * Returns True if set 'ss' contains element 'e', False otherwise.
 */
def Bool contains<A>(Set<A> ss, A e) =
  case ss {
    EmptySet => False ;
    Insert(e, _) => True;
    Insert(x, xs) => if x > e then False else contains(xs, e);
  };
  
/**
 * Returns True if set 'xs' is empty, False  otherwise.
 */
def Bool emptySet<A>(Set<A> xs) = (xs == EmptySet); 

/**
 * Returns the size of set 'xs'.
 */
def Int size<A>(Set<A> xs) = 
   case xs {
      EmptySet => 0 ; 
      Insert(s, ss) => 1 + size(ss); 
   };

/**
 * Returns a list containing the elements of set `xs'.
 */
def List<A> elements<A>(Set<A> xs) =
  case xs {
      EmptySet => Nil;
      Insert(s, ss) => Cons(s, elements(ss));
  };

/**
 * Returns the union of sets 'set1' and 'set2'.
 */
def Set<A> union<A>(Set<A> set1, Set<A> set2) =
   case set1 {
      EmptySet => set2;
      Insert(e1, ss1) =>  case set2 {
          EmptySet => set1;
          Insert(e1, ss2) => Insert(e1, union(ss1, ss2));
          Insert(e2, ss2) =>
            if e1 < e2
            then Insert(e1, union(ss1, set2))
            else Insert(e2, union(set1, ss2));
      };
   }; 

/**
 * Returns the intersection of sets 'set1' and 'set2'.
 */
def Set<A> intersection<A>(Set<A> set1, Set<A> set2) =
   case set1 {
      EmptySet => EmptySet;
      Insert(e1, ss1) =>  case set2 {
          EmptySet => EmptySet;
          Insert(e1, ss2) => Insert(e1, intersection(ss1, ss2));
          Insert(e2, ss2) =>
            if e1 < e2
            then intersection(ss1, set2)
            else intersection(set1, ss2);
      };
   };

/**
 * Returns the difference of sets 'set1' and 'set2', i.e., all
 * elements of 'set1' that are not in 'set2'.
 */
def Set<A> difference<A>(Set<A> set1, Set<A> set2) =
   case set1 {
      EmptySet => EmptySet;
      Insert(e1, ss1) =>  case set2 {
          EmptySet => set1;
          Insert(e1, ss2) => difference(ss1, ss2);
          Insert(e2, ss2) =>
            if e1 < e2
            then Insert(e1, difference(ss1, set2))
            else difference(set1, ss2);
      };
   };

/**
 * Returns True if set 'set' contains all element of 'maybe_subset', False
 * otherwise.
 */
def Bool isSubset<A>(Set<A> maybe_subset, Set<A> set) =
    case maybe_subset {
        EmptySet => True;
        Insert(elem, rest) => contains(set, elem) && isSubset(rest, set);
    };


/**
 * Returns a set with all elements of set 'xs' plus element 'e'.
 * Returns 'xs' if 'xs' already contains 'e'.
 */
def Set<A> insertElement<A>(Set<A> xs, A e) =
  case xs {
      EmptySet => Insert(e, EmptySet);
      Insert(e, _) => xs;
      Insert(x, ss) => if e < x then Insert(e, xs) else Insert(x, insertElement(ss, e));
  };

/**
 * Returns a set with all elements of set 'xs' except element 'e'.
 */
def Set<A> remove<A>(Set<A> xs, A e) = 
  case xs {
     EmptySet => EmptySet ;
     Insert(e, ss) => ss;
     Insert(x, ss) => if e < x then xs else Insert(x, remove(ss, e));
  };

/**
 * Returns one (arbitrary) element from a set.
 * To iterate over a set, take one element and remove it from the set.
 * Repeat until set is empty.
 */
def A take<A>(Set<A> ss) =
  case ss {
    Insert(e, _) => e;
  };

/**
 * Returns one (arbitrary) element from a set, or Nothing for empty sets.
 */
def Maybe<A> takeMaybe<A>(Set<A> ss) =
  case ss {
    EmptySet => Nothing;
    Insert(e, _) => Just(e);
  };



// checks whether the input set has more elements to be iterated.
def Bool hasNext<A>(Set<A> s) = ! emptySet(s); 

// Partial function to iterate over a set.
def Pair<Set<A>,A> next<A>(Set<A> s) = 
   case s { 
      Insert(e, set2) => Pair(set2,e); 
   };

// Lists
data List<A> = Nil | Cons(A head, List<A> tail);

def List<A> list<A>(List<A> l) = l; // list constructor helper

/**
 * Returns the length of list 'list'.
 */
def Int length<A>(List<A> list) = 
   case list { 
      Nil => 0 ; 
      Cons(p, l) => 1 + length(l) ; 
   };

/**
 * Returns True if list 'list' is empty, False otherwise.
 */
def Bool isEmpty<A>(List<A> list) = list == Nil;

/**
 * Returns element 'n' of list 'list'.
 */
def A nth<A>(List<A> list, Int n) = 
  case n { 
    0 => head(list) ; 
    _ => nth(tail(list), n-1); 
  };
  
/**
 * Returns a list where all occurrences of a have been removed
 */
def List<A> without<A>(List<A> list, A a) =
  case list {
     Nil => Nil;
     Cons(a, tail) => without(tail,a);
     Cons(x, tail) => Cons(x, without(tail,a));
  };  
  
/**
 * Returns a list containing all elements of list 'list1'
 * followed by all elements of list 'list2'.
 */
def List<A> concatenate<A>(List<A> list1, List<A> list2) =
  case list1 { 
    Nil => list2 ; 
    Cons(head, tail) =>  Cons(head, concatenate(tail, list2)); 
  };
  
/**
 * Returns a list containing all elements of list 'list' followed by 'p'.
 */
def List<A> appendright<A>(List<A> list, A p) = 
    concatenate(list, Cons(p, Nil));

/**
 * Returns a list containing all elements of 'list' in reverse order.
 */
def List<A> reverse<A>(List<A> list) =
  case list { 
     Cons(hd, tl) => appendright(reverse(tl), hd); 
     Nil => Nil; 
  };
  
/**
 * Returns a list of length 'n' containing 'p' n times.
 */
def List<A> copy<A>(A p, Int n) = 
   case n { 0 => Nil; m => Cons(p,copy(p,m-1)); };




// Maps
data Map<A, B> = EmptyMap | InsertAssoc(Pair<A, B>, Map<A, B>);
 // map constructor helper (does not preserve injectivity)
def Map<A, B> map<A, B>(List<Pair<A, B>> l) =
  case l { 
     Nil => EmptyMap; 
     Cons(hd, tl) => InsertAssoc(hd, map(tl)); 
  };

/**
 * Returns True if map 'map' is empty, False otherwise.
 */
def Bool emptyMap<A, B>(Map<A, B> map) = (map == EmptyMap);

def Map<A, B> removeKey<A, B>(Map<A, B> map, A key) = // remove from the map
  case map {
  	EmptyMap => map;
    InsertAssoc(Pair(key, _), m) => m;
    InsertAssoc(pair, tail) => InsertAssoc(pair, removeKey(tail, key));
  };
    

def List<B> values<A, B>(Map<A, B> map) =
  case map {
    EmptyMap => Nil ;
    InsertAssoc(Pair(_, elem), tail) => Cons(elem, values(tail)) ;
  };

/**
 * Returns a set containing all keys of map 'map'.
 */
def Set<A> keys<A, B>(Map<A, B> map) =
  case map { 
    EmptyMap => EmptySet ;
    InsertAssoc(Pair(a, _), tail) => insertElement(keys(tail), a); 
  };

/**
 * Returns a list containing all entries of map 'map'.
 */
def List<Pair<A, B>> entries<A, B>(Map<A, B> map) =
  case map {
      EmptyMap => Nil;
      InsertAssoc(e, tail) => Cons(e, entries(tail));
  };

/**
 * Returns the value associated with key 'k' in map 'ms', or 'Nothing'.
 */
def Maybe<B> lookup<A, B>(Map<A, B> ms, A k) = // retrieve from the map
  case ms {
     InsertAssoc(Pair(k, y), _) => Just(y);
     InsertAssoc(_, tm) => lookup(tm, k);
     EmptyMap => Nothing;
  };

/**
 * Compatibility stub for #342. DEPRECATED!
 */
def Maybe<B> lookupMaybe<A, B>(Map<A, B> ms, A k) = lookup(ms, k);

/**
 * Returns the value associated with key 'k' in map 'ms',
 * or fails if not present.
 */
def B lookupUnsafe<A, B>(Map<A, B> ms, A k) = // retrieve from the map
  fromJust(lookup(ms,k));
  
/**
 * Returns the value associated with key 'k' in map 'ms', or the value 'd'
 * if 'k' has no entry in 'ms'.
 */
def B lookupDefault<A, B>(Map<A, B> ms, A k, B d) = // retrieve from the map
  case ms {
     InsertAssoc(Pair(k, y), _) => y;
     InsertAssoc(_, tm) => lookupDefault(tm, k, d);
     EmptyMap => d;
  };

/**
 * Returns a map with all entries of 'map' plus an entry 'p',
 * which might override but not remove another entry with the same key.
 */
def Map<A, B> insert<A, B>(Map<A, B> map, Pair<A, B> p) = InsertAssoc(p, map);

/**
 * Returns a map with all entries of 'ms' plus an entry mapping 'k' to 'v',
 * minus the first entry already mapping 'k' to a value.
 */  
def Map<A, B> put<A, B>(Map<A, B> ms, A k, B v) =
  case ms {
    EmptyMap => InsertAssoc(Pair(k, v),EmptyMap);
    InsertAssoc(Pair(k, _), ts) => InsertAssoc(Pair(k, v), ts);
    InsertAssoc(p, ts) => InsertAssoc(p, put(ts, k, v));
  };

/**
 * Returns a string with the base-10 textual representation of 'n'.
 *
 * This function is from the distant past when ABS had no generic `toString'.
 * Kept for backward compatibility.
 */

def String intToString(Int n) = toString(n);

/**
 * Returns a substring of string str of the given length starting from start (inclusive)
 * Where the first character has index 0
 * 
 * Example:
 *    substr("abcde",1,3) => "bcd"
 *     
 */
def String substr(String str, Int start, Int length) = builtin;

/**
 * Returns the length of the given string
 */
def Int strlen(String str) = builtin;

/**
 * Returns a string representation for t.
 */
def String toString<T>(T t) = builtin;

// Time and Duration datatypes.

// Time can be an integer value or InfTime.  Duration is aways an
// integer.
// 
// Durations can be added and subtracted from Times, and compared to
// each other.  Times can be compared to each other.
data Time = Time(Rat timeValue);
def Rat currentms() = builtin;
def Time now() = Time(currentms());

// use this like so:
//   Time t = now(); await timeDifference(now(), t) > 5;
def Rat timeDifference(Time t1, Time t2) =
  abs(timeValue(t2) - timeValue(t1));
def Bool timeLessThan(Time t1, Time t2) = // TODO: remove this, use <
  timeValue(t1) < timeValue(t2);

data Duration = Duration(Rat durationValue) | InfDuration;
def Bool isDurationInfinite(Duration d) = 
  case d { Duration(_) => False; InfDuration => True; };

def Time addDuration(Time t, Duration d) =
  Time(timeValue(t) + durationValue(d));

def Time subtractDuration(Time t, Duration d) =
  Time(timeValue(t) - durationValue(d));

def Bool durationLessThan(Duration d1, Duration d2) =
  case d1 {
      Duration(v1) => case d2 {
          Duration(v2) => v1 < v2; 
          InfDuration => True; };
      // If d1 and d2 are infinite, this function is not antisymmetric
      InfDuration => False;
  };

// negative if no (i.e. infinite) deadline
def Rat lowlevelDeadline() = builtin;
def Duration deadline() = 
  case lowlevelDeadline() < 0 {
      True => InfDuration;
      False => Duration(lowlevelDeadline());
  };

def Duration subtractFromDuration(Duration d, Rat v) =
  case d {
      InfDuration => InfDuration;
      Duration(x) => Duration(x - v);
  };

// Annotation data types for KeyABS invariants, preconditions, postconditions
data Inv;
data Pre;
data Post;

// Annotation data type to express deadlines:
// [Deadline: Duration(5)] o!m();
type Deadline = Duration;
type Critical = Bool;

/**
 * Annotation data type to define the type of annotations
 * currently only TypeAnnotation exists
 */
data Annotation = TypeAnnotation; 
 
[TypeAnnotation]
data LocationType = Far | Near | Somewhere | Infer;
 
/**
 * Can be used to annotated classes and to ensure that
 * classes are always instantiated in the right way.
 * I.e. classes annotated with [COG] must be created via
 * "new", class annotated with [Plain] must be created by using
 * "new local".
 */
data ClassKindAnnotation = COG | Plain;

/**
 * Declare local variables to be final
 */
data FinalAnnotation = Final;

/**
 * Declare methods to be atomic, i.e., such methods must not
 * contain scheduling code and also no .get
 */
data AtomicityAnnotation = Atomic;

/**
 * Declare methods to be callable from the HTTP API.
 */
data HTTPCallableAnnotation = HTTPCallable;

// Annotation data types to associate expanded Partially Defined Functions and their calls
type Expansion = Int;
type ExpansionCall = List<Int>;

// Basic higher-order functions (map, filter, foldl and foldr)
def List<B> map<A, B>(f)(List<A> list) = case list {
    Nil => Nil;
    Cons(x1111111111, xs1111111111) => Cons(f(x1111111111), map(xs1111111111));
};

def List<T> filter<T>(predicate)(List<T> list) = case list {
	Nil => Nil;
	Cons(x1111111111, xs1111111111) => let (List<T> filtered) = filter(xs1111111111) in if (predicate(x1111111111)) then Cons(x1111111111, filtered) else filtered;
};

def B foldl<A, B>(f)(List<A> list, B val) = case list {
    Nil => val;
    Cons(x1111111111, xs1111111111) => foldl(xs1111111111, f(x1111111111, val));
};

def B foldr<A, B>(f)(List<A> list, B val) = case list {
    Nil => val;
    Cons(x1111111111, xs1111111111) => f(x1111111111, foldr(xs1111111111, val));
};

// functional break point
def A watch<A>(A val) = builtin;
def A watchEx<A, B>(A val, B info) = builtin;

// input/output, first version
def Unit println(String s) = builtin;
def Unit print(String s) = builtin;
def String readln() = builtin;

// Annotation for marking objects, interface methods as accessible via HTTP
type HTTPName = String;

module ABS.StdLib.Exceptions;
export *;
// These are in their own module (and re-exported from ABS.StdLib) to
// work around a bug when defining exceptions in the ABS.StdLib
// module.  On the other hand, we might want to divide ABS.StdLib into
// submodules anyway once we have a documentation generator etc.
exception DivisionByZeroException;
exception AssertionFailException;
exception PatternMatchFailException;
exception NullPointerException;
exception StackOverflowEcxeption;
exception HeapOverflowException;
exception KeyboardInterruptException;
exception ObjectDeadException;


/**
 * Custom schedulers
 */
module ABS.Scheduler;
export *;
import * from ABS.StdLib;

data Scheduler;

// The Process datatype, passed to custom schedulers.
// 
// Pid, Process have no constructor, so this datastructure can't be generated within Abs
data Pid;
data Process;

def String method(Process p) = builtin;
def Time arrival(Process p) = builtin;
def Duration cost(Process p) = builtin;
def Duration proc_deadline(Process p) = builtin;
def Time start(Process p) = builtin;
def Time finish(Process p) = builtin;
def Bool crit(Process p) = builtin;
def Int value(Process p) = builtin;

def Process defaultscheduler(List<Process> queue) = head(queue);

def Process randomscheduler(List<Process> queue) = nth(queue, random(length(queue)));

/**
 * Foreign language interface (FLI) definitions
 */
module ABS.FLI;
export *;

data FLIAnnotation = Foreign;


/** 
 * Deployment components
 * Used to model aspects of hardware configurations and deployment.
 */
module ABS.DC;
// Interfaces
export DeploymentComponent, CloudProvider;
// Annotations
export DC, Cost, DataSize, MaxSize, CogLocation; //TODO: rename MaxSize to MaxMemory
// Datatypes, Constructors
export Resourcetype;
export Speed, Cores, Bandwidth, Memory, InfRat, Fin;
export Startupduration, Shutdownduration, PaymentInterval, CostPerInterval;
// Functions
export thisDC, finvalue;
import * from ABS.StdLib;

data Resourcetype
= Speed     // Execution speed in "cpu units" - used by [Cost: x] annotation
| Cores     // Number of cores (static declaration for deployment planning)
| Bandwidth // Transmit speed in "data units" - used by [DataSize: x] annotation
| Memory    // Memory size (static declaration for deployment planning)
| Startupduration            // Time to start, used by CloudProvider
| Shutdownduration           // Time to shut down, used by CloudProvider
| PaymentInterval            // Billing period, used by CloudProvider
| CostPerInterval            // Cost per billing period, used by CloudProvider
;

// If these constructors are renamed, adjust abs-interpreter.maude
// (advanceTotalsHistory etc.) and dc.erl (advanceTotalsHistory)
data InfRat = InfRat | Fin(Rat finvalue);

// Sums things up in percents (thus the * 100, which makes us not lose
// precision.)
def Rat sumDivsN(List<Rat> consumeds, List<Rat> totals, Int n) =
  if (n==0 || isEmpty(consumeds) || isEmpty(totals))
  then 0
  else (head(consumeds) * 100 / head(totals)) + sumDivsN(tail(consumeds), tail(totals), n-1);

def Rat averageDivsN(List<Rat> consumeds, List<Rat> totals, Int length) =
  let (Int mins) = min(length, min(length(consumeds), length(totals)))
  in if mins == 0 then 0 else sumDivsN(consumeds, totals, mins) / mins;

interface DeploymentComponent {
    // Return the load (0-100) for given resourcetype over the last n periods.
    // If resource is infinite, return 0.
    [Atomic] Rat load(Resourcetype rtype, Int periods);
    // Return the total available amount for given resourcetype.
    [Atomic] InfRat total(Resourcetype rtype);
    // Utility method, implemented in terms of 'decrementResources' /
    // 'incrementResources'.  Returns the amount transferred.
    [Atomic] Rat transfer(DeploymentComponent target, Rat amount, Resourcetype rtype);
    // Decrement available resourcetype by given amount from the next
    // time interval onwards.  Will not decrement resource below 0.
    // Returns the amount by which the resource was decreased.
    [Atomic] Rat decrementResources(Rat amount, Resourcetype rtype);
    // Increment available resourcetype by given amount from the next
    // time interval onwards.  Returns amount by which the resource
    // was increased.
    [Atomic] Rat incrementResources(Rat amount, Resourcetype rtype);

    [Atomic] String getName();

    [Atomic] CloudProvider getProvider();
    [Atomic] Time getCreationTime();
    [Atomic] Rat getStartupDuration();
    [Atomic] Rat getShutdownDuration();
    [Atomic] Int getPaymentInterval();
    [Atomic] Rat getCostPerInterval();
    [Atomic] Rat getAccumulatedCost(); // calculated via creation time + cost + payment interval
    [Atomic] Rat getNumberOfCores();
    // Convenience methods for calling CloudProvider acquireInstance,
    // releaseInstance.  If no cloud provider is set, return True.
    Bool acquire();
    Bool release();
    // Shut down deployment component.  Semantics of job termination / object
    // invalidation upon shutdown are currently under discussion.
    Bool shutdown();
}

interface DeploymentComponentForCloudProvider extends DeploymentComponent {
    [Atomic] Unit setProvider(CloudProviderForDeploymentComponent provider);
}

interface CloudProvider {
    // (pre)launchInstance might have a delay, the others are instantaneous.
    // launchInstance might hand out an already-running instance if it has
    // been released; in this case there will be no delay.
    DeploymentComponent prelaunchInstance(Map<Resourcetype, Rat> d);
    DeploymentComponent launchInstance(Map<Resourcetype, Rat> description);
    // acquireInstance, releaseInstance are called from deployment components.
    // launchInstance does the equivalent of acquireInstance.
    Bool acquireInstance(DeploymentComponent instance);
    Bool releaseInstance(DeploymentComponent instance);
    Bool shutdownInstance(DeploymentComponent instance);

    Rat getAccumulatedCost();
    [Atomic] Unit shutdown();

    // Instance descriptions.  Call setInstanceDescriptions with a map of
    // (name -> resources) information.  Then, launchInstanceNamed() returns a
    // deployment component with the specified resources, or null if the given
    // name could not be found.  The resulting deployment components are then
    // handled as normal (acquire/release/kill).
    [Atomic] Unit setInstanceDescriptions(Map<String, Map<Resourcetype, Rat>> instanceDescriptions);
		[Atomic] Unit addInstanceDescription(Pair<String, Map<Resourcetype, Rat>> instanceDescription);
		[Atomic] Unit removeInstanceDescription(String instanceDescriptionName);
    [Atomic] Map<String, Map<Resourcetype, Rat>> getInstanceDescriptions();
    DeploymentComponent prelaunchInstanceNamed(String instancename);
    DeploymentComponent launchInstanceNamed(String instancename);
}

interface CloudProviderForDeploymentComponent extends CloudProvider {
    Unit internalShutdownInstance(DeploymentComponentForCloudProvider instance);
}


class CloudProvider(String name) implements CloudProviderForDeploymentComponent {
    // Preliminary version - mind the FIXMEs!

    // Instance type descriptions for launchInstanceNamed()
    Map<String, Map<Resourcetype, Rat>> instanceDescriptions = map[];

    // All launched instances
    Set<DeploymentComponent> launchedInstances = set[];
    // Launched instances that are currently acquired
    Set<DeploymentComponent> acquiredInstances = set[];
    Set<DeploymentComponent> killedInstances = set[];
    Int nextInstanceId = 0;
    Rat accumulatedCostOfKilledDCs = 0;

    [Atomic] Unit shutdown() {
        // legacy method from when CloudProvider was an active object
        skip;
    }

    DeploymentComponent createInstance(String instancename, Map<Resourcetype, Rat> d) {
        Bool mightNeedToStartAccounting = emptySet(launchedInstances);
        DeploymentComponentForCloudProvider result
        = new DeploymentComponent(instancename + "-" + toString(nextInstanceId), d);
        result!setProvider(this);
        nextInstanceId = nextInstanceId + 1;
        // Work around a bug in the type system: upcasting in `insertElement'
        // does not work although it should
        DeploymentComponent stupidTypeSystem = result;
        launchedInstances = insertElement(launchedInstances, stupidTypeSystem);
        return result;
    }

    DeploymentComponent prelaunchInstance(Map<Resourcetype, Rat> d) {
        DeploymentComponent result = this.createInstance(name, d);
        Rat startup_duration = await result!getStartupDuration();
        await duration(startup_duration, startup_duration);
        return result;
    }

    DeploymentComponent prelaunchInstanceNamed(String instancename) {
        Maybe<Map<Resourcetype, Rat>> mconfig = lookup(instanceDescriptions, instancename);
        DeploymentComponent dc = null;
        if (isJust(mconfig)) {
            Map<Resourcetype, Rat> config = fromJust(mconfig);
            dc = this.createInstance(name + "-" + instancename, config);
        }
        Rat startup_duration = await dc!getStartupDuration();
        await duration(startup_duration, startup_duration);
        return dc;
    }

    DeploymentComponent launchInstance(Map<Resourcetype, Rat> d) {
        DeploymentComponent result = this.prelaunchInstance(d);
        acquiredInstances = insertElement(acquiredInstances, result);
        return result;
    }

    DeploymentComponent launchInstanceNamed(String instancename) {
        DeploymentComponent result = this.prelaunchInstanceNamed(instancename);
        if (result != null) {
            acquiredInstances = insertElement(acquiredInstances, result);
        }
        return result;
    }

    Bool acquireInstance(DeploymentComponent instance) {
        Bool result = True;
        CloudProvider cp = await instance!getProvider();
        if (cp != this) {
            // it's not one of "our" deployment components
            result = False;
        } else if (contains(acquiredInstances, instance)
            || contains(killedInstances, instance)) {
            result = False;
        } else {
            acquiredInstances = insertElement(acquiredInstances, instance);
        }
        return result;
    }
    Bool releaseInstance(DeploymentComponent instance) {
        // FIXME: Currently we do not protect against double-release and always
        // return True.  Once we have means of testing whether there is still
        // activity on a deployment component, we could refuse to release it in
        // that case and return False.
        if (contains(acquiredInstances, instance)) {
            acquiredInstances = remove(acquiredInstances, instance);
        }
        return True;
    }

    Bool shutdownInstance(DeploymentComponent instance) {
        instance!shutdown();
        return True;
    }

    Unit internalShutdownInstance(DeploymentComponentForCloudProvider instance) {
        DeploymentComponent stupidTypeSystem = instance;
        // Also kill an instance that is acquired.  FIXME: is this the right
        // thing, or should we refuse to shutdown?
        acquiredInstances = remove(acquiredInstances, stupidTypeSystem);
        // Insert `instance' into killedInstances so it doesn't get
        // re-acquired.
        killedInstances = insertElement(killedInstances, stupidTypeSystem);
        Rat shutdown_duration = await instance!getShutdownDuration();
        await duration(shutdown_duration, shutdown_duration);

        // Now remove from launchedInstances (after waiting for shutdown) so
        // shutdown duration gets billed
        launchedInstances = remove(launchedInstances, stupidTypeSystem);

        Rat cost = await instance!getAccumulatedCost();
        accumulatedCostOfKilledDCs = accumulatedCostOfKilledDCs + cost;
    }

    Rat getAccumulatedCost() {
        Rat result = 0;
        Time t = now();
        foreach (dc in elements(launchedInstances)) {
            Rat cost = await dc!getAccumulatedCost();
            result = result + cost;
        }
        return result + accumulatedCostOfKilledDCs;
    }

    // Sets up information for [pre]launchInstanceNamed()
    [Atomic] Unit setInstanceDescriptions(Map<String, Map<Resourcetype, Rat>> instanceDescriptions) {
        this.instanceDescriptions = instanceDescriptions;
    }

    // Adds an instance for [pre]launchInstanceNamed()
    [Atomic] Unit addInstanceDescription(Pair<String, Map<Resourcetype, Rat>> instanceDescription) {
        this.instanceDescriptions = insert(this.instanceDescriptions, instanceDescription);
    }

    // Removes an instance for [pre]launchInstanceNamed() based on its name
    [Atomic] Unit removeInstanceDescription(String instanceDescriptionName) {
        this.instanceDescriptions = removeKey(this.instanceDescriptions, instanceDescriptionName);
    }

    [Atomic] Map<String, Map<Resourcetype, Rat>> getInstanceDescriptions() {
        return this.instanceDescriptions;
    }
}


// KLUDGE: if extending / renaming the interface, adapt
// frontend/typechecker/InterfaceType.java:isDeploymentComponentType()
class DeploymentComponent (String description, Map<Resourcetype, Rat> initconfig)
implements DeploymentComponentForCloudProvider {
    // This class has fields that reflect execution state and resource
    // consumption; they are read / changed by the underlying runtime
    // system(s).  Be careful when renaming fields!

    // Histories are updated by the backend.  totalhistories stay empty in
    // case the DC has an infinite amount of resources for that type.  If
    // these field names are changed, adjust dc.erl
    // (var_current_for_resourcetype et al.) and abs-interpreter.maude (op
    // advance et al.)
    List<Rat> cpuhistory = Nil;
    List<Rat> cpuhistorytotal = Nil;
    List<Rat> bwhistory = Nil;
    List<Rat> bwhistorytotal = Nil;
    List<Rat> memoryhistory = Nil;
    List<Rat> memoryhistorytotal = Nil;
    // Counters of consumed resources in current time unit.  Modified by the
    // backend where appropriate (Speed, bandwidth self-refresh; memory
    // doesn't.)  Do not rename.
    Rat cpuconsumed = 0;
    Rat bwconsumed = 0;
    Rat memoryconsumed = 0;

    // Creation time and shutdown time are used by (at least) the
    // visualization backend.  Do not rename.
    Time creationTime = now();
    Maybe<Time> shutdownTime = Nothing;

    // Initialized flag read by the backend to avoid premature execution.  Do
    // not rename.
    Bool initialized = False;
    // shutdown flag read by the backend to refuse object creation.  Do not
    // rename.
    Bool is_shutdown = False;
    // Total amount of resources in current and next time interval.
    InfRat cpu = case lookup(initconfig, Speed) {
      Nothing => InfRat; Just(v) => Fin(v); };
    InfRat cpunext = cpu;
    InfRat bw = case lookup(initconfig, Bandwidth) {
      Nothing => InfRat; Just(v) => Fin(v); };
    InfRat bwnext = bw;
    InfRat memory = case lookup(initconfig, Memory) {
      Nothing => InfRat; Just(m) => Fin(m); };
    InfRat memorynext = memory;
    Int paymentInterval = 
        case lookup(initconfig, PaymentInterval) {
            Nothing => 1; Just(n) => truncate(n); };
    Rat costPerInterval = lookupDefault(initconfig, CostPerInterval, 0/1);
    Rat startupDuration = lookupDefault(initconfig, Startupduration, 0/1);
    Rat shutdownDuration = lookupDefault(initconfig, Shutdownduration, 0/1);
    Rat numberOfCores = lookupDefault(initconfig, Cores, 1/1);

    CloudProviderForDeploymentComponent cloudprovider = null;
    {
        this.initialized = True;
    }
    [Atomic] Rat load(Resourcetype rtype, Int periods) {
        Rat result = 0;
        case (rtype) {
            Speed => {
                if (cpu != InfRat) {
                    result = averageDivsN(cpuhistory, cpuhistorytotal, periods);
                }
            }
            Bandwidth => {
                if (bw != InfRat) {
                    result = averageDivsN(bwhistory, bwhistorytotal, periods);
                }
            }
            Memory => {
                if (memory != InfRat) {
                    result = averageDivsN(memoryhistory, memoryhistorytotal, periods);
                }
            }
        }
        return result;
    }
    [Atomic] InfRat total(Resourcetype rtype) {
        InfRat result = InfRat;
        case (rtype) {
            Speed => result = cpu;
            Bandwidth => result = bw;
            Memory => result = memory;
        }
        return result;
    }
    
    // Transfer resources between deployment components.
    // FIXME: load calculation will be invalid if resource totals have
    // been changed in the specified interval.
    [Atomic] Rat transfer(DeploymentComponent target, Rat amount, Resourcetype rtype) {
        amount = this.decrementResources(amount, rtype);
        target!incrementResources(amount, rtype);
        return amount;
    }

    [Atomic] Rat decrementResources(Rat amount, Resourcetype rtype) {
        case (rtype) {
            Speed => if (cpunext != InfRat) {
                amount = min(amount, finvalue(cpunext));
                cpunext = Fin(finvalue(cpunext) - amount);
            }
            Bandwidth => if (bwnext != InfRat) {
                amount = min(amount, finvalue(bwnext));
                bwnext = Fin(finvalue(bwnext) - amount);
            }
            Memory => if (memorynext != InfRat) {
                amount = min(amount, finvalue(memorynext));
                memorynext = Fin(finvalue(memorynext) - amount);
            }
        }
        return amount;
    }
    [Atomic] Rat incrementResources(Rat amount, Resourcetype rtype) {
        case (rtype) {
            Speed => {
                if (cpunext != InfRat) {
                    cpunext = Fin(finvalue(cpunext) + amount);
                }
            }
            Bandwidth => if (bwnext != InfRat) {
                bwnext = Fin(finvalue(bwnext) + amount);
            }
            Memory => if (memorynext != InfRat) {
                memorynext = Fin(finvalue(memorynext) + amount);
            }
        }
        return amount;
    }
    [Atomic] Unit setProvider(CloudProviderForDeploymentComponent provider) {
        this.cloudprovider = provider;
    }
    [Atomic] DeploymentComponent convertToDC() { return this; }

    [Atomic] CloudProvider getProvider() { return cloudprovider; }
    Bool acquire() {
        Bool result = True;
        if (cloudprovider != null) {
            result = await cloudprovider!acquireInstance(this);
        }
        return result;
    }
    Bool release() {
        Bool result = True;
        if (cloudprovider != null) {
            result = await cloudprovider!releaseInstance(this);
        }
        return result;
    }

    Bool shutdown() {
        if (!is_shutdown) {
            is_shutdown = True;
            shutdownTime = Just(now());
            if (cloudprovider != null) {
                cloudprovider!internalShutdownInstance(this);
            }
        }
        return True;
    }

    [Atomic] String getName() { return description; }
    [Atomic] Time getCreationTime() { return creationTime; }
    [Atomic] Rat getStartupDuration() { return startupDuration; }
    [Atomic] Rat getShutdownDuration() { return shutdownDuration; }
    [Atomic] Int getPaymentInterval() { return paymentInterval; }
    [Atomic] Rat getCostPerInterval() { return costPerInterval; }

    [Atomic] Rat getAccumulatedCost() {
        Rat result = 0;
        if (costPerInterval > 0 && paymentInterval > 0) {
            Int nIntervals = truncate(truncate(timeDifference(creationTime, now())) / paymentInterval);
            result = nIntervals * costPerInterval;
        }
        return result;
    }

    [Atomic] Rat getNumberOfCores() { return numberOfCores; }
}

// abbreviation for [DC: foo] annotations
type DC = DeploymentComponent;

def DeploymentComponent thisDC() = builtin;

// Annotation for method definitions: runtime cost specification
type Cost = Duration;

// Annotation for async method calls: size of sent data
type DataSize = Rat;

// Annotation for classes: memory size of resulting cog
type MaxSize = Rat;             //TODO: rename to MaxMemory

// Distributed execution (eg the Scala backend): where the cog will be created
type CogLocation = String;

/**
 * The ABS.SmartDeploy Module contains the data definitions for the annotations
   and interfaces used by the tool that generates automatically the Main block 
 */
module ABS.SmartDeploy;
export *;
import * from ABS.StdLib;

// definitions for the cost annotations associated to classes.
// These are now deprecated
data DeployParamSpecification = Req | List(Int) | Default(String) | User | OptList(String) ;
data DeployScenarioElement = MaxUse(Int) |
	Cost(String, Int) |
	Param(String, DeployParamSpecification) |
	Name(String);
type Deploy = List<DeployScenarioElement> ;


// definition for the annotation used to define a SmartDeploy task. The string
// is intended to be a json object
type SmartDeploy = String;
// definition for the annotation used to define the cloud provider for 
// SmartDeploy task. The string is intended to be a json object
type SmartDeployCloudProvider = String;
// definition for the annotation used to define a DeployCost task. The string
// is intended to be a json object
type SmartDeployCost = String;

// interface of the smart deployment objects. This interface is empy and it will
// be later modified by a delta automatically generated
interface SmartDeployInterface {}

/**
 * Reflective, mirror-based interface for ABS
 */
module ABS.Meta;
export *;
// these three used to reside in ABS.Meta; re-export for backward compatibility
export print, println, readln from ABS.StdLib;
import * from ABS.StdLib;
import * from ABS.Scheduler;

def ObjectMirror reflect<A>(A a) = builtin;
def ProductLine getProductLine() = builtin;

// OO wrapper for above functions
interface Runtime {
    ProductLine getProductLine();   
    // No generic methods in ABS:
    // ObjectMirror reflect(Any object);
}
class Runtime implements Runtime {
    ProductLine getProductLine() { return getProductLine(); }
    // No generic methods in ABS:
    //ObjectMirror reflect(Any object) { return reflect(object); }
}

interface ObjectMirror {
    String getClassName();
    Class getClass();
    Unit setClass(Class c);
    
    Object getFieldValue();
    Unit setFieldValue(Object val);
    [Atomic] Cog getCog();
    Unit setCog(Cog c);
    
    Bool respondsTo(String name);
//    Object send(Method m, List<T>);
}

interface Cog {
    [Atomic] Unit setScheduler(ProcessScheduler sched);
    Unit info();
}

interface ProcessScheduler {
    Process schedule(List<Process> queue);
}

interface Class {
    String getName();
    Method getMethod(String mName);
    Unit addMethod(String mName, Method m);
    Unit removeMethod(String mName);
}

interface Method {
    //Object exec(Object receiver, List<Object> params);
}

interface ProductLine {
    Product getCurrentProduct();
    Product getProduct(String s);
    Unit reconfigure(Product p);
    Unit addProduct(Product p);
    Unit removeProduct(Product p);
    Unit addReconfiguration(Reconfiguration r);   
    Unit removeReconfiguration(Reconfiguration r);   
}

interface Product {
    String getName();
    Set<String> getFeatures();
    Set<Product> getConfigurableProducts();
    Reconfiguration getReconfiguration(Product p);
    Unit reconfigure(Product p);
}

interface Reconfiguration {
    String getName();
    Product getCurrentProduct();
    Product getProduct(String s);
    Unit setCurrentProduct(Product p);
    Product getTargetProduct();
    Unit setTargetProduct(Product p);
    List<Delta> getDeltas();
    Unit setDeltas(List<Delta> deltas);
    StateUpdate getStateUpdate();
    Unit setStateUpdate(StateUpdate u);
}

interface Delta {
    String getName();
    Unit apply();
}

interface StateUpdate {
    String getName();
    Unit apply();
}

interface Feature {
    String getName();
}


/**
 * Feature reflection for ABS.
 *
 * The empty definitions in this module are rewritten by the frontend according to
 * the definitions of the productline and current product.  Note that the names of
 * all features will be exported as constructors for the Feature datatype.
 */

module ABS.Productline;
export *;
import * from ABS.StdLib;

data Feature;

def String product_name() = "";
def List<Feature> product_features() = Nil;

/**
 * JUnit XML support.
 *
 * Datatypes to write JUnit XML files which can be used e.g. in continuous
 * integration systems like Jenkins.
 * Schema: http://llg.cubic.org/docs/junit/
 * Note that you will have to manually escape XML characters in strings!
 */

module ABS.JUnit;
export *;
import * from ABS.StdLib;

data Testsuites = Testsuites (Maybe<String> isNamed, List<Testsuite> ttss);
data Testsuite  = Testsuite (String name, List<Testcase> tcs);
data Result     = Passed | Skipped | Error(String) | Failure(String);
data Testcase   = Testcase (String tcname, String tcclassname, Result result, Maybe<String> stdout, Maybe<String> stderr);

def String iterate(List<Testcase> tcs) =
  case tcs {
    Nil => "";
    Cons(tc, rest) => render(tc) + iterate(rest);
  };

def String render(Testcase tc) =
  let (String res) = "<testcase name=\""+ tcname(tc)+"\" classname=\""+tcclassname(tc)+"\">\n" in
  case result(tc) {
    Passed => res;
    Skipped => res + "<skipped />\n";
    Error(msg) => res + "<error message=\""+msg+"\" />\n";
    Failure(msg) => res + "<failure message=\""+msg+"\" />\n";
  } +
  /* TODO: XML escaping? */
  case stdout(tc) {
    Nothing => "";
    Just(msg) => "<system-out>\n"+msg+"\n</system-out>\n";
  } +
  case stderr(tc) {
    Nothing => "";
    Just(msg) => "<system-err>\n"+msg+"\n</system-err>\n";
  }
  + "</testcase>\n";

def String writeTestsuites(Testsuites tss) =
  "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<testsuites>\n"
 + iterateTS(ttss(tss))
 + "</testsuites>";

def String iterateTS(List<Testsuite> tss) =
  case tss {
    Nil => "";
    Cons(ts, rest) => writeWithHeader(False, ts) + iterateTS(rest);
  };

def String writeTestsuite(Testsuite ts) = writeWithHeader(True,ts);

def String writeWithHeader(Bool withHeader, Testsuite ts) =
    if (withHeader) then "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n" else ""
    + "<testsuite"
    + " name=\"" +name(ts) +"\" tests=\""+toString(length(tcs(ts)))+"\">\n"
    + iterate(tcs(ts))
    + "</testsuite>\n";

