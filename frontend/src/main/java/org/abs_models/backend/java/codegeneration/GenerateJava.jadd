// -*- mode: java; tab-width: 4; -*-

import java.io.*;

import org.abs_models.backend.java.*;
import org.abs_models.backend.java.codegeneration.*;
import org.abs_models.backend.java.lib.runtime.*;
import org.abs_models.backend.java.lib.expr.*;
import org.abs_models.backend.java.lib.types.*;
import org.abs_models.frontend.ast.*;
import org.abs_models.frontend.typechecker.locationtypes.LocationTypeExtension;
import org.abs_models.frontend.typechecker.locationtypes.LocationType;

aspect GenerateJava {

    boolean Model.includeDebug = true;

    public void Model.generateJavaCode(JavaCode code, boolean includeDebug) throws IOException, JavaCodeGenerationException {
        this.includeDebug = includeDebug;
        JavaGeneratorHelper.createGenFolder(code);
        for (ModuleDecl decl : getModuleDecls()) {
            try {
                decl.generateJavaCode(code);
            } catch (NotImplementedYetException e) {
                throw new JavaCodeGenerationException("Module " + decl.getName() + ":" + e.getLocalizedMessage(),e);
            } catch (RuntimeException e) {
                throw new JavaCodeGenerationException("Module " + decl.getName() + ":" + e.getLocalizedMessage(),e);
            }
        }
    }


    // Provide easy access to the Java package that is generated for each ModuleDecl
    private JavaCode.Package ModuleDecl.generatedJavaPackage = null;
    public JavaCode.Package ModuleDecl.getJavaPackage() throws JavaCodeGenerationException {
        if (generatedJavaPackage != null)
            return generatedJavaPackage;
        else
            throw new JavaCodeGenerationException("A Java Package is not yet associated with this ModuleDecl (this only happens upon code generation).");
    }

    public void ModuleDecl.generateJavaCode(JavaCode code) throws IOException, JavaCodeGenerationException {
        String packageName = getName();
        this.generatedJavaPackage = code.createPackage(packageName);

        for (Decl decl : getDecls()) {
            decl.generateJavaCode(generatedJavaPackage);
        }

        if (hasBlock()) {
            Block block = getBlock();

            String mainName = JavaBackend.getJavaNameForMainBlock();
            generatedJavaPackage.addMainClass(mainName);
            File file = generatedJavaPackage.createJavaFile(mainName);
            try (PrintStream stream = JavaCodeStream.from(file)) {
                stream.println("package " + generatedJavaPackage.packageName + ";");
                //stream.println(JavaBackendConstants.LIB_IMPORT_STATEMENT);

                stream.println("public class " + mainName + " extends " + ABSObject.class.getName() + " {");
                stream.println("public static void main(java.lang.String[] args) throws Exception {");
                stream.println(StartUp.class.getName() + ".startup(args," + mainName + ".class);");
                stream.println("}");

                stream.println("public java.lang.String getClassName() { return \"Main\"; }");
                stream.println("public java.util.List<java.lang.String> getFieldNames() { return java.util.Collections.emptyList(); }");
                stream.println("public " + mainName + "(" + COG.class.getName() + " cog) { super(cog); }");
                stream.println("public java.util.List<java.util.Map<java.lang.String, java.lang.Object>> getHttpCallableMethodInfo() { throw new UnsupportedOperationException(\"method 'getHttpCallableMethodInfo' cannot be called on Main block\");} ");

                // main block
                stream.println("public " + ABSUnit.class.getName() + " run() {");
                stream.println("// Create initial DC, hook it up to the initial cog");
                stream.println(ABSInterface.class.getName() + " __main_block_dc = ABS.DC.DeploymentComponent_c.createNewLocalObject(" + ABSString.class.getName() + ".fromString(\"Initial DC\"), ABS.StdLib.map_f.apply(new ABS.StdLib.List_Nil<>()));");
                stream.println(ABSThread.class.getName() + ".getCurrentCOG().setDCfromMainBlock(__main_block_dc);");
                block.generateJava(stream);
                stream.println("return " + JavaBackendConstants.UNITVALUE + ";");
                stream.println("}");
                stream.println("}");
            }
        }


    }

    public void Decl.generateJavaCode(JavaCode.Package pkg) throws IOException, JavaCodeGenerationException {
        PrintStream s = null;
        try {
            String name = JavaBackend.getJavaName(this);
            File file = pkg.createJavaFile(name);
            s = JavaCodeStream.from(file);
            s.println("package " + pkg.packageName + ";");
            //s.println(JavaBackendConstants.LIB_IMPORT_STATEMENT);
            generateJava(s);
        } finally {
            if (s != null)
                s.close();
        }

    }

    public void DataTypeDecl.generateJavaCode(JavaCode.Package pkg) throws IOException, JavaCodeGenerationException {
        super.generateJavaCode(pkg);
        for (DataConstructor c : getDataConstructors()) {
            c.generateJavaCode(pkg);
        }
    }

    abstract void Decl.generateJava(PrintStream stream);

    public void DataConstructor.generateJava(PrintStream stream) {
        String constructorClassName = JavaBackend.getConstructorName(this);
        DataTypeDecl dataTypeDecl = ((DataTypeType)getType()).getDecl();
        JavaGeneratorHelper.generateHelpLine(this,stream);

        stream.print("public final class " + constructorClassName);
        JavaGeneratorHelper.generateTypeParameters(stream,dataTypeDecl, true);
        stream.print(" extends " + dataTypeDecl.getName());
        JavaGeneratorHelper.generateTypeParameters(stream,dataTypeDecl, false);

        stream.println(" {");

        stream.println("public final " + ABSValue.class.getName() + "[] allArgs;");

        stream.print("public " + constructorClassName + "(");
        boolean first = true;
        int i = 0;
        for (ConstructorArg u : getConstructorArgs()) {
            if (first)
                first = false;
            else
                stream.print(", ");
            stream.print("final ");
            stream.print(JavaBackend.getJavaType(u) + " arg" + i);
            i++;
        }
        stream.println(") {");
        stream.print("allArgs = new " + ABSValue.class.getName() + "[] { ");
        i=0;
        for (ConstructorArg u : getConstructorArgs()) {
            if (i > 0)
                stream.print(", ");
            stream.print("arg" + i);
            i++;
        }
        stream.println(" };");
        stream.println("}");

        stream.println("protected " + ABSValue.class.getName() + "[] getArgs() { return allArgs; }");

        stream.println("public java.lang.String getConstructorName() { return \"" + getName() + "\";}");

        // eq method
        stream.println("public " + ABSBool.class.getName() + " eq(" + ABSValue.class.getName() + " o) {");
        stream.println("if (! (o instanceof " + constructorClassName + ")) return " + ABSBool.class.getName() + ".FALSE;");
        stream.println(constructorClassName + " other = (" + constructorClassName + ") o;");
        stream.println("boolean allEqual = java.util.stream.IntStream.range(0, allArgs.length).allMatch(i -> " + BinOp.class.getName() + ".eq(allArgs[i], other.allArgs[i]).toBoolean());");
        stream.println("return "  + ABSBool.class.getName() + ".fromBoolean(allEqual);");
        stream.println("}");
        stream.println();

        // toJSON method
        JavaGeneratorHelper.generateDataTypeConstructorToJsonMethod(stream, this);

        stream.println("}");
    }

    public void ExceptionConstructor.generateJava(PrintStream stream) {
        // Mostly copied from DataConstructor.generateJava
        String constructorClassName = JavaBackend.getConstructorName(this);
        DataTypeDecl dataTypeDecl = ((DataTypeType)getType()).getDecl();
        JavaGeneratorHelper.generateHelpLine(this,stream);

        stream.print("public final class " + constructorClassName);
        JavaGeneratorHelper.generateTypeParameters(stream,dataTypeDecl, true);
        stream.print(" extends ABS.StdLib.Exception");
        JavaGeneratorHelper.generateTypeParameters(stream,dataTypeDecl, false);

        stream.println(" {");

        stream.println("public final " + ABSValue.class.getName() + "[] allArgs;");

        stream.print("public " + constructorClassName + "(");
        boolean first = true;
        int i = 0;
        for (ConstructorArg u : getConstructorArgs()) {
            if (first)
                first = false;
            else
                stream.print(", ");
            stream.print("final ");
            stream.print(JavaBackend.getJavaType(u) + " arg" + i);
            i++;
        }
        stream.println(") {");
        stream.print("allArgs = new " + ABSValue.class.getName() + "[] { ");
        i=0;
        for (ConstructorArg u : getConstructorArgs()) {
            if (i > 0)
                stream.print(", ");
            stream.print("arg" + i);
            i++;
        }
        stream.println(" };");
        stream.println("}");

        stream.print("protected " + ABSValue.class.getName() + "[] getArgs() { return allArgs; }");

        stream.println("public java.lang.String getConstructorName() { return \"" + getName() + "\";} ");

        // eq method
        stream.println("public " + ABSBool.class.getName() + " eq(" + ABSValue.class.getName() + " o) {");
        stream.println("if (! (o instanceof " + constructorClassName + ")) return " + ABSBool.class.getName() + ".FALSE;");
        stream.println(constructorClassName + " other = (" + constructorClassName + ") o;");
        stream.println("boolean allEqual = java.util.stream.IntStream.range(0, allArgs.length).allMatch(i -> " + BinOp.class.getName() + ".eq(allArgs[i], other.allArgs[i]).toBoolean());");
        stream.println("return "  + ABSBool.class.getName() + ".fromBoolean(allEqual);");
        stream.println("}");

        // toJSON method
        JavaGeneratorHelper.generateDataTypeConstructorToJsonMethod(stream, this);

        stream.println("}");
    }

    public void InterfaceDecl.generateJava(PrintStream stream) {
        JavaGeneratorHelper.generateHelpLine(this,stream);
        stream.print("public interface " + JavaBackend.getJavaName(this) + " extends " + ABSInterface.class.getName());
        for (InterfaceTypeUse use : getExtendedInterfaceUses()) {
            String iname = JavaBackend.getQualifiedString(((InterfaceType)use.getType()).getDecl());
            stream.print(", " + iname);
        }
        stream.println(" {");

        for (MethodSig s : getBodys()) {
            // Async
            s.generateJava(stream, true);
            stream.println(";");
            // Sync
            s.generateJava(stream, false);
            stream.println(";");
        }
        stream.println("boolean __ABS_isSameCOG();");
        stream.println("}");
    }

    public void MethodSig.generateJava(PrintStream stream) {
        generateJava(stream,false);
    }

    public void MethodSig.generateJava(PrintStream stream, boolean async) {
        JavaGeneratorHelper.generateMethodSig(stream,this,async);
    }

    public void ParamDecl.generateJava(PrintStream stream) {
        getTypeUse().generateJava(stream);
        stream.print(" " + JavaBackend.getVariableName(getName()));
    }

    public void ClassDecl.generateJava(PrintStream stream) {
        JavaGeneratorHelper.generateClassDecl(stream,this);
    }

    public void DeltaDecl.generateJava(PrintStream stream) {
        // TODO: Java generation here
    }

    public void MethodImpl.generateJava(PrintStream stream) {
        JavaGeneratorHelper.generateMethodImpl(stream, this);
    }

    public void FieldDecl.generateJava(PrintStream stream) {
        JavaGeneratorHelper.generateHelpLine(this,stream);
        stream.print("private ");
        getTypeUse().generateJava(stream);
        stream.print(" ");
        stream.print(JavaBackend.getVariableName(getName()));
        stream.println(";");
    }


    public void DataTypeDecl.generateJava(PrintStream stream) {
        JavaGeneratorHelper.generateHelpLine(this,stream);

        stream.print("public abstract class " + getName());
        JavaGeneratorHelper.generateTypeParameters(stream,this, true);

        stream.println(" extends " + ABSAlgebraicDataType.class.getName() + " {");

        for (DataConstructor c : getDataConstructors()) {
            stream.println("public final boolean is" + c.getName()+
                    "() { return this instanceof " + JavaBackend.getConstructorName(c)+
                    "; }");
            stream.print("public final " + JavaBackend.getConstructorName(c));
            JavaGeneratorHelper.generateTypeParameters(stream,this, false);
            stream.println(" to" + c.getName()+
                    "() { return (" + JavaBackend.getConstructorName(c) + ") this; }");

        }

        stream.println("}");
    }

    public void FunctionDecl.generateJava(PrintStream stream) {
        if (getFunctionDef() instanceof BuiltinFunctionDef){
            // There are two cases here at the moment:
            // - "really" builtin functions. These occur only in the standard
            //   library and are known at compile-time (see class
            //   ABSBuiltInFunctions).
            // - SQLite queries; for these, we need to generate a body that
            //   runs the query.
            BuiltinFunctionDef b = (BuiltinFunctionDef)getFunctionDef();
            if (!b.isSQLite3Query()) {
                return;
            }
        }
        JavaGeneratorHelper.generateHelpLine(this,stream);

        String className = JavaBackend.getFunctionName(getName());
        stream.print("public final class " + className);
        stream.println(" implements " + ABSFunction.class.getName() + " {");
        stream.println("private " + className + "() { }");
        stream.print("public static ");
        JavaGeneratorHelper.generateTypeParameters(stream,this, true);

        getTypeUse().generateJava(stream);
        stream.print(" apply");
        JavaGeneratorHelper.generateParams(stream,getParams());
        stream.println(" {");
        if (getFunctionDef() instanceof BuiltinFunctionDef) {
            // Can currently only be an SQLite query; let it emit a function
            // body instead of a single expression.
            getFunctionDef().generateJava(stream);
        } else {
            stream.print("return (");
            getFunctionDef().generateJava(stream);
            stream.print(")");
            stream.println(";");
        }
        stream.println("}");
        stream.println("}");
    }

    public void PartialFunctionDecl.generateJavaCode(JavaCode.Package pkg) {}

    public void PartialFunctionDecl.generateJava(PrintStream stream) {}

    public void ParFnApp.generateJava(PrintStream stream) {}

    public void FunctionDef.generateJava(PrintStream stream) { }

    public void ExpFunctionDef.generateJava(PrintStream stream) {
        getRhs().generateJava(stream);
    }

    public void BuiltinFunctionDef.generateJava(PrintStream stream) {
        // See FunctionDecl.generateJava: here we emit a series of statements
        // including a return statement instead of just an expression.
        if (isSQLite3Query()) {
            JavaGeneratorHelper.generateSqlite3Body(stream, this);
        } else {
            stream.println("return null;");
        }
    }

    public void TypeParameterDecl.generateJava(PrintStream stream) {
        // is never called
    }

    public void UnknownDecl.generateJava(PrintStream stream) {
        // is never called for type-correct programs
    }

    public void TypeSynDecl.generateJava(PrintStream stream) {
        // generate nothing as type synonyms do not appear in the Java outout
    }

    public void ExceptionDecl.generateJava(PrintStream stream) {
        // generate nothing as exceptions are rewritten to datatypes
    }

    public void Block.generateJava(PrintStream stream) {
        generateJava(stream, false);
    }

    public void Block.generateJava(PrintStream stream, boolean addReturn) {
        stream.println(" {");

        super.generateJava(stream);
        if (getModel().includeDebug && (this instanceof MainBlock || this instanceof InitBlock)) {
            stream.print("if (" + ABSRuntime.class.getName() + ".getRuntime().debuggingEnabled()) ");
            String name = "init block";
            if (this instanceof MainBlock)
                name = "main block";
            stream.println(ABSThread.class.getName() + ".getCurrentTask().newStackFrame(this,\"" + name + "\");");
        }

        for (Stmt stmt : getStmts()) {
            PureExp cost = AnnotationHelper.getAnnotationValueFromName(stmt.getAnnotationList(), "ABS.DC.Cost");
            if (cost != null) {
                stream.print("new " + ABSResourceGuard.class.getName() + "(");
                cost.generateJava(stream);
                stream.println(").await(" + ABSThread.class.getName() + ".getCurrentCOG(), " + ABSThread.class.getName() + ".getCurrentTask());");
            }
            stmt.generateJava(stream);
        }

        if (this instanceof MainBlock) {
            for (VarDecl v : getVars()) {
                if (v.getName().equals("testresult")) {
                    stream.println("System.out.println(\"__ABS_TESTRESULT=\" + testresult.toBoolean());");
                }
            }
        }

        if (addReturn) {
            if (getModel().includeDebug) {
                stream.println(JavaGeneratorHelper.getDebugString(this, getEndLine()));
                stream.print("if (" + ABSRuntime.class.getName() + ".getRuntime().debuggingEnabled()) ");
                stream.println(ABSThread.class.getName() + ".getCurrentTask().popStackFrame();");
            }

            stream.println("return " + JavaBackendConstants.UNITVALUE + ";");
        }
        stream.println("}");
    }

    public void VarDecl.generateJava(PrintStream stream) {
        getTypeUse().generateJava(stream);
        String name = JavaBackend.getVariableName(getName());
        stream.print(" " + name + " = ");

        if (hasInitExp()) {
            getInitExp().generateJava(stream);
        } else {
            stream.print("null");
        }
        stream.println(";");
        if (getModel().includeDebug) {
            stream.print("if (" + ABSRuntime.class.getName() + ".getRuntime().debuggingEnabled()) ");
            stream.print(ABSThread.class.getName() + ".getCurrentTask().setLocalVariable(\"" + getName() + "\"," + name + ");");
        }
        if (getInitExp() instanceof NewExp) {
            VarDeclStmt stmt = closestParent(VarDeclStmt.class);
            if (stmt != null) {
                List<Annotation> annotations = stmt.getAnnotations();
                PureExp restname = AnnotationHelper.getAnnotationValueFromName(annotations, "ABS.StdLib.HTTPName");
                if (restname instanceof StringLiteral) {
                    stream.println();
                    stream.print(ModelApi.class.getName() + ".registerObject("
                                 + "\""+ ((StringLiteral)restname).getContent() + "\", "
                                 + "(" + ABSObject.class.getName() + ")" + name + ");");
                }
            }
        }
    }


    /*
     * STATEMENTS
     */

    public void Stmt.generateJava(PrintStream stream) {
        if (getModel().includeDebug) {
            stream.println(JavaGeneratorHelper.getDebugString(this));
        }
    }

    public void VarDeclStmt.generateJava(PrintStream stream) {
        if (getVarDecl().hasInitExp()) {
            super.generateJava(stream);
        }
        getVarDecl().generateJava(stream);
        stream.println();
    }

    public void AssignStmt.generateJava(PrintStream stream) {
        super.generateJava(stream);
        getVar().generateJava(stream);
        stream.print(" = ");
        getValue().generateJava(stream);
        stream.println(";");

        if (getVar() instanceof VarUse) {
            if (getModel().includeDebug) {
                stream.print("if (" + ABSRuntime.class.getName() + ".getRuntime().debuggingEnabled()) ");
                stream.print(ABSThread.class.getName() + ".getCurrentTask().setLocalVariable(\"" + getVar().getName() + "\", ");
                getVar().generateJava(stream);
                stream.print(");");
            }
        }
        if (getValue() instanceof NewExp) {
            PureExp restname = AnnotationHelper.getAnnotationValueFromName(getAnnotations(), "ABS.StdLib.HTTPName");
            if (restname != null && restname instanceof StringLiteral) {
                stream.println();
                stream.print(ModelApi.class.getName() + ".registerObject("
                             + "\""+ ((StringLiteral)restname).getContent() + "\", "
                             + "(" + ABSObject.class.getName() + ")" + JavaBackend.getVariableName(getVar().getName()) + ");");
            }
        }
    }

    public void AwaitStmt.generateJava(PrintStream stream) {
        super.generateJava(stream);
        JavaGeneratorHelper.generateAwaitStmt(this, stream);
    }

    public void ExpressionStmt.generateJava(PrintStream stream) {
        super.generateJava(stream);
        getExp().generateJava(stream);
        stream.println(";");
    }

    public void IfStmt.generateJava(PrintStream stream) {
        super.generateJava(stream);
        stream.print("if (");
        getCondition().generateJava(stream);
        stream.println(".toBoolean()) {");
        getThen().generateJava(stream);
        stream.println("}");
        if (hasElse()) {
            stream.println("else {");
            getElse().generateJava(stream);
            stream.println("}");
        }
    }

    public void ReturnStmt.generateJava(PrintStream stream) {
        super.generateJava(stream);
        MethodImpl m = getContextMethod();
        Type lht = getModel().getUnitType();
        if (m != null) {
            lht = m.getMethodSig().getReturnType().getType();
        }
        boolean needConversion = lht.isIntType() && getRetExp().getType().isRatType();
        if (getModel().includeDebug) {
            stream.print("if (" + ABSRuntime.class.getName() + ".getRuntime().debuggingEnabled()) ");
            stream.println(ABSThread.class.getName() + ".getCurrentTask().popStackFrame();");
        }

        stream.print("return ");
        getRetExp().generateJava(stream);
        stream.println(";");
    }

    public void SkipStmt.generateJava(PrintStream stream) {
        super.generateJava(stream);
        stream.println(";");
    }

    public void DurationStmt.generateJava(PrintStream stream) {
        super.generateJava(stream);
        stream.print("new " + ABSDurationGuard.class.getName() + "(");
        getMin().generateJava(stream);
        stream.print(", ");
        getMax().generateJava(stream);
        stream.println(").await(" + ABSThread.class.getName() + ".getCurrentCOG(), " + ABSThread.class.getName() + ".getCurrentTask());");
        stream.println(";");
    }

    public void MoveCogToStmt.generateJava(PrintStream stream) {
        super.generateJava(stream);
        stream.println(";");
        throw new NotImplementedYetException(this);
    }

    public void SuspendStmt.generateJava(PrintStream stream) {
        super.generateJava(stream);
        stream.println(JavaBackendConstants.ABSRUNTIME + ".suspend();");
    }

    public void WhileStmt.generateJava(PrintStream stream) {
        super.generateJava(stream);
        stream.print("while (");
        getCondition().generateJava(stream);
        stream.print(".toBoolean())");
        getBody().generateJava(stream);
    }

    public void CaseStmt.generateJava(PrintStream stream) {
        String varType = JavaBackend.getQualifiedString(getExpr().getType());
        String varName = "__ABS_value" + this.hashCode();
        stream.println("do {");
        stream.print("final " + varType + " " + varName + " = ");
        getExpr().generateJava(stream);
        stream.println(";");
        for (int branchcount = 0; branchcount < getNumBranch(); branchcount++) {
            CaseBranchStmt b = getBranch(branchcount);
            Pattern pattern = b.getLeft();
            String bindingName = "__ABS_binding" + pattern.hashCode();
            stream.print("final " + PatternBinding.class.getName() + " " + bindingName + " = ");
            pattern.generateJava(stream);
            stream.println(".match(" + varName + ");");
            stream.println("if (" + bindingName + " != null) {");
            java.util.List<PatternVar> freeVars = pattern.getFreePatternVars();
            for (int varcount = 0; varcount < freeVars.size(); varcount++) {
                PatternVar var = freeVars.get(varcount);
                stream.print(JavaBackend.getQualifiedString(var.getType()));
                stream.print(" " + JavaBackend.getVariableName(var.getVar().getName()));
                // Hoping and praying that free variables and binding values
                // are in the same order
                stream.print(" = (" + JavaBackend.getQualifiedString(var.getType()) + ")" + bindingName + ".getBinding(" + varcount +");");
            }
            b.getRight().generateJava(stream);
            stream.println("continue;");
            stream.println("}");
            if (branchcount == getNumBranch() - 1) {
                // KLUDGE: leave this in until we can generate ABS `throw'
                // statements
                stream.print("throw new " + UnmatchedCaseException.class.getName() + "(\"");
                JavaGeneratorHelper.printEscapedString(stream, getPositionString());
                stream.println(": value \" + " + varName + " + \" did not match any pattern.\");");
            }
        }
        stream.println("} while(false);");
    }


    public void AssertStmt.generateJava(PrintStream stream) {
        super.generateJava(stream);
        stream.print("if (!");
        getCondition().generateJava(stream);
        stream.print(".toBoolean()) throw new " + ABSAssertException.class.getName() + "(\"");
        JavaGeneratorHelper.printEscapedString(stream, getPositionString());
        stream.println(": Assertion failed\");");

    }

    /*
     * GUARDS
     */

    public abstract void Guard.generateJavaGuard(PrintStream beforeAwaitStream, PrintStream stream);

    public void AndGuard.generateJavaGuard(PrintStream beforeAwaitStream, PrintStream stream) {
        stream.print("new " + JavaBackendConstants.ANDGUARD + "(");
        getLeft().generateJavaGuard(beforeAwaitStream, stream);
        stream.print(",");
        getRight().generateJavaGuard(beforeAwaitStream, stream);
        stream.print(")");
    }

    public void ClaimGuard.generateJavaGuard(PrintStream beforeAwaitStream, PrintStream stream) {
        stream.print("new " + JavaBackendConstants.CLAIMGUARD + "(");
        getVar().generateJava(stream);
        stream.print(")");
    }

    public void ExpGuard.generateJavaGuard(PrintStream beforeAwaitStream, PrintStream stream) {
        JavaGeneratorHelper.generateExprGuard(this, beforeAwaitStream, stream);
    }

    public void DurationGuard.generateJavaGuard(PrintStream beforeAwaitStream, PrintStream stream) {
        stream.print("new " + JavaBackendConstants.DURATIONGUARD + "(");
        getMin().generateJava(stream);
        stream.print(", ");
        getMax().generateJava(stream);
        stream.print(")");
    }

    /*
     * EXPRESSIONS
     */

    public abstract void Exp.generateJava(PrintStream stream);

    public void AsyncCall.generateJava(PrintStream stream) {
        JavaGeneratorHelper.generateAsyncCall(stream, this);
    }

    public void AwaitAsyncCall.generateJava(PrintStream stream) {
        JavaGeneratorHelper.generateAwaitAsyncCall(stream, this);
    }

    public void SyncCall.generateJava(PrintStream stream) {
        PureExp callee = getCallee();
        final List<PureExp> params = getParams();
        if (callee instanceof ThisExp) {
            stream.print(JavaBackend.getMethodName(getMethod()));
            JavaGeneratorHelper.generateArgs(stream,params,getMethodSig().getTypes());
        } else {
            LocationTypeExtension locationTypeSystem = (LocationTypeExtension)this.getModel().getTypeExt().getFirstRegisteredTypeExtension(LocationTypeExtension.class);
            LocationType tv = null;
            if (locationTypeSystem != null) {
                tv = locationTypeSystem.getLocationType(callee.getType());
            }
            if (tv == null || tv.isSomewhere()) {
                if (closestParent(Stmt.class) instanceof ExpressionStmt) {
                    // we're a stand-alone o!m()
                    stream.print("if (" + ABSRuntime.class.getName() + ".checkForNull(");
                    callee.generateJava(stream);
                    stream.print(").__ABS_isSameCOG()) ");
                    callee.generateJava(stream);
                    stream.print("." + JavaBackend.getMethodName(getMethod()));
                    JavaGeneratorHelper.generateArgs(stream,params,getMethodSig().getTypes());
                    stream.print("; else ");
                    callee.generateJava(stream);
                    stream.print(".async_" + JavaBackend.getMethodName(getMethod()));
                    JavaGeneratorHelper.generateArgs(stream,params,getMethodSig().getTypes());
                    stream.print(".get()");
                    // last semicolon comes from ExpressionStmt.generateJava()
                } else {
                    // we're the right-hand side of an assignment or similar
                    stream.print(ABSRuntime.class.getName() + ".checkForNull(");
                    callee.generateJava(stream);
                    stream.print(").__ABS_isSameCOG() ? ");
                    // synchronous method call
                    callee.generateJava(stream);
                    stream.print("." + JavaBackend.getMethodName(getMethod()));
                    JavaGeneratorHelper.generateArgs(stream,params,getMethodSig().getTypes());
                    stream.print(" : ");
                    // asynchronous method call + get
                    callee.generateJava(stream);
                    stream.print(".async_" + JavaBackend.getMethodName(getMethod()));
                    JavaGeneratorHelper.generateArgs(stream,params,getMethodSig().getTypes());
                    stream.print(".get()");
                }
            } else {
                if (tv.isNear()) {
                    stream.print(ABSRuntime.class.getName() + ".checkForNull(");
                    callee.generateJava(stream);
                    stream.print(")");
                    stream.print("." + JavaBackend.getMethodName(getMethod()));
                    JavaGeneratorHelper.generateArgs(stream,params,getMethodSig().getTypes());
                } else if(tv.isFar()) {
                    stream.print(ABSRuntime.class.getName() + ".checkForNull(");
                    callee.generateJava(stream);
                    stream.print(")");
                    stream.print(".async_" + JavaBackend.getMethodName(getMethod()));
                    JavaGeneratorHelper.generateArgs(stream,params,getMethodSig().getTypes());
                    stream.print(".get()");
                }
            }
        }

    }

    public void OriginalCall.generateJava(PrintStream stream) {
        // TODO: implement
        // throw new NotImplementedYetException(this);
    }

    public void GetExp.generateJava(PrintStream stream) {
        DataTypeType t = (DataTypeType) getPureExp().getType();

        if (t.isDestinyType())
            throw new NotImplementedYetException(this, "Get expressions are not yet implemented for expressions directly typed by Destiny for the Java backend");

        // assume to be of type Fut<V>
        if (!t.isFutureType() || !t.hasTypeArgs())
            return;

        Type typeArg = t.getTypeArg(0);
        if (!(getParent() instanceof ExpressionStmt)) {
            stream.print("(" + JavaBackend.getQualifiedString(typeArg) + ")");
        }
        getPureExp().generateJava(stream);
        stream.print(".get()");
    }

    public void NewExp.generateJava(PrintStream stream) {
        ClassDecl decl = ((UnionType)getType()).getOriginatingClass();
        String className = JavaBackend.getQualifiedString(decl);

        if (!hasLocal()) {
            String strategy = null;
            PureExp scheduler = getInheritedAnnotationValue("Scheduler");
            PureExp dc = getInheritedAnnotationValue("DC");
            String dc_exp = "(ABS.DC.DeploymentComponent_i)(" + ABSThread.class.getName() + ".getCurrentCOG().getDC())";
            if (dc != null) {
                ByteArrayOutputStream output = new ByteArrayOutputStream();
                PrintStream s = new PrintStream(output);
                dc.generateJava(s);
                dc_exp = output.toString();
            }
            if (scheduler != null) {
                strategy = JavaGeneratorHelper.generateUserSchedulingStrategy(this, scheduler);
            }
            stream.print(className + ".__ABS_createNewCogObject");

            if (strategy != null)
                JavaGeneratorHelper.generateArgs(stream, "this, new " + strategy + "(), " + dc_exp, getParams(), decl.getTypes());
            else
                JavaGeneratorHelper.generateArgs(stream, "this, null, " + dc_exp, getParams(), decl.getTypes());

        } else {
            stream.print(className + ".__ABS_createNewLocalObject");
            JavaGeneratorHelper.generateArgs(stream, "this", getParams(), decl.getTypes());
        }
    }

    public void ImplementsExp.generateJava(PrintStream stream) {
        throw new NotImplementedYetException(this);
    }
    public void AsExp.generateJava(PrintStream stream) {
        throw new NotImplementedYetException(this);
    }

    public abstract void TypeUse.generateJava(PrintStream stream);

    public void DataTypeUse.generateJava(PrintStream stream) {
        stream.print(JavaBackend.getJavaType(this));
    }

    public void InterfaceTypeUse.generateJava(PrintStream stream) {
        stream.print(JavaBackend.getJavaType(this));
    }
    /******/
    public void TypeParameterUse.generateJava(PrintStream stream) {
        stream.print(getName());
    }

    public void UnresolvedTypeUse.generateJava(PrintStream stream) {
        throw new JavaBackendException(this,"Type " + getName() + " is unresolved!");
    }

    public void FieldUse.generateJava(PrintStream stream) {
        ClassDecl d = (ClassDecl) getContextDecl();
        String className = JavaBackend.getClassName(d.getName());
        stream.print(className + ".this." + JavaBackend.getVariableName(getName()));
    }

    public void VarUse.generateJava(PrintStream stream) {
        stream.print(JavaBackend.getVariableName(getName()));
    }

    public void IfExp.generateJava(PrintStream stream) {
        getCondExp().generateJava(stream);
        stream.print(".toBoolean() ? ");
        getThenExp().generateJava(stream);
        stream.print(" : ");
        getElseExp().generateJava(stream);
    }

    public void CaseExp.generateJava(PrintStream stream) {
        stream.print("new " + Case.class.getName());
        String varType = JavaBackend.getQualifiedString(getExpr().getType());
        String expType = JavaBackend.getQualifiedString(getType());
        /*
       stream.print(varType);
       stream.print(',');
       stream.println(expType + ">");
         */
        stream.println("() {");
        stream.print("public " + expType + " of(");
        for (String freeVarName : getFreeVars()) {
            VarOrFieldDecl decl = lookupVarOrFieldName(freeVarName,false);
            String freeVarType = JavaBackend.getQualifiedString(decl.getType());
            stream.print("final " + freeVarType + " " + JavaBackend.getVariableName(freeVarName));
            stream.print(", ");
        }

        stream.println("final " + varType + " __ABS_value) {");
        int i = 0;
        for (CaseBranch b : getBranchs()) {
            String bindingName = "__ABS_binding" + i;
            Pattern pattern = b.getLeft();
            java.util.List<PatternVar> freeVars = pattern.getFreePatternVars();
            stream.print("final " + PatternBinding.class.getName() + " " + bindingName + " = ");
            pattern.generateJava(stream);
            stream.println(".match(__ABS_value);");
            stream.println("if (" + bindingName + " != null) {");
            for (int j = 0; j < freeVars.size(); j++) {
                PatternVar var = freeVars.get(j);
                stream.println("final " + JavaBackend.getQualifiedString(var.getType())
                               + " " + JavaBackend.getVariableName(var.getVar().getName())
                               + " = "
                               + "(" + JavaBackend.getQualifiedString(var.getType()) + ")"
                               + bindingName + ".getBinding(" + j + ");");
            }
            stream.print("return ");
            b.getRight().generateJava(stream);
            stream.println(";");
            stream.println("}");
            i++;
        }
        stream.print("throw new " + UnmatchedCaseException.class.getName() + "(\"");
        JavaGeneratorHelper.printEscapedString(stream, getPositionString());
        stream.println(": value \" + __ABS_value + \" did not match any pattern.\");");
        stream.println("}");
        stream.print("}.of(");
        for (String freeVarName : getFreeVars()) {
            stream.print(JavaBackend.getVariableName(freeVarName));
            stream.print(", ");
        }

        getExpr().generateJava(stream);
        stream.print(")");
    }

    public abstract void Pattern.generateJava(PrintStream stream);

    public void ConstructorPattern.generateJava(PrintStream stream) {
        DataConstructor decl = getDataConstructor();
        assert decl != null : "We typechecked it!";
        stream.print("new " + PatternConstructor.class.getName() + "(" + JavaBackend.getQualifiedString(decl) + ".class");
        for (Pattern p : getParams()) {
            stream.print(",");
            p.generateJava(stream);
        }
        stream.print(")");
    }

    public void PatternVar.generateJava(PrintStream stream) {
        stream.print("new " + PatternVariable.class.getName() + "(\"" + JavaBackend.getVariableName(getVar().getName()) + "\")");
    }

    public void UnderscorePattern.generateJava(PrintStream stream) {
        stream.print("new " + AnyPattern.class.getName() + "()");
    }

    public void PatternVarUse.generateJava(PrintStream stream) {
        stream.print("new " + PatternValue.class.getName() + "(" + JavaBackend.getVariableName(getName()) + ")");
    }

    public void LiteralPattern.generateJava(PrintStream stream) {
        stream.print("new " + PatternValue.class.getName() + "(");
        getLiteral().generateJava(stream);
        stream.print(")");
    }

    public void FnApp.generateJava(PrintStream stream) {

        // Have to explicitly type the call due to a bug in the JastAdd Java
        // compiler that generates wrong code otherwise.
        FunctionDecl d = (FunctionDecl)getDecl();

        if (d.getFunctionDef() instanceof BuiltinFunctionDef) {
            // This handles both StdLib functions and sqlite queries
            JavaGeneratorHelper.generateBuiltInFnApp(stream,this);
        } else {
            stream.print(JavaBackend.getQualifiedString(d) + ".");
            Type declaredResultType = d.getTypeUse().getType();
            stream.print("apply");
            JavaGeneratorHelper.generateArgs(stream,getParams(), d.getTypes());
        }
    }

    public void DataConstructorExp.generateJava(PrintStream stream) {
        DataConstructor c = getDataConstructor();
        assert c != null;
        DataTypeDecl decl = c.getDataTypeDecl();
        Type t = decl.getType();
        if (t.isBoolType()) {
            if ("True".equals(c.getName()))
                stream.print(ABSBool.class.getName() + ".TRUE");
            else
                stream.print(ABSBool.class.getName() + ".FALSE");
        } else if (t.isUnitType()) {
            stream.print(JavaBackendConstants.UNITVALUE);
        } else {
            stream.print("new " + JavaBackend.getQualifiedString(c));
            if (decl instanceof ParametricDataTypeDecl) {
                stream.print("<>");
            }
            JavaGeneratorHelper.generateArgs(stream,getParams(), c.getTypes());
        }
    }

    public void LetExp.generateJava(PrintStream stream) {
        stream.print("new " + Let.class.getName());
        String varType = JavaBackend.getQualifiedString(getVar().getType());
        String expType = JavaBackend.getQualifiedString(getExp().getType());
        stream.print("() { public " + expType);
        stream.print(" in(");
        for (String freeVarName : getExp().getFreeVars()) {
            if (freeVarName.equals(getVar().getName()))
                continue;
            // ignore renaming of variables to temp variables...
            String freeVarName2 = freeVarName.replaceFirst("^temp\\$[0-9]+\\$", "");
            VarOrFieldDecl decl = getExp().lookupVarOrFieldName(freeVarName2,false);
            if (decl == null) {
                throw new IllegalArgumentException("Variable " + freeVarName + " cannot be resolved");
            }
            String freeVarType = JavaBackend.getQualifiedString(decl.getType());
            stream.print("final " + freeVarType + " " + JavaBackend.getVariableName(freeVarName));
            stream.print(", ");
        }

        stream.print("final " + varType + " " + JavaBackend.getVariableName(getVar().getName()));
        stream.print(") { ");
        stream.print("return ");
        getExp().generateJava(stream);
        stream.print("; }}.in(");
        for (String freeVarName : getExp().getFreeVars()) {
            if (freeVarName.equals(getVar().getName()))
                continue;
            stream.print(freeVarName);
            stream.print(", ");
        }
        getVal().generateJava(stream);
        stream.print(")");
    }

    public void IntLiteral.generateJava(PrintStream stream) {
        // Long.MAX_VALUE = 9223372036854775807L
        boolean needsFromString = getContent().length() > 18;
        stream.print(ABSInteger.class.getName());
        if (needsFromString) {
            stream.print(".fromString(\"");
            stream.print(getContent());
            stream.print("\")");
        } else {
            stream.print(".fromLong(");
            stream.print(getContent());
            stream.print("L)");
        }
    }

    public void FloatLiteral.generateJava(PrintStream stream) {
        stream.print(ABSFloat.class.getName());
        stream.print(".fromDouble(");
        stream.print(getContent() + "d");
        stream.print(")");
    }

    public void StringLiteral.generateJava(PrintStream stream) {
        stream.print(ABSString.class.getName());
        stream.print(".fromString(\"");
        JavaGeneratorHelper.printEscapedString(stream, getContent());
        stream.print("\")");
    }

    public void ListLiteral.generateJava(PrintStream stream) {
        for (PureExp e : getPureExps()) {
            stream.print("new ABS.StdLib.List_Cons(");
            e.generateJava(stream);
            stream.print(", ");
        }
        stream.print("new ABS.StdLib.List_Nil()");
        for (int i = 0; i < getNumPureExp(); i++) {
            stream.print(")");
        }
    }

    public void NullExp.generateJava(PrintStream stream) {
        stream.print("null");
    }

    public void ThisExp.generateJava(PrintStream stream) {
        stream.print("this");
    }

    public void DestinyExp.generateJava(PrintStream stream) {
        throw new NotImplementedYetException(this);
    }

    public void MinusExp.generateJava(PrintStream stream) {
        getOperand().generateJava(stream);
        stream.print(".negate()");
    }

    public void NegExp.generateJava(PrintStream stream) {
        getOperand().generateJava(stream);
        stream.print(".negate()");
    }

    public void AddAddExp.generateJava(PrintStream stream) {
        getLeft().generateJava(stream);
        stream.print(".add(");
        getRight().generateJava(stream);
        stream.print(")");
    }

    public void SubAddExp.generateJava(PrintStream stream) {
        getLeft().generateJava(stream);
        stream.print(".subtract(");
        getRight().generateJava(stream);
        stream.print(")");
    }

    public void DivMultExp.generateJava(PrintStream stream) {
        getLeft().generateJava(stream);
        stream.print(".divide(");
        getRight().generateJava(stream);
        stream.print(")");
    }

    public void ModMultExp.generateJava(PrintStream stream) {
        getLeft().generateJava(stream);
        stream.print(".mod(");
        getRight().generateJava(stream);
        stream.print(")");
    }

    public void MultMultExp.generateJava(PrintStream stream) {
        getLeft().generateJava(stream);
        stream.print(".multiply(");
        getRight().generateJava(stream);
        stream.print(")");
    }

    public void AndBoolExp.generateJava(PrintStream stream) {
        getLeft().generateJava(stream);
        stream.print(".and(");
        getRight().generateJava(stream);
        stream.print(")");
    }

    public void OrBoolExp.generateJava(PrintStream stream) {
        getLeft().generateJava(stream);
        stream.print(".or(");
        getRight().generateJava(stream);
        stream.print(")");
    }

    public void EqExp.generateJava(PrintStream stream) {
        stream.print(BinOp.class.getName() + ".eq(");
        getLeft().generateJava(stream);
        stream.print(",");
        getRight().generateJava(stream);
        stream.print(")");
    }

    public void NotEqExp.generateJava(PrintStream stream) {
        stream.print(BinOp.class.getName() + ".notEq(");
        getLeft().generateJava(stream);
        stream.print(",");
        getRight().generateJava(stream);
        stream.print(")");
    }

    public void GTEQExp.generateJava(PrintStream stream) {
        stream.print(BinOp.class.getName() + ".gtEq(");
        getLeft().generateJava(stream);
        stream.print(",");
        getRight().generateJava(stream);
        stream.print(")");
    }

    public void GTExp.generateJava(PrintStream stream) {
        stream.print(BinOp.class.getName() + ".gt(");
        getLeft().generateJava(stream);
        stream.print(",");
        getRight().generateJava(stream);
        stream.print(")");
    }

    public void LTEQExp.generateJava(PrintStream stream) {
        stream.print(BinOp.class.getName() + ".ltEq(");
        getLeft().generateJava(stream);
        stream.print(",");
        getRight().generateJava(stream);
        stream.print(")");
    }

    public void LTExp.generateJava(PrintStream stream) {
        stream.print(BinOp.class.getName() + ".lt(");
        getLeft().generateJava(stream);
        stream.print(",");
        getRight().generateJava(stream);
        stream.print(")");
    }

    /*****/
    public void TraitUse.generateJava(PrintStream stream) { }
    public void TraitUse.generateJavaDynamic(PrintStream stream) { }
    public void TraitDecl.generateJavaDynamic(PrintStream stream) { }
    public void TraitDecl.generateJava(PrintStream stream) { }
    public void DeltaTraitModifier.generateJavaDynamic(PrintStream stream) { }
    public void DeltaTraitModifier.generateJava(PrintStream stream) { }
    public void AddMethodModifier.generateJavaDynamic(PrintStream stream) { }
    public void AddMethodModifier.generateJava(PrintStream stream) { }
    public void RemoveMethodModifier.generateJavaDynamic(PrintStream stream) { }
    public void RemoveMethodModifier.generateJava(PrintStream stream) { }
    public void ModifyMethodModifier.generateJavaDynamic(PrintStream stream) { }
    public void ModifyMethodModifier.generateJava(PrintStream stream) { }

}


