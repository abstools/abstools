import org.abs_models.frontend.typechecker.nullable.NullableType;
import org.abs_models.frontend.analyser.BitVec;

/**
 * Computes whether references (or futures) are Null using data flow analysis
 */
aspect Null {
  // == Null in ==
  /**
   * Used to compute isNull, do not use directly
   */
  syn BitVec<VarOrFieldDecl> CFGNode.null_in() circular [entry().getAllVarOrFieldDecls()] {
    CFGNode self = this;

    boolean isCatch = self instanceof CaseBranchStmt 
      && ((CaseBranchStmt) self).parentStmt() instanceof TryCatchFinallyStmt;

    // Special case: if we have exactly one pred, we might extract extra info
    if (pred().size() == 1) {
      CFGNode p = null;
      for (CFGNode n : pred()) {
        p = n;
      }
      if (p instanceof IfStmt) {
        IfStmt i = (IfStmt) p;
        if (self == i.getThen()) {
          return p.null_out_then();
        } else {
          return p.null_out_else();
        }
      } else if(p instanceof WhileStmt) {
        WhileStmt w = (WhileStmt) p;
        if (self == w.getBody()) {
          return p.null_out_then();
        } else {
          return p.null_out_else();
        }
      } else if(p instanceof AssertStmt) {
        AssertStmt a = (AssertStmt) p;
        if (self instanceof CaseBranchStmt) {
          return p.null_out_else();
        } else {
          return p.null_out_then();
        }
      } else {
        return isCatch ? p.null_in() : p.null_out();
      }
    }

    BitVec<VarOrFieldDecl> s = entry().getAllVarOrFieldDecls();

    for (CFGNode n : pred()) {
      if (!isCatch && n instanceof IfStmt && !((IfStmt) n).hasElse()) {
        // We are in a stmt that follows an if without else and we have > 1 preds
        // This means that we can use the else information
        s = s.intersect(n.null_out_else());
        continue;
      }
      s = s.intersect(isCatch ? n.null_in() : n.null_out());
    }
    return s;
  }
  

  // == null out ==
  // For most stmts out = in
  /**
   * Used to compute isNull, do not use directly
   */
  syn BitVec<VarOrFieldDecl> CFGNode.null_out() circular [entry().getAllVarOrFieldDecls()] = null_in();
  /**
   * Used to compute isNull, do not use directly
   * What gets propagated to the `then` successors of a conditional node (if, while)
   */
  syn BitVec<VarOrFieldDecl> CFGNode.null_out_then() circular [entry().getAllVarOrFieldDecls()] = new BitVec<>();
  /**
   * Used to compute isNull, do not use directly
   * What gets propagated to the `else` successors of a conditional node (if, while)
   */
  syn BitVec<VarOrFieldDecl> CFGNode.null_out_else() circular [entry().getAllVarOrFieldDecls()] = new BitVec<>();

  eq CFGEntry.null_out() {
    BitVec<VarOrFieldDecl> s = new BitVec<>();

    /*
     * This is a special case. Fields without init (or with init `null`) are null at the beginning of the InitBlock
     * This is the only case in which variables declared as `Nonnull` are allowed to be `null`
     * The checker ensures that these fields are initialized in the InitBlock
     */
    if (getParent() instanceof InitBlock) {
      InitBlock ib = (InitBlock) getParent();
      ClassDecl d = (ClassDecl) ib.getParent().getParent();

      for (FieldDecl f : d.getFields()) {
        if (!f.hasInitExp() || f.getInitExp() instanceof NullExp) {
          s.add(f);
        }
      }
    }

    return s;
  }

  eq AssertStmt.null_out_then() {
    VarOrFieldDecl d = getCondition().testsNull();
    if (d != null) {
      return null_in().union(d);
    }
    return null_in();
  }
  eq AssertStmt.null_out_else() {
    VarOrFieldDecl d = getCondition().testsNotNull();
    if (d != null) {
      return null_in().union(d);
    }
    return null_in();
  }

  eq AssignStmt.null_out() {
    BitVec<VarOrFieldDecl> in = null_in();

    Exp e = getValue();
    VarOrFieldUse var = getVar();

    VarOrFieldDecl d = var.getDecl();

    if (e.isNull()) {
      return in.union(d);
    } else {
      return in.compl(d);
    }
  }

  eq ExpressionStmt.null_out() = getExp().null_out();

  eq IfStmt.null_out_then() {
    VarOrFieldDecl d = getCondition().testsNull();
    if (d != null) {
      return null_in().union(d);
    }
    return null_in();
  }
  eq IfStmt.null_out_else() {
    VarOrFieldDecl d = getCondition().testsNotNull();
    if (d != null) {
      return null_in().union(d);
    }
    return null_in();
  }

  eq VarDeclStmt.null_out() {
    VarDecl d = getVarDecl();

    BitVec<VarOrFieldDecl> in = null_in();

    if (!d.hasInitExp()) {
      // Because we have no init, the value is null
      return in.union(d);
    }

    Exp init = d.getInitExp();
    if (init.isNull()) {
      return init.null_out().union(d);
    } else {
      return init.null_out().compl(d);
    }
  }

  eq WhileStmt.null_out_then() {
    VarOrFieldDecl d = getCondition().testsNull();
    if (d != null) {
      return null_in().union(d);
    }
    return null_in();
  }
  eq WhileStmt.null_out_else() {
    VarOrFieldDecl d = getCondition().testsNotNull();
    if (d != null) {
      return null_in().union(d);
    }
    return null_in();
  }

  // == Exp ==
  /**
   * Used to compute isNull, do not use directly
   */
  syn BitVec<VarOrFieldDecl> Exp.null_in() = parentStmt().null_in();

  /**
   * Used to compute isNull, do not use directly
   */
  syn BitVec<VarOrFieldDecl> Exp.null_out();

  eq Exp.null_out() = null_in();

  eq Call.null_out() {
    BitVec<VarOrFieldDecl> in = null_in();
    PureExp callee = getCallee();

    if (callee instanceof VarOrFieldUse) {
      VarOrFieldUse c = (VarOrFieldUse) callee;
      return in.compl(c.getDecl());
    }

    return in;
  }
  
  /**
    * True iff the expression is ensured to be null
    */
  syn boolean Exp.isNull() circular [true];

  eq Call.isNull() = false;

  eq GetExp.isNull() = getPureExp().isNull();

  eq NewExp.isNull() = false;

  eq OriginalCall.isNull() = false;

  eq VarOrFieldUse.isNull() = null_in().contains(getDecl());

  eq AsExp.isNull() = false;

  // Binary expr can't be a reference
  eq Binary.isNull() = false;

  eq CaseExp.isNull() {
    for (CaseBranch b : getBranchs()) {
      if (!b.getRight().isNull()) {
        return false;
      }
    }
    return true;
  }

  // Can't be a reference
  eq DataConstructorExp.isNull() = false;

  eq FnApp.isNull() = false;

  eq IfExp.virtualThenStmt().null_in() {
    VarOrFieldDecl d = getCondExp().testsNull();
    if (d != null) {
      return null_in().union(d);
    }
    return null_in();
  }

  eq IfExp.virtualElseStmt().null_in() {
    VarOrFieldDecl d = getCondExp().testsNotNull();
    if (d != null) {
      return null_in().union(d);
    }
    return null_in();
  }

  eq IfExp.isNull() = getThenExp().isNull() && getElseExp().isNull();

  eq ImplementsExp.isNull() = false;

  inh BitVec<VarOrFieldDecl> VirtualStmt.null_in();
  eq LetExp.virtualStmt().null_in() {
    BitVec<VarOrFieldDecl> in = null_in();
    ParamDecl d = getVar();

    if (getVal().isNull()) {
      return in.union(d);
    }

    return in;
  }
  eq LetExp.isNull() = getExp().isNull();

  eq ExpFunctionDef.virtualStmt().null_in() = new BitVec<>();

  eq LiteralExp.isNull() = false;

  eq NullExp.isNull() = true;

  eq ParFnApp.isNull() = false;

  eq ThisExp.isNull() = false;

  eq DestinyExp.isNull() = false;

  eq Unary.isNull() = false;
}
