import org.abs_models.frontend.typechecker.nullable.NullableType;
import org.abs_models.frontend.typechecker.nullable.PrimitiveNullableType;
import org.abs_models.frontend.analyser.BitVec;
import org.abs_models.frontend.typechecker.nullable.NullCheckerExtension;

/**
 * Computes whether references (or futures) are Nonnull using data flow analysis
 */
aspect Nonnull {
  /**
   *  Gathers all declarations relevant to the nullable type analysis
   *  These differ depending on the node this entry belongs to:
   *    - MethodImpl: All parameters and all declarations in the body
   *    - If the node is in a ClassDecl: All parameters and fields
   *    - MainBlock: All declarations in the block
   */
  syn lazy BitVec<VarOrFieldDecl> CFGEntry.getAllVarOrFieldDecls() {
    BitVec<VarOrFieldDecl> decls = new BitVec<>();
    ASTNode parent = getParent();

    if (parent instanceof MethodImpl) {
      MethodImpl met = (MethodImpl) parent;
      java.util.List<VarOrFieldDecl> d = met.findChildren(VarOrFieldDecl.class);
      decls.addAll(d);
      for (ParamDecl p : met.getMethodSig().getParams()) {
        decls.add(p);
      }
    }

    ASTNode n = parent;
    ClassDecl c = null;
    while (n != null && !(n instanceof ModuleDecl)) {
      if (n instanceof ClassDecl) {
        c = (ClassDecl) n;
        break;
      }
      n = n.getParent();
    }

    if (c != null) {
      for (ParamDecl p : c.getParams()) {
        decls.add(p);
      }
      for (FieldDecl f : c.getFields()) {
        decls.add(f);
      }
    }

    if (parent instanceof MainBlock) {
      MainBlock mb = (MainBlock) parent;
      java.util.List<VarOrFieldDecl> d = mb.findChildren(VarOrFieldDecl.class);
      decls.addAll(d);
    }

    return decls;
  }

  /**
   * Whether this expr is `id == null` or `null == id`
   */
  syn VarOrFieldDecl PureExp.testsNull() = null;
  eq EqExp.testsNull() {
    PureExp l = getLeft();
    PureExp r = getRight();

    if (l instanceof NullExp) {
      PureExp e = l;
      l = r;
      r = e;
    }

    if (r instanceof NullExp && l instanceof VarOrFieldUse) {
      return ((VarOrFieldUse) l).getDecl();
    }
    return null;
  }

  /**
   * Whether this expr is `id != null` or `null != id`
   */
  syn VarOrFieldDecl PureExp.testsNotNull() = null;
  eq NotEqExp.testsNotNull() {
    PureExp l = getLeft();
    PureExp r = getRight();

    if (l instanceof NullExp) {
      PureExp e = l;
      l = r;
      r = e;
    }

    if (r instanceof NullExp && l instanceof VarOrFieldUse) {
      return ((VarOrFieldUse) l).getDecl();
    }
    return null;
  }

  /**
   * Whether the annotation is the Nonnull annotation
   */
  syn boolean Annotation.nonnull() {
    PureExp e = getValue();
    if (e instanceof DataConstructorExp) {
      DataConstructorExp d = (DataConstructorExp) e;
      String name = d.getConstructor();
      if (name.equals("Nonnull") && !d.hasParam()) {
        return true;
      }
    }
    return false;
  }
}
