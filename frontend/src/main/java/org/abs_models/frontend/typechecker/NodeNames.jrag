// Inform node about the name of the Module where it was declared
aspect ModuleName {
   syn String Decl.moduleName() = getModuleDecl().getName();

   syn lazy String ModuleModifier.getModuleName();

    // By default look it up in the delta's 'uses' clause
    eq ModuleModifier.getModuleName() = (getDelta().hasImportedModule()) ?
                        getDelta().getImportedModule().getModuleName() :
                         getDelta().isLocal() ?
                         getDelta().getModuleDecl().getName() : null;

   eq AddClassModifier.getModuleName() {
        // search in class name
        String prefix = (new Name(getClassDecl().getName())).getModuleName();
        if (prefix != null)
            return prefix;
        else
            return super.getModuleName();
    }

    eq ModifyClassModifier.getModuleName() {
        // search in class name
        String prefix = (new Name(getName())).getModuleName();
        if (prefix != null)
            return prefix;
        else
            return super.getModuleName();
    }
    
    eq RemoveClassModifier.getModuleName() {
        // search in class name
        String prefix = (new Name(getName())).getModuleName();
        if (prefix != null)
            return prefix;
        else
            return super.getModuleName();
    }
    
    eq AddInterfaceModifier.getModuleName() {
        // search in class name
        String prefix = (new Name(getInterfaceDecl().getName())).getModuleName();
        if (prefix != null)
            return prefix;
        else
            return super.getModuleName();
    }

    eq ModifyInterfaceModifier.getModuleName() {
        // search in class name
        String prefix = (new Name(getName())).getModuleName();
        if (prefix != null)
            return prefix;
        else
            return super.getModuleName();
    }
    
    eq RemoveInterfaceModifier.getModuleName() {
        // search in interface name
        String prefix = (new Name(getName())).getModuleName();
        if (prefix != null)
            return prefix;
        else
            return super.getModuleName();
    }

    /* TODO: define equations for other ModuleModifiers: 
     * AddTypeSynModifier ModifyTypeSynModifier AddDataTypeModifier ModifyDataTypeModifier AddFunctionModifier
     * Note: superclass behaviour adequate for: AddImportModifier AddExportModifier
     */
}

aspect DeltaName {
    inh String ModuleModifier.deltaName();
    eq DeltaDecl.getModuleModifier().deltaName() = this.getName();

    inh String Modifier.deltaName();
    eq ModifyClassModifier.getModifier().deltaName() = this.deltaName();
}

// Set the name of ModuleModifier to name of entity that is being modified by ModuleModifier
aspect Name {
    abstract public String ModuleModifier.getName();
    syn String AddClassModifier.getName() = this.getClassDecl().getName();
    syn String AddInterfaceModifier.getName() = this.getInterfaceDecl().getName();
    syn String AddDataTypeModifier.getName() = this.getDataTypeDecl().getName();
    syn String AddFunctionModifier.getName() = this.getFunctionDecl().getName();
    syn String AddTypeSynModifier.getName() = this.getTypeSynDecl().getName();
    syn String ModifyTypeSynModifier.getName() = this.getTypeSynDecl().getName();
    syn String ModifyDataTypeModifier.getName() = this.getDataTypeDecl().getName();
    syn String NamespaceModifier.getName() = "NamespaceModifier"; // not used anywhere
}

//Inform modifier node about the module to which it applies
aspect TargetModuleName {
    syn String ModuleModifier.targetModuleName() = getModule() == null ? null : getModule().getName();
 
    inh String Modifier.targetModuleName();
    eq ModifyClassModifier.getModifier().targetModuleName() = this.targetModuleName();
}

// inform modifier node about the name of the class to which it applies
aspect TargetClassName {
    syn String ModifyClassModifier.targetClassName() = this.getSimpleName();
    syn String AddClassModifier.targetClassName() = this.getSimpleName();

    inh String Modifier.targetClassName();
    eq ModifyClassModifier.getModifier().targetClassName() = this.getSimpleName();
}

//inform modifier node about the qualified name of the class to which it applies
aspect TargetQualifiedClassName {
    abstract public String ClassModifier.targetQualifiedClassName();
    syn String ModifyClassModifier.targetQualifiedClassName() = this.getQualifiedName();
    syn String AddClassModifier.targetQualifiedClassName() = this.getQualifiedName();
    syn String RemoveClassModifier.targetQualifiedClassName() = this.getQualifiedName();

    inh String Modifier.targetQualifiedClassName();
    eq ModifyClassModifier.getModifier().targetQualifiedClassName() = this.getQualifiedName();
}

// strip off any module name prefix
aspect SimpleName {
    syn String ModuleModifier.getSimpleName() {
        Name name = new Name(this.getName());
        return name.getSimpleName();
    }

    public boolean Name.isQualifiedName() {
        return getName().indexOf('.') > -1;
    }
    public boolean Name.isSimpleName() {
        return !isQualifiedName();
    }
}

// qualify node names with the name of the module where they were defined
aspect QualifiedName {
    public String Decl.getQualifiedName() {
        return StringUtils.joinNames(moduleName(), getName());
    }
    
    public String ModuleModifier.getQualifiedName() {
        return StringUtils.joinNames(getModuleName(), getSimpleName());
    }
}

// inform Model about which product of the SPL it represents; default is "core"
aspect SPLProduct {
    private String Model.productName = "core";
    syn String Model.getProductName() = this.productName;
}
