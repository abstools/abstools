/* $Id$ */
import org.abs_models.common.*;

import org.abs_models.frontend.analyser.ErrorMessage;
import org.abs_models.frontend.analyser.TypeError;
import org.abs_models.frontend.variablechecker.*;
import org.abs_models.frontend.typechecker.*;

import java.util.HashMap;

aspect ApplyChecker {
    public ApplicationConstraints Model.applyVarCheck(SemanticConditionList errors, ModelFamilySignature signature) {
        ApplicationConstraints apps = new ApplicationConstraints();
        for (CompilationUnit u : getCompilationUnits())
            u.applyVarCheck(errors, signature, apps);
         return apps;
    }

    public void CompilationUnit.applyVarCheck(SemanticConditionList errors, ModelFamilySignature signature, ApplicationConstraints apps) {
        for (ModuleDecl d : getModuleDecls())
            d.applyVarCheck(errors, signature, apps);
    }
    public void ModuleDecl.applyVarCheck(SemanticConditionList errors, ModelFamilySignature signature, ApplicationConstraints apps) {
            for (Decl d : getDecls())
                d.applyVarCheck(errors, signature, apps, getName());

            if(hasProductLine())
                getProductLine().applyVarCheck(errors, signature, apps, getName());
    }


    public void LocalProductLine.applyVarCheck(SemanticConditionList errors, ModelFamilySignature signature, ApplicationConstraints apps, String path) {
        apps.computeDeltaTheta(this);
        for(DeltaDecl dDecl: getDeltaDecls()) //TODO: compute order first
            dDecl.applyVarCheck(errors, signature, apps, path);
    }

    public void DeltaDecl.applyVarCheck(SemanticConditionList errors, ModelFamilySignature signature, ApplicationConstraints apps, String path) {

      AppCond newPsi = new AppCondTrue();
        for(ModuleModifier mod : getModuleModifiers()) {
            ApplicationConstraints subCons = new ApplicationConstraints(apps, apps.getDeltaTheta(this.getName()));
            mod.applyVarCheck(errors, signature, apps, path);
            newPsi = new AppCondAnd(newPsi.treeCopyNoTransform(), subCons.getPsi().treeCopyNoTransform());
        }

        apps.setPsi(newPsi);
    }

    public abstract void ModuleModifier.applyVarCheck(SemanticConditionList errors, ModelFamilySignature signature, ApplicationConstraints apps, String path);
    public void NamespaceModifier.applyVarCheck(SemanticConditionList errors, ModelFamilySignature signature, ApplicationConstraints apps, String path){ }
    public void FunctionalModifier.applyVarCheck(SemanticConditionList errors, ModelFamilySignature signature, ApplicationConstraints apps, String path){ }

    public void AddClassModifier.applyVarCheck(SemanticConditionList errors, ModelFamilySignature signature, ApplicationConstraints apps, String path){
        this.getClassDecl().applyVarCheck(errors, signature, apps, path);
    }
    public void ModifyClassModifier.applyVarCheck(SemanticConditionList errors, ModelFamilySignature signature, ApplicationConstraints apps, String path){
        String myPath = path+"."+getName();
        AppCond psi = apps.getPsi();
        AppCond myTheta = apps.getTheta(myPath);
        AppCond newPsi = ApplicationConstraints.imply(psi, myTheta);
        for (Modifier mod : getModifiers()){
            ApplicationConstraints subCons = new ApplicationConstraints(apps);
            mod.applyVarCheck(errors, signature, subCons, path+"."+getClassDecl().getName());
            newPsi = new AppCondAnd(newPsi, subCons.getPsi());
        }
        apps.setPsi(psi);
    }

    public void RemoveClassModifier.applyVarCheck(SemanticConditionList errors, ModelFamilySignature signature, ApplicationConstraints apps, String path){
      String myPath = path+"."+getName();
      AppCond psi = apps.getPsi();
      AppCond myTheta = apps.getTheta(myPath);
      AppCond newPsi = ApplicationConstraints.imply(psi, myTheta);
      apps.setPsi(newPsi);

      ClassFamilySignature cfSig = signature.getModuleSignature(path.split(".")[0]).getClassSignature(getClassDecl().getName());

      for( String fieldName : cfSig.getFields().keySet() ){
          String fPath = myPath+"."+fieldName;
          AppCond fTheta = apps.getTheta(fPath);
          apps.setTheta(fPath, new AppCondAnd(fTheta, new AppCondNot(psi)));
      }
      cfSig.methods().stream().map(methodSig -> getName()).forEach(s -> {
          String fPath = myPath+"."+s;
          AppCond fTheta = apps.getTheta(fPath);
          apps.setTheta(fPath, new AppCondAnd(fTheta, new AppCondNot(psi)));
      });

      apps.setTheta(myPath, new AppCondAnd(myTheta, new AppCondNot(psi)));
    }
    public void AddInterfaceModifier.applyVarCheck(SemanticConditionList errors, ModelFamilySignature signature, ApplicationConstraints apps, String path){
        getInterfaceDecl().applyVarCheck(errors, signature, apps, path);
    }
    public void ModifyInterfaceModifier.applyVarCheck(SemanticConditionList errors, ModelFamilySignature signature, ApplicationConstraints apps, String path){
        String myPath = path+"."+getName();
        AppCond psi = apps.getPsi();
        AppCond myTheta = apps.getTheta(myPath);
        AppCond newPsi = ApplicationConstraints.imply(psi, myTheta);
        for (MethodSigModifier mod : getMethodSigModifiers()){
            ApplicationConstraints subCons = new ApplicationConstraints(apps);
            mod.applyVarCheck(errors, signature, subCons, path+"."+getInterfaceDecl().getName());
            newPsi = new AppCondAnd(newPsi, subCons.getPsi());
        }
        apps.setPsi(psi);
    }

    public void RemoveInterfaceModifier.applyVarCheck(SemanticConditionList errors, ModelFamilySignature signature, ApplicationConstraints apps, String path){
      String myPath = path+"."+getName();
      AppCond psi = apps.getPsi();
      AppCond myTheta = apps.getTheta(myPath);
      AppCond newPsi = ApplicationConstraints.imply(psi, myTheta);
      apps.setPsi(newPsi);

      InterfaceFamilySignature cfSig = (InterfaceFamilySignature) signature.getModuleSignature(path.split(".")[0]).getBottomSignature(getInterfaceDecl().getName());

      cfSig.methods().stream().map(methodSig -> getName()).forEach(s -> {
          String fPath = myPath+"."+s;
          AppCond fTheta = apps.getTheta(fPath);
          apps.setTheta(fPath, new AppCondAnd(fTheta, new AppCondNot(psi)));
      });

      apps.setTheta(myPath, new AppCondAnd(myTheta, new AppCondNot(psi)));
    }

    public abstract void Modifier.applyVarCheck(SemanticConditionList errors, ModelFamilySignature signature, ApplicationConstraints apps, String path);

    public void RemoveFieldModifier.applyVarCheck(SemanticConditionList e, ModelFamilySignature signature, ApplicationConstraints apps, String path) {
      String myPath = path+"."+getFieldDecl().getName();
      AppCond psi = apps.getPsi();
      AppCond myTheta = apps.getTheta(myPath);
      AppCond newPsi = ApplicationConstraints.imply(psi, myTheta);
      apps.setPsi(newPsi);
      apps.setTheta(myPath, new AppCondAnd(myTheta, new AppCondNot(psi)));
    }
    public void ModifyMethodModifier.applyVarCheck(SemanticConditionList e, ModelFamilySignature signature, ApplicationConstraints apps, String path) {
        String myPath = path + "." + getMethodImpl().getMethodSig().getName();
        AppCond psi = apps.getPsi();
        AppCond myTheta = apps.getTheta(myPath);
        AppCond newPsi = ApplicationConstraints.imply(psi, myTheta);
        apps.setPsi(newPsi);
    }
    public void AddMethodModifier.applyVarCheck(SemanticConditionList e, ModelFamilySignature signature, ApplicationConstraints apps, String path) {
        getMethodImpl().applyVarCheck(e, signature, apps, path);
    }
    public void AddFieldModifier.applyVarCheck(SemanticConditionList e, ModelFamilySignature signature, ApplicationConstraints apps, String path) {
        getFieldDecl().applyVarCheck(e, signature, apps, path);
    }
    public void RemoveMethodModifier.applyVarCheck(SemanticConditionList e, ModelFamilySignature signature, ApplicationConstraints apps, String path) {
      AppCond newPsi = new AppCondTrue();
      for(MethodSig sig : getMethodSigs()) {
          String myPath = path + "." + sig.getName();
          AppCond psi = apps.getPsi();
          AppCond myTheta = apps.getTheta(myPath);
          AppCond myPsi = ApplicationConstraints.imply(psi, myTheta);
          newPsi = new AppCondAnd(myPsi, newPsi);
          apps.setTheta(myPath, new AppCondAnd(myTheta, new AppCondNot(psi)));
      }
      apps.setPsi(newPsi);
    }

    public abstract void MethodSigModifier.applyVarCheck(SemanticConditionList errors, ModelFamilySignature signature, ApplicationConstraints apps, String path);


    public void RemoveMethodSigModifier.applyVarCheck(SemanticConditionList e, ModelFamilySignature signature, ApplicationConstraints apps, String path) {
      String myPath = path+"."+getMethodSig().getName();
      AppCond psi = apps.getPsi();
      AppCond myTheta = apps.getTheta(myPath);
      AppCond newPsi = ApplicationConstraints.imply(psi, myTheta);
      apps.setPsi(newPsi);
      apps.setTheta(myPath, new AppCondAnd(myTheta, new AppCondNot(psi)));
    }
    public void AddMethodSigModifier.applyVarCheck(SemanticConditionList e, ModelFamilySignature signature, ApplicationConstraints apps, String path) {
        getMethodSig().applyVarCheck(e, signature, apps, path);
    }

    public void DeltaTraitModifier.applyVarCheck(SemanticConditionList e, ModelFamilySignature signature, ApplicationConstraints apps, String path) {}


    public abstract void Decl.applyVarCheck(SemanticConditionList errors, ModelFamilySignature signature, ApplicationConstraints apps, String path);

    public void ClassDecl.applyVarCheck(SemanticConditionList errors, ModelFamilySignature signature, ApplicationConstraints apps, String path) {
      String myPath = path+"."+getName();
      AppCond psi = apps.getPsi();
      AppCond myTheta = apps.getTheta(myPath);
      AppCond newPsi = ApplicationConstraints.imply(psi, new AppCondNot(myTheta));
      apps.setTheta(myPath, new AppCondOr(myTheta, psi));

        for (FieldDecl f : getFields()){
            ApplicationConstraints subCons = new ApplicationConstraints(apps);
            f.applyVarCheck(errors, signature, subCons, myPath);
            newPsi = new AppCondAnd(newPsi, subCons.getPsi());
        }

        for (MethodImpl m : getMethods()){
            ApplicationConstraints subCons = new ApplicationConstraints(apps);
            m.applyVarCheck(errors, signature, subCons, myPath);
            newPsi = new AppCondAnd(newPsi, subCons.getPsi());
        }

      apps.setPsi(newPsi);
    }

    public void InterfaceDecl.applyVarCheck(SemanticConditionList errors, ModelFamilySignature signature, ApplicationConstraints apps, String path) {
        String myPath = path+"."+getName();
        AppCond psi = apps.getPsi();
        AppCond myTheta = apps.getTheta(myPath);
        AppCond newPsi = ApplicationConstraints.imply(psi, new AppCondNot(myTheta));
        apps.setTheta(myPath, new AppCondOr(myTheta, psi));

        for (MethodSig s : getBodys()){
            ApplicationConstraints subCons = new ApplicationConstraints(apps);
            s.applyVarCheck(errors, signature, subCons, myPath);
            newPsi = new AppCondAnd(newPsi, subCons.getPsi());
        }

        apps.setPsi(newPsi);
    }

    public void MethodImpl.applyVarCheck(SemanticConditionList errors, ModelFamilySignature signature, ApplicationConstraints apps, String path) {
        getMethodSig().applyVarCheck(errors, signature, apps, path);
    }

    public void MethodSig.applyVarCheck(SemanticConditionList errors, ModelFamilySignature signature, ApplicationConstraints apps, String path) {
        String myPath = path+"."+getName();
        AppCond psi = apps.getPsi();
        AppCond myTheta = apps.getTheta(myPath);
        AppCond newPsi = ApplicationConstraints.imply(psi, new AppCondNot(myTheta));
        apps.setPsi(newPsi);
        apps.setTheta(myPath, new AppCondOr(myTheta, psi));
    }

    public void FieldDecl.applyVarCheck(SemanticConditionList errors, ModelFamilySignature signature, ApplicationConstraints apps, String path) {
        String myPath = path+"."+getName();
        AppCond psi = apps.getPsi();
        AppCond myTheta = apps.getTheta(myPath);
        AppCond newPsi = ApplicationConstraints.imply(psi, new AppCondNot(myTheta));
        apps.setPsi(newPsi);
        apps.setTheta(myPath, new AppCondOr(myTheta, psi));
    }

    public void FunctionDecl.applyVarCheck(SemanticConditionList e, ModelFamilySignature signature, ApplicationConstraints apps, String path) {}
    public void ParametricFunctionDecl.applyVarCheck(SemanticConditionList e, ModelFamilySignature signature, ApplicationConstraints apps, String path) {}
    public void PartialFunctionDecl.applyVarCheck(SemanticConditionList e, ModelFamilySignature signature, ApplicationConstraints apps, String path) {}
    public void ParFnApp.applyVarCheck(SemanticConditionList e, ModelFamilySignature signature, ApplicationConstraints apps, String path) {}
    public void TraitDecl.applyVarCheck(SemanticConditionList e, ModelFamilySignature signature, ApplicationConstraints apps, String path) {}
    public void TypeParameterDecl.applyVarCheck(SemanticConditionList e, ModelFamilySignature signature, ApplicationConstraints apps, String path) {}
    public void DataTypeDecl.applyVarCheck(SemanticConditionList e, ModelFamilySignature signature, ApplicationConstraints apps, String path) {}
    public void DataConstructor.applyVarCheck(SemanticConditionList e, ModelFamilySignature signature, ApplicationConstraints apps, String path) {}
    public void UnknownDecl.applyVarCheck(SemanticConditionList e, ModelFamilySignature signature, ApplicationConstraints apps, String path) {}
    public void TypeSynDecl.applyVarCheck(SemanticConditionList e, ModelFamilySignature signature, ApplicationConstraints apps, String path) {}

}
