import com.google.common.base.Joiner;

aspect ProductLineTypeAnalysis {

    // inform DeltaClause about the DeltaDecl that it references
    syn lazy DeltaDecl DeltaClause.getDeltaDecl() {
        return getProductLine().getModel().getDeltaDeclsMap().get(getDeltaspec().getDeltaID());
    }

    /*
     * Top-level method for type-checking the SPL
     */
    syn lazy SemanticConditionList Model.typeCheckPL() {
        SemanticConditionList errors = new SemanticConditionList();
        if (! hasProductLine())
            return errors;
        ProductLineAnalysisHelper.typeCheckPL(getProductLine(), errors);
        return errors;
    }

    /*
     * Return all valid feature configurations of the feature model.
     * These are determined by solving the CSP.
     *
     * TODO:
     * Solve the CSP only considering features (no attributes, as that could result
     * in a quasi infinite number of configurations).
     * Note that we drop attributes anyway in Model.getProductList() below.
     */
    syn lazy Set<Map<String,Integer>> Model.getFeatureModelConfigurations() {
        if (! hasMTVL() && ! hasVL())
            return Collections.emptySet();

        // FIXME Once dropped, you cannot get attibutes back
        //dropAttributes(); // Features ONLY
        ChocoSolver solver = instantiateCSModel();

        // Each configuration is represented as a map: FeatureName->Value
        return solver.getSolutions();
    }

    /* Return all products (a.k.a. configurations/variants/solutions) of the feature model
     * -- not to be confused with the explicitly declared products (product P(...)).
     * -- feature attributes are ignored
     *
     * Add all products as non-terminal attributes (NTAs)
     * to the AST (as a List<Product> to the Model node)
     */
    syn nta lazy List<Product> Model.getProductList() {

        List<Product> plist = new List<Product>();
        Set<String> cache = new HashSet<String>();

        long time0 = System.currentTimeMillis();
        Set<Map<String,Integer>> featureConfs = getFeatureModelConfigurations();
        long time1 = System.currentTimeMillis();
        if (this.debug)
            System.out.println("\u23F1 Solving CSP duration (s): " + (time1 - time0)/1000.0);

        for (Map<String,Integer> features : featureConfs) {
            // set Features
            List<Feature> flist = new List<Feature>();
            for (String fname : features.keySet()) {
                if (fname.startsWith("$")) // internal ChocoSolver variable
                    continue;
                if (fname.contains(".")) // feature *attribute*
                    continue;
                if (features.get(fname) == 1) { // only add *selected* features
                    Feature feature = new Feature(fname, new List<AttrAssignment>()); // disregard any attribute assignments
                    flist.add(feature);
                }
            }
            /* Avoid adding same product mutiple times (due to attributes with different assigned values).
             * FIXME this is unnecessary once getFeatureModelConfigurations() returns only feature sets without attributes.
             */
            if (! cache.contains(flist.toString())) {
                cache.add(flist.toString());
                Product product = new Product(flist);
                plist.add(product);
            }
        }
        return plist;
    }

    /*
     * Return a string listing all features of the product, e.g. {A,B,C,D}
     */
    syn lazy String Product.getFeatureSetAsString() {
        java.util.List<String> features = new ArrayList<String>();
        for (Feature feature : getFeatures())
            features.add(feature.getName());
        java.util.Collections.sort(features);
        Joiner joiner = Joiner.on(",").skipNulls();
        String featureSet = joiner.join(features);
        return "{" + featureSet + "}";
    }

    public void DeltaTraitModifier.collectMethodIDs(HashSet<String> methodIDSet, Model model) {
        getMethodModifier().collectMethodIDs(methodIDSet, model);
    }

    public abstract void MethodModifier.collectMethodIDs(HashSet<String> methodIDSet, Model model);
    public void ModifyMethodModifier.collectMethodIDs(HashSet<String> methodIDSet, Model model) {
        getTraitExpr().collectMethodIDs(methodIDSet, model);
    }
    public void RemoveMethodModifier.collectMethodIDs(HashSet<String> methodIDSet, Model model) {
        for (MethodSig sig : getMethodSigList()) {
            methodIDSet.add(sig.getName());
        }
    }
    public void AddMethodModifier.collectMethodIDs(HashSet<String> methodIDSet, Model model) {
        getTraitExpr().collectMethodIDs(methodIDSet, model);
    }

    public abstract void TraitExpr.collectMethodIDs(HashSet<String> methodIDSet, Model model);

    public void TraitNameExpr.collectMethodIDs(HashSet<String> methodIDSet, Model model){
        for (Decl decl : model.getDecls()) {
            if(decl instanceof TraitDecl){
                TraitDecl tDecl = (TraitDecl)decl;
                if(tDecl.getName().equals(this.getName())){
                    tDecl.getTraitExpr().collectMethodIDs(methodIDSet, model);
                }
            }
        }
    }
    public void TraitModifyExpr.collectMethodIDs(HashSet<String> methodIDSet, Model model){
        getTraitExpr().collectMethodIDs(methodIDSet, model);
        getMethodModifier().collectMethodIDs(methodIDSet, model);
    }

    public void TraitSetExpr.collectMethodIDs(HashSet<String> methodIDSet, Model model){
        for (MethodImpl met : getMethodImplList()) {
            methodIDSet.add(met.getMethodSig().getName());
        }
    }

}
