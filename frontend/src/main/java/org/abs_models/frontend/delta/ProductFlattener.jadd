import java.util.*;
import org.abs_models.frontend.delta.*;
import org.abs_models.common.*;

aspect ProductFlattener {

    /**************************************************************************
     * Configure a product
     * This is the top level method, which does the following:
     * - find the features of a given product,
     * - find a valid sequence of associated deltas,
     * - resolve original() calls,
     * - apply deltas in sequence.
     */
    public void Model.flattenForProduct(String id) throws WrongProgramArgumentException,DeltaModellingException {
        ProductDecl decl = this.findProduct(id);
        flattenForProduct(decl);
        flushTreeCache();
    }
    /**************************************************************************
     * Apply delta to model without checking if the product is valid wrt the feature model
     * i.e. apply each ModuleModifier to its corresponding class or interface
     */
    public void Model.flattenForProductUnsafe(String id) throws WrongProgramArgumentException,DeltaModellingException {
        ProductDecl prod = this.findProduct(id);
        flattenForProduct(prod, false);
    }
    public void Model.flattenForProduct(ProductDecl decl) throws WrongProgramArgumentException,DeltaModellingException {
        flattenForProduct(decl, true);
    }
    public void Model.flattenForProduct(String id, boolean check) throws WrongProgramArgumentException,DeltaModellingException {
        ProductDecl prod = this.findProduct(id);
        flattenForProduct(prod, check);
    }

    /**
     * Refined with MTVL-check in CSP.jadd.
     */
    public void Model.flattenForProduct(ProductDecl decl, boolean check) throws WrongProgramArgumentException,DeltaModellingException {
	assert decl != null;
        if (verbose)
            System.out.println("--- configuring product: " + decl.getName());
        flattenForProduct(decl.getProduct());
        // remember which product was generated
        productName = decl.getName();
    }

    /* Global PLs */
    public void Model.flattenForProduct(Product product) throws DeltaModellingException {
        // find product line
        ProductLine pl = getProductLine();
        if (pl == null)
            throw new DeltaModellingException("Model is missing a 'productline' definition");

        if (!product.featuresFromGlobalPL(pl)) {
            throw new DeltaModellingException("Model is missing a 'productline' definition for the product");
        }
        // find/sort applicable delta IDs
        Set<String> deltaids = pl.findApplicableDeltas(product);
        java.util.List<String> sorted_deltaids = pl.sortDeltas(deltaids);

        // find corresponding DeltaDecls
        ArrayList<DeltaDecl> deltas = new ArrayList<DeltaDecl>();
        for (String deltaid : sorted_deltaids)
            deltas.add(getDeltaDeclsMap().get(deltaid));

        // substitute delta parameters
        pl.substituteDeltaParams(deltas, product);

        if (verbose) {
            System.out.print("--- applying deltas to core");
            for (DeltaDecl delta : deltas) {
                print(" << " + delta.getName());
            }
            println(" .");
        }
        // apply the applicable traits
        applyTraits();

        // apply the applicable deltas in the given order
        applyDeltas(deltas);
    }

    public void Model.flattenModuleForProduct(ProductDecl decl, boolean check) throws WrongProgramArgumentException,DeltaModellingException {
        assert decl != null;
        if (verbose)
            System.out.println("--- configuring product: " + decl.getName());
        if (check && !decl.satisfiesConstraints()) {
            String msg = "Product [" + (decl.getName().isEmpty() || decl.getName().equals("") ? decl.getProduct().getFeatureSetAsString() : decl.getName() )+ "] does not satisfy the feature model.";
            throw new WrongProgramArgumentException(msg);
        }

        String newModule = flattenModuleForProduct(decl.getProduct());
        if (decl.getModuleDecl() != null) {
            decl.getModuleDecl().addImportIfNotExists(newModule);
        }
    }

    public String Model.flattenModuleForProduct(Product product) throws DeltaModellingException {
    	if (getLocalProductLines() == null || getLocalProductLines().isEmpty())
            throw new DeltaModellingException("Model is missing a local 'productline' definition");

        ModuleDecl modProductLine = findModuleDeclForProduct(product);
        //applyTraits();

        //Check also for global product line
        if (modProductLine == null) {
            throw new DeltaModellingException("Model is missing a productline definition for the product " +
                product.getFeatureSetAsString());
        }
        String newModuleName = modProductLine.flattenForProduct(product);

        //for all new C () with {PE} where PE equals the product
        updateExpsWithProductDecl(product, newModuleName);

        return newModuleName;
    }

    public ModuleDecl Model.findModuleDeclForProduct(Product product) {
        for (ModuleDecl mod : getModuleDecls()){
            if (mod.hasPLForProduct(product))
                return mod;
        }
        return null;
    }
    public boolean ModuleDecl.hasPLForProduct(Product product) {
        if (hasProductLine()){
            for (Feature f : product.getFeatures()) {
                 if (!getProductLine().getDeclaredFeatures().contains(f.getName()))
                        return false;
            }
            return true;
        }
        return false;
    }

    public void Model.updateExpsWithProductDecl(Product product, String moduleName) {
        java.util.List<NewExp> exps = new ArrayList<>();
        newExpsWithProductDecl.forEach( e -> {
            if (e.getProductDecl() != null && product.equals(e.getProductDecl().getProduct()))
                exps.add(e);
            });

        java.util.List<InterfaceTypeUse> types = new ArrayList<>();
        interfaceTypeUseWithProductDecl.forEach( itu -> {
            if (itu.getProductDecl() != null && product.equals(itu.getProductDecl().getProduct()))
                types.add(itu);
            });

        ituNewExpMap.forEach((itu, e) -> {
            if ( types.contains(itu) && getVariableDecls().contains(e.getClassName()))
                e.setClassName(moduleName + "." + e.getClassName());
        });
        newExpItuMap.forEach((e, setItu) -> {
            if (exps.contains(e))
               for (InterfaceTypeUse itu : setItu)
                   if (getVariableDecls().contains(itu.getName()))
                       itu.setName(moduleName + "." + itu.getName());
        });

        ituMap.forEach((vItu, setItu) -> {
          if ( types.contains(vItu))
            for (InterfaceTypeUse itu : setItu)
                if (getVariableDecls().contains(itu.getName()))
                    itu.setName(moduleName + "." + itu.getName());
        });
        for (InterfaceTypeUse type : types){
           type.getModuleDecl().addImportIfNotExists(moduleName);
           InterfaceTypeUse t = new InterfaceTypeUse();
           List<Annotation> ls = type.getAnnotationList().treeCopyNoTransform();
           t.setAnnotationList(ls);
           if (getVariableDecls().contains(type.getName())) {
               t.setName(moduleName + "." + type.getName());
           } else {
               t.setName(type.getName());
           }
           t.setParent(type.getParent());
           type.getParent().setChild(t, type.getParent().getIndexOfChild(type));
           ituNewExpMap.remove(type);
           ituMap.remove(type);
        }
        for (NewExp e : exps) {
            e.getModuleDecl().addImportIfNotExists(moduleName);
            e.setProductDeclOpt(new Opt());
            if (getVariableDecls().contains(e.getClassName()))
                e.setClassName(moduleName + "." + e.getClassName());
            else {
            }
            newExpItuMap.remove(e);
        }
        interfaceTypeUseWithProductDecl.removeAll(types);
        newExpsWithProductDecl.removeAll(exps);
    }

    public String ModuleDecl.flattenForProduct(Product product){
        //create new module for the product as a copy of this
        String newModuleDeclName = product.shortFeaturesName(getName());
        ModuleDecl newModule = this.freshCopy();
        newModule.setName(newModuleDeclName);
        getParent().addChild(newModule);
        newModule.setParent(this.getParent());

        //((CompilationUnit) getParent().getParent()).addModuleDeclNoTransform(newModule);
        getModel().flushAttrCache();
        // find product line
        LocalProductLine pl = newModule.getProductLine();
        

        // find/sort applicable delta IDs
        Set<String> deltaids = pl.findApplicableDeltas(product);
        java.util.List<String> sorted_deltaids = pl.sortDeltas(deltaids);

        // find corresponding DeltaDecls
        ArrayList<DeltaDecl> deltas = new ArrayList<DeltaDecl>();
        for (String deltaid : sorted_deltaids)
            deltas.add(pl.getDeltaDeclsMap().get(deltaid));

         // substitute delta parameters
         // pl.substituteDeltaParams(deltas, product);

        if (getModel().verbose) {
            System.out.print("--- applying deltas to core");
            for (DeltaDecl delta : deltas) {
                getModel().print(" << " + delta.getName());
            }
            getModel().println(" .");
        }


        // apply the applicable deltas in the given order
        newModule.applyDeltas(deltas);
        // remove productlines related elements from the new module
        newModule.removeProductLine();

        newModule.removeNotVariableDecls(this.getName());
        return newModule.getName();
        }

    /**************************************************************************
     * Simplifications before product line type checking
     */
    public void Model.collapseTraitModifiers() {
        for (DeltaDecl delta : getAllDeltaDecls()) {
            delta.collapseTraitModifiers();
        }
        flushTreeCache();
    }

    public void DeltaDecl.collapseTraitModifiers() {
        for (ModuleModifier mod : getModuleModifierList()) {
            mod.collapseTraitModifiers();
        }
    }

    /**************************************************************************
     * Apply deltas to model
     */
    public void Model.applyDeltas(java.util.List<DeltaDecl> deltas) throws DeltaModellingException {
        // TODO/FIXME: The following code is sort of hack-ish and slow. Find a better way
        //             to flush the correct cache at the same time (or avoid flushing at all?)
        for (DeltaDecl delta : deltas) {
            this.applyDelta(delta);
            for (CompilationUnit unit: this.getCompilationUnits())
                for (ModuleDecl module: unit.getModuleDecls())
                    module.flushCache();
        }
        for (CompilationUnit unit: this.getCompilationUnits()){
            for (ModuleDecl module: unit.getModuleDecls()){
                for (Decl decl : module.getDecls()) {
                    if(decl instanceof ClassDecl){
                        ((ClassDecl)decl).computeDelete();
                    }
                }
            }
        }
    }
    /**************************************************************************
     * Apply deltas to module
     */
    public void ModuleDecl.applyDeltas(java.util.List<DeltaDecl> deltas) throws DeltaModellingException {
        // TODO/FIXME: The following code is sort of hack-ish and slow. Find a better way
        //             to flush the correct cache at the same time (or avoid flushing at all?)
        for (DeltaDecl delta : deltas) {
            delta.apply();
            flushCache();
        }
        for (Decl decl : getDecls()) {
            if (decl instanceof ClassDecl){
                ((ClassDecl)decl).computeDelete();
            }
        }
    }

    /**************************************************************************
     * apply each FunctionalModifier and ModuleModifier
     * to its corresponding class or interface
     *
     * These "apply" methods are defined in "DeltaModifierApplicator.jadd"
     */
    public void Model.applyDelta(DeltaDecl delta) throws DeltaModellingException {
        for (ModuleModifier mod : delta.getModuleModifiers()) {
            //System.out.println("*** applying ModuleModifier " + mod);
            mod.apply();
        }
    }

    /**************************************************************************
     * find a particular product given by its name
     */
    public ProductDecl Model.findProduct(String id) throws WrongProgramArgumentException {
        for (ProductDecl p : getProductDecls()) {
            if (id.equals(p.getName()))
                return p;
        }
        throw new WrongProgramArgumentException("Product [" + id + "] is not declared");
    }

    /**************************************************************************
     * Evaluate each delta clause to find the applicable delta names
     * i.e. test each application condition in the context of the features which are ON in the given product
     */
    public Set<String> ProductLine.findApplicableDeltas(Product prod) {

	assert prod != null;
	assert prod.getFeatures() != null;

        HashSet<String> deltaids = new HashSet<String>();

        for (DeltaClause clause : getDeltaClauses()) {
            if (clause.evaluateApplicationCondition(prod.getFeatures()))
                deltaids.add(clause.getDeltaspec().getDeltaID());
        }
        return deltaids;
    }

    /**************************************************************************
     * Evaluate both FROM and TO(WHEN) delta clauses to find the applicable delta names
     * relevant for dynamic product reconfiguration
     */
    public Set<String> ProductLine.findApplicableDeltas(ProductDecl fromProd, ProductDecl toProd) {

        HashSet<String> deltaids = new HashSet<String>();

        for (DeltaClause clause : getDeltaClauses()) {
            if (clause.evaluateFromApplicationCondition(fromProd.getProduct().getFeatures()))
                if (clause.evaluateApplicationCondition(toProd.getProduct().getFeatures()))
                    deltaids.add(clause.getDeltaspec().getDeltaID());
        }
        return deltaids;
    }

    /**************************************************************************
     * Evaluate the application condition assciated with this DeltaClause
     * in the context of the given list of features and attribute values
     *
     * TODO Support feature attributes
     */
    public boolean DeltaClause.evaluateApplicationCondition(List<Feature> onFeatures) {
        // first, log the names of all onFeatures in a set, for easy lookup
        HashSet<String> onFeatureIDs = new HashSet<String>();
        for (Feature f : onFeatures)
            onFeatureIDs.add(f.getName());

        if (hasAppCond())
            return getAppCond().evaluate(onFeatureIDs);
        else
            return true;
    }

    /**************************************************************************
     * Evaluate the "from" application condition assciated with this DeltaClause
     * in the context of the given list of features and attribute values
     *
     * "from" app conditions are only for dynamic product reconfiguration,
     * where a running product is re-configured into another product.
     *
     * TODO Support feature attributes
     */
    public boolean DeltaClause.evaluateFromApplicationCondition(List<Feature> onFeatures) {
        // first, log the names of all onFeatures in a set, for easy lookup
        HashSet<String> onFeatureIDs = new HashSet<String>();
        for (Feature f : onFeatures)
            onFeatureIDs.add(f.getName());

        if (hasFromAppCond())
            return getFromAppCond().evaluate(onFeatureIDs);
        else
            return false;
    }

    /**************************************************************************
     * Evaluate if the application condition holds for a given set of
     * selected feature names.
     */
    public abstract boolean AppCond.evaluate(Set<String> features);

    public boolean AppCondAnd.evaluate(Set<String> features) {
        return getLeft().evaluate(features) && getRight().evaluate(features);
    }
    public boolean AppCondOr.evaluate(Set<String> features) {
        return getLeft().evaluate(features) || getRight().evaluate(features);
    }
    public boolean AppCondNot.evaluate(Set<String> features) {
        return !getAppCond().evaluate(features);
    }
    public boolean AppCondFeature.evaluate(Set<String> features) {
        return (features.contains(getName()));
    }


    /**************************************************************************
     * Return sorted List of applicable Delta names
     * (according to a valid order of application defined by the product line)
     */
    public java.util.List<String> ProductLine.sortDeltas(Set<String> applicableDeltaIDs) {
        LinkedList<String> list = new LinkedList<String>(getValidOrderOfAllDeltas());
        list.retainAll(applicableDeltaIDs);
        return list;
    }

    /**************************************************************************
     * Obtain a valid delta application order that contains ALL deltas
     * (disregarding application conditions). This order is used to determine an
     * application order for individual products by removing the non-applicable deltas
     */
    syn lazy java.util.List<String> ProductLine.getValidOrderOfAllDeltas() {
        sortDeltas();
        return deltaSorter.getPreferredOrder();
    }

    /**************************************************************************
     * The Delta partition contains all possible orders in which the deltas can be applied
     */
    syn lazy java.util.List<Set<String>> ProductLine.getDeltaPartition() {

        sortDeltas();
        return deltaSorter.getPartition();
    }

    /**************************************************************************
     * The sorter object that computes a valid delta order
     * It is instantiated by sortDeltas().
     */
    private TopologicalSorting<String> ProductLine.deltaSorter = null;

    /**************************************************************************
     * Sort ALL deltas of the product line. This only has to be done once.
     * The result is used in multiple places:
     * - Type checking the product line
     * - Flattening for a certain product
     */
    private void ProductLine.sortDeltas() throws DeltaModellingException {
        if (deltaSorter == null)
            deltaSorter = new TopologicalSorting<String>(getAllDeltaIDs());
        else
            return; // assume already sorted

        // sort
        for (DeltaClause clause : getDeltaClauses()) {
            String deltaID = clause.getDeltaspec().getDeltaID();
            for (DeltaID id : clause.getAfterDeltaIDs()) {
                String afterID = id.getName();
                /* To prevent DeltaModellingException, before calling addEdge() we ensure:
                 *   1. deltaSorter is instantiated above with all available deltaIDs
                 *   2. PL is well formed by running wellFormedProductLine()
                 */
                deltaSorter.addEdge(afterID, deltaID);
            }
        }
        deltaSorter.sort();
    }

    public void Model.flattenTraitOnly(){
        applyTraits();
    }


    /**************************************************************************
     * Apply the traits
     */
    public void Model.applyTraits() throws DeltaModellingException {
        //Collect all traits
        LinkedList<TraitDecl> allTraitDecls = new LinkedList<>();
        for (Decl decl : getDecls()) {
            if (decl instanceof TraitDecl) {
                allTraitDecls.add((TraitDecl) decl);
            }
        }

        //init
        LinkedList<LinkedList<TraitDecl>> lists = new LinkedList<>();
        for (TraitDecl traitDecl : allTraitDecls) {
            LinkedList<TraitDecl> l = new LinkedList<>();
            l.add(traitDecl);
            collectInTrait(traitDecl.getTraitExpr(), l);
            lists.add(l);
        }

        //check for cyclic references
        sortBySize(lists);
        while (lists.size() > 0) {
            LinkedList<TraitDecl> l = lists.pop();
            if (l.size() > 1) {
                throw new DeltaModellingException("Cyclic Traits");
            }
            TraitDecl n = l.pop();
            for (LinkedList<TraitDecl> listOther : lists) {
                while (listOther.remove(n));
            }
            sortBySize(lists);
        }

        //apply
        boolean changed = false;
        do{
        changed = false;
            for (Decl decl : getDecls()) {
                if(decl instanceof ClassDecl){
                    ClassDecl cd = (ClassDecl)decl;


                    List<TraitUse> usesAST = cd.getTraitUses();
                    //this is necessary as the builtint list collects the TraitUses in the wrong order
                    LinkedList<TraitUse> uses = new LinkedList<>();
                    for (TraitUse traitUse : usesAST) {
                        uses.add(traitUse);
                    }
                    sortUses(uses);
                    for (TraitUse use : uses) {
                        use.applyTo(cd);
                        changed = true;
                    }
                }
            }
        } while(changed);
        flushTreeCache();
    }



    /**************************************************************************
     * Helper methods for trait application
     */
    private void Model.sortBySize(java.util.List<? extends java.util.List<?>> lists) {
        // TODO can be replaced by "lists.sort(Comparator.comparingInt(java.util.List::size));" with Java 8 syntax support
        lists.sort(new Comparator<java.util.List<?>>() {
            @Override
            public int compare(java.util.List<?> o1, java.util.List<?> o2) {
                return Integer.compare(o1.size(), o2.size());
            }
        });
    }

    private void Model.sortUses(LinkedList<TraitUse> list) {

      Collections.sort(list, new Comparator<TraitUse>() {
      @Override
      public int compare(TraitUse o1, TraitUse o2) {
          int line1 = o1.getStartLine();
          int row1 = o1.getStartColumn();
          int line2 = o2.getStartLine();
          int row2 = o2.getStartColumn();
          if((line1 < line2) || (line1 == line2 && row1 < row2))
              return -1;
          if((line2 < line1) || (line2 == line1 && row2 < row1))
              return 1;
          return 0;
       }
       });
  }


    private void Model.collectInTrait(ASTNode<?> traitExpr, java.util.List<TraitDecl> list) {
        if (traitExpr instanceof TraitNameExpr){
            TraitNameExpr nameExpr = (TraitNameExpr) traitExpr;
            list.add(nameExpr.getDecl(traitExpr.getModuleDecl()));
        } else if(traitExpr != null){
            for (ASTNode<ASTNode> child : traitExpr.astChildrenNoTransform()) {
                collectInTrait(child, list);
            }
        }
    }

    public void Model.flattenforLocalProducts() throws WrongProgramArgumentException,DeltaModellingException {
        ArrayList<Product> alreadyFlattened = new ArrayList<>();
        Set<ProductDecl> productDecls =  new HashSet<>(getProductDeclsFromExps());
        
        boolean gotNewDecls = true;
        while(gotNewDecls){
            evaluateAllProductDeclarations();
            for (ProductDecl prod : productDecls) {
                Product p = prod.getProduct();
                if (!p.featuresFromGlobalPL(getProductLine()) && ! alreadyFlattened.contains(p)) {
                   flattenModuleForProduct(prod, true);
                   alreadyFlattened.add(p);
                }
            }
            Set<ProductDecl> decls = new HashSet<>(getProductDeclsFromExps());
            if(!decls.isEmpty()) productDecls = decls;
            else gotNewDecls = false;
            
        }
         Set<ProductDecl> globalProductDecls = new HashSet<>(getProductDecls());
         for (ProductDecl prod : globalProductDecls) {
            if (!prod.getProduct().featuresFromGlobalPL(getProductLine())) {
                if (prod.getParent() instanceof List)
                    ((List<ProductDecl>)prod.getParent()).removeChild(prod);
            }
        }
        for (Product p : alreadyFlattened) {
           findModuleDeclForProduct(p).removeVariableDecls();
        }

        for (ModuleDecl mod : getModuleDecls()) {
            if (mod.hasProductLine()) {
                mod.removeProductLine();
                mod.removeRelativeAttr();
            }
        }
        flushTreeCache();
    }


    /**************************************************************************
     * Helper methods after delta applications
     */

     public void ModuleDecl.removeProductLine() {
       setProductLineOpt(new Opt());
     }

     public void ModuleDecl.removeProducts() {
        setLocalProductDeclList(new List());
     }

    public void ModuleDecl.removeVariableDecls() {
         List<Decl> decls = getDecls().copy();
         for (Decl decl : decls) {
            if (getVariableDecls().contains(decl.getName())){

            /* if ((decl instanceof ClassDecl && (((ClassDecl) decl).getBase() || ((ClassDecl) decl).getRelative()))  ||
                (decl instanceof InterfaceDecl && (((InterfaceDecl) decl).getBase() || ((InterfaceDecl) decl).getRelative()))) {*/
                //remove from exports
               for (Export e : getExports()) {
                    if (e instanceof NamedExport) {
                        for (Name name : ((NamedExport)e).getNames()) {
                            if (name.getName().equals(decl.getName()))
                                ((NamedExport)e).getNames().removeChild(name);
                        }
                    }
                }
                getDecls().removeChild(decl);
           } else {
               NamedExport export = new NamedExport();
               export.addNameNoTransform(new Name(decl.getName()));
               addExportNoTransform(export);
           }

        }
    }

    public void ModuleDecl.removeNotVariableDecls(String originalModule){
        List<Decl> decls = getDecls().copy();
        addImportNoTransform(new StarImport(originalModule));
        for (Decl decl : decls) {
            if (! decl.getAddedInLocalDelta() && ! getVariableDecls().contains(decl.getName())) {
                 //remove from exports
                 for (Export e : getExports()) {
                     if (e instanceof NamedExport) {
                         for (Name name : ((NamedExport)e).getNames()) {
                             if (name.getName().equals(decl.getName()))
                                 ((NamedExport)e).getNames().removeChild(name);
                             }
                     }
                 }
                 if (decl instanceof InterfaceDecl){
                     for (Decl d : getDecls()) {
                        if( d instanceof ClassDecl){
                            for (InterfaceTypeUse itu : ((ClassDecl)d).getImplementedInterfaceUseList()){
                              /*update the name of the interface with the name of the original module
                               *  when a class implements a non-base interface
                               */
                              if (itu.getName().equals(decl.getName())) {
                                  itu.setName(originalModule +"."+itu.getName());
                              }
                            }
                            if (((ClassDecl) d).hasInitBlock()) {
                             ((ClassDecl) d).getInitBlock().appendModuleName(originalModule, decl.getName());
                            }
                        for (FieldDecl field : ((ClassDecl)d).getFields()) {
                          if (field.getAccess() instanceof InterfaceTypeUse &&
                              ((InterfaceTypeUse) field.getAccess()).getName().equals(decl.getName()))
                              ((InterfaceTypeUse)field.getAccess()).setName(originalModule+"."+ decl.getName());
                          }
                        for (MethodImpl methodImpl : ((ClassDecl)d).getMethods()){
                          methodImpl.getMethodSig().appendModuleName(originalModule, decl.getName());
                          methodImpl.getBlock().appendModuleName(originalModule, decl.getName());
                        }
                         } else if (d instanceof InterfaceDecl && !d.getName().equals(decl.getName())) {
                            for (InterfaceTypeUse it : ((InterfaceDecl) d).getExtendedInterfaceUses()) {
                               if (it.getName().equals(decl.getName())) {
                                   it.setName(originalModule + "." + decl.getName());
                               }
                            }
                            for (MethodSig mS : ((InterfaceDecl) d).getBodyList()) {
                                mS.appendModuleName(originalModule, decl.getName());
                            }
                        }
                    }
                } else if (decl instanceof ClassDecl) {
                     for (Decl d : getDecls()) {
                         if (d instanceof ClassDecl && !d.equals(decl)) {
                             for (MethodImpl mI : ((ClassDecl) d).getMethods()) {
                                 for (Stmt s : mI.getBlock().getStmts()) {
                                     if (s instanceof VarDeclStmt) {
                                         VarDecl var = ((VarDeclStmt) s).getVarDecl();
                                         if (var.hasInitExp() && var.getInitExp() instanceof NewExp &&
                                            ((NewExp) var.getInitExp()).getClassName().equals(decl.getName()))
                                            ((NewExp) var.getInitExp()).setClassName(originalModule + "." + decl.getName());
                                     }
                                 }
                             }
                         }
                     }
                 }
                 getDecls().removeChild(decl);
                } else if (getVariableDecls().contains(decl.getName())) {
                    if (decl instanceof InterfaceDecl) {
                        ((InterfaceDecl) decl).setUnique(true);
                    } else if (decl instanceof ClassDecl) {
                        ((ClassDecl) decl).setUnique(true);
                    }
                }
        }
    }

    public void ModuleDecl.removeRelativeAttr() {
        for (Decl decl : getDecls()) {
            if (decl instanceof InterfaceDecl) {
                ((InterfaceDecl) decl).setUnique(true);

            } else if (decl instanceof ClassDecl) {
                ((ClassDecl) decl).setUnique(true);
           }
        }
    }
    public void ModuleDecl.addToExport() {
        NamedExport export = new NamedExport();
        for (Decl d : getDecls()){
            if (d.getAddedInLocalDelta())
                export.addNameNoTransform(new Name(d.getName()));
        }
        if (export.hasName()) {
            addExportNoTransform(export);
        }
    }

    syn lazy java.util.List<String> Model.getVariableDecls() {
        java.util.List<String> variableDecls = new java.util.ArrayList<>();
        for (ModuleDecl md : getModuleDecls()) {
            variableDecls.addAll(md.getVariableDecls());
        }
        return variableDecls;
    }

    java.util.Set<String> ModuleDecl.baseDecls = new java.util.HashSet<>();
    syn lazy java.util.Set<String> ModuleDecl.getBaseDecls() {
            return baseDecls;
    }

    syn lazy java.util.Set<String> ModuleDecl.getVariableDecls() {
        java.util.Set<String> variableDecls = new java.util.HashSet<>();
        for (Decl d : getDecls()) {
            if ( (d instanceof ClassDecl && !((ClassDecl) d).getUnique()) ||
                 (d instanceof InterfaceDecl && !((InterfaceDecl) d).getUnique())){
                variableDecls.add(d.getName());
            }
        }

         return variableDecls;
    }
    /**************************************************************************
     * Util methods
     */
    syn String Product.shortFeaturesName(String moduleName) {
        String ftsName = moduleName;
        String sub = "";
        boolean shorten = getFeatures().getNumChild() > 2;
        for (int i = 0; i < getNumFeature(); ++i) {
            sub = (shorten && getFeature(i).getName().length() > 3) ? getFeature(i).getName().substring(0,3) : getFeature(i).getName();
            ftsName = ftsName.concat("_" + sub);
        }

        return ftsName;
    }
    void ModuleDecl.addImportIfNotExists(String importModule) {
        boolean hasImport = false;
        for (Import imp : getImportList()) {
            if (imp instanceof StarImport && ((StarImport)imp).getModuleName().equals(importModule)) {
                hasImport = true;
                break;
            }
        }
        if (!hasImport)
            addImportNoTransform(new StarImport(importModule));
    }

    void Block.appendModuleName(String moduleName, String interfaceName) {
        for (Stmt s : getStmts()) {
            if (s instanceof VarDeclStmt && ((VarDeclStmt)s).getVarDecl().getAccess() instanceof InterfaceTypeUse){
                InterfaceTypeUse itu = (InterfaceTypeUse) ((VarDeclStmt)s).getVarDecl().getAccess();
                if (itu.getName().equals(interfaceName))
                    itu.setName(moduleName+"."+ interfaceName);
            }
        }
    }

    void MethodSig.appendModuleName(String moduleName, String interfaceName) {
        if (getReturnType() instanceof InterfaceTypeUse && ((InterfaceTypeUse) getReturnType()).getName().equals(interfaceName)) {
            ((InterfaceTypeUse) getReturnType()).setName(moduleName + "." + interfaceName);
        }
        for (ParamDecl p : getParamList()) {
         if (p.getAccess()  instanceof InterfaceTypeUse && ((InterfaceTypeUse) p.getAccess()).getName().equals(interfaceName)){
             ((InterfaceTypeUse) p.getAccess()).setName(moduleName + "." + interfaceName );
         }
        }
    }

}
