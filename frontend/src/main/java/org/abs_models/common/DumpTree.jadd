
// Added by Lei Mou:
// Using the same output format as the linux command "tree" to dump the ABS AST.

aspect DumpTree 
{
	protected void ASTNode.printInfo(PrintStream stream) {}

	public void ASTNode.dump(PrintStream stream) {
		dump(stream, 0, 0, false);
	}
	
	protected void ASTNode.dump(PrintStream stream, int pattern, int level, boolean last)
	{
		int flag = pattern;
		int bit = 0;
		String clsName = getClass().getName();
		
		// General idea:
		// In the printed version of the AST, each line is composed of level(number) prefixes.
		// I used the pth bit of integer pattern to record which prefix at position p should
		// be printed. (p starts from 0). There are four cases:
		//   a. "|   ": if the pth bit is one
		//   b. "    ": if the pth bit is zero
		//   c. "|-- ": if the current node is the not the last child of its parent.
		//   d. "`-- ": if the current node is the last child of its parent.
		
		for (int i=0; i<level; i++) {
			if (i == level - 1) {
				if (!last) {
					stream.print("|-- ");
				}
				else {
					stream.print("`-- ");
				}
			}
			else {
				bit = flag & 0x00000001;
				if (bit != 0)
					stream.print("|   ");
				else
					stream.print("    ");
				flag >>= 1;
			}
		}

		// The node information followed by the prefixes.
		stream.print(clsName + ":[");		
		printInfo(stream);
		stream.println("]");		


		// Update the pattern.
		// If the current node is the last child of this level, then all its children
		// should not print prefix "|   " on position level.
		
		flag = pattern;
		flag = flag | (0x00000001 << level);
		
		for (int i=0; i<getNumChild(); i++) {
			if (i == getNumChild() - 1) {
				flag = pattern;
                //				getChild(i).dump(flag, level+1, true);
                getChildNoTransform(i).dump(stream, flag, level+1, true);
			}
			else {
                //				getChild(i).dump(flag, level+1, false);
                getChildNoTransform(i).dump(stream, flag, level+1, false);
			}
		}
	}

    protected void VarOrFieldDecl.printInfo(PrintStream stream) 
    {
        stream.print(this.getName());
    }

    protected void TypedVarOrFieldDecl.printInfo(PrintStream stream)
    {
        stream.print(this.getName() + " : " + (this.getTypeUse()));
    }

    protected void TypeIdUse.printInfo(PrintStream stream)
    {
        stream.print(this.getName());
    }

    protected void DataTypeUse.printInfo(PrintStream stream)
    {
        stream.print(this.getName());
    }

    protected void VarOrFieldUse.printInfo(PrintStream stream)
    {
        stream.print(this.getName());
    }

    protected void DataConstructorExp.printInfo(PrintStream stream)
    {
        stream.print(this.getConstructor());
    }
    
    protected void DataConstructor.printInfo(PrintStream stream)
    {
        stream.print(this.getName());
    }

    protected void AssignStmt.printInfo(PrintStream stream)
    {
        //    stream.print(((VarOrFieldUse)this.getVar()).getName() + "=");
        stream.print((this.getVar()).getName());
    }

    protected void MethodSig.printInfo(PrintStream stream) 
    {
        stream.print(this.getName());
    }

    protected void InterfaceDecl.printInfo(PrintStream stream)
    {
        stream.print(this.getName());
    }

    protected void IntLiteral.printInfo(PrintStream stream)
    {
        stream.print(this.getContent());
    }

    protected void StringLiteral.printInfo(PrintStream stream)
    {
        stream.print(this.getContent());
    }

    protected void Decl.printInfo(PrintStream stream)
    {
        stream.print(this.getName());
    }

    protected void ModuleDecl.printInfo(PrintStream stream)
    {
        stream.print(this.getName());
    }

    protected void StarImport.printInfo(PrintStream stream)
    {
        stream.print(this.getModuleName());
    }

    protected void FromImport.printInfo(PrintStream stream) 
    {
        stream.print(this.getModuleName());
    }

    protected void StarExport.printInfo(PrintStream stream)
    {
        if (hasModuleName()) {
            stream.print(this.getModuleName().getName());
        }
    }

    protected void FromExport.printInfo(PrintStream stream)
    {
        stream.print(this.getModuleName());
    }
    
    protected void Call.printInfo(PrintStream stream)
    {
    	stream.print(this.getMethod());
    }
    
    protected void AddClassModifier.printInfo(PrintStream stream)
    {
    	stream.print(this.getClassDecl().getName());
    }
    protected void ModifyClassModifier.printInfo(PrintStream stream)
    {
    	stream.print(this.getName());
    }
    protected void RemoveClassModifier.printInfo(PrintStream stream)
    {
    	stream.print(this.getName());
    }
    protected void AddInterfaceModifier.printInfo(PrintStream stream)
    {
        stream.print(this.getInterfaceDecl().getName());
    }

   
    protected void AddFieldModifier.printInfo(PrintStream stream)
    {
    	stream.print(this.getFieldDecl());
    }
    protected void RemoveFieldModifier.printInfo(PrintStream stream)
    {
    	stream.print(this.getFieldDecl());
    }

}  
