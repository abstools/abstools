module BackendTest;

// The database was created as follows:
/*
CREATE TABLE IF NOT EXISTS test_table (
  int_value INTEGER,
  float_value REAL,
  string_value TEXT,
  bool_value BOOLEAN
);
INSERT INTO test_table(int_value, float_value, string_value, bool_value) VALUES(15, 13.53, "hello", 0);
INSERT INTO test_table(int_value, float_value, string_value, bool_value) VALUES(30, 42.5, "world", 1);
*/

data RowResult = RowResult(Int, Bool, Float, Rat, String);

def List<String> expected_strings() = list["hello", "world"];

def List<Rat> expected_rats() = list[];

def List<String> fstring() = builtin(sqlite3,
    "test.sqlite3",
    "SELECT string_value FROM test_table ORDER BY int_value");

def List<Rat> frat() = builtin(sqlite3,
    "test.sqlite3",
    "SELECT float_value FROM test_table ORDER BY int_value");

def List<RowResult> ftuple() = builtin(sqlite3,
    "test.sqlite3",
    `SELECT int_value, bool_value, float_value, float_value, string_value
     FROM test_table
     ORDER BY int_value`);

{
    Bool testresult = True;
    println("Starting SQLite3 test");
    foreach (v, i in fstring()) {
        println(`$i$'th string value is $v$`);
        testresult = testresult && when i == 0 then v == "hello" else v == "world";
    }
    foreach (v, i in frat()) {
        println(`$i$'th rational value is $v$`);
        testresult = testresult && when i == 0 then v == 1353/100 else v == 85/2;
    }
    foreach (v, i in ftuple()) {
        println(`$i$'th tuple is $v$`);
        testresult = testresult &&
            when i == 0 then v == RowResult(15,False,13.53,1353/100,"hello")
            else v == RowResult(30,True,42.5,85/2,"world");
    }
}
