import java.util.Map;
import java.util.Set;

aspect ProductConstraints {

    public void Product.getProdConstraints(Map<String,IntegerVariable> vars, Set<Constraint> newcs) {
        for (Feature f: getFeatures()) {
            newcs.add(ChocoSolver.isTrue(vars.get(f.getName())));
            for (AttrAssignment aa: f.getAttrAssignments()) {
                String fname = f.getName() + "." + aa.getName();
                if (vars.containsKey(fname))
                    newcs.add(ChocoSolver.eqeq(vars.get(fname), aa.getValue().getIntValue().intValue()));
            }
        }
    }

    public void Model.getDiffConstraints(Product p, Map<String,IntegerVariable> vars, Set<Constraint> newcs, String diffVar) {
        //calculating deselected features, initially initialized by all features
        ArrayList<String> deselectedFeatures = new ArrayList();
        for (String fname: features()) {
            deselectedFeatures.add(fname);
        }

        //removing the selected features to get deselected features
        //
        IntegerExpressionVariable v = Choco.ZERO;
        for (Feature f: p.getFeatures()) {
            v = Choco.plus(v, Choco.abs(Choco.minus(vars.get(f.getName()), 1)));
            for (String fname: deselectedFeatures) {
                if(f.getName().equalsIgnoreCase(fname)) {
                    deselectedFeatures.remove(fname);
                    break;
                }
            }
        }

        for(String fname: deselectedFeatures){
            v = Choco.plus(v, vars.get(fname));
        }
        newcs.add(ChocoSolver.eqeq(vars.get(diffVar),v));
    }

    public boolean Model.getMaxConstraints(Map<String,IntegerVariable> vars, Set<Constraint> newcs, String maxVar) {
        IntegerExpressionVariable v = Choco.ZERO;
        for(String fname: features()){
            if (vars.containsKey(fname))
                v = Choco.plus(v, vars.get(fname));
        }

        newcs.add(ChocoSolver.eqeq(vars.get(maxVar),v));
        return true;
    }

}
