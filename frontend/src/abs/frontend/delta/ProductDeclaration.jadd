aspect ProductDeclaration {

    public void Model.evaluateAllProductDeclarations() {
        Set<Product> productsToEvaluate = new HashSet<Product>();
        for (CompilationUnit u : getCompilationUnits()) {
            for (ProductDecl p : u.getProductDecls()) {
                Product prod = new Product(p.getName(), new List<Feature>(), new List<Reconfiguration>());
                productsToEvaluate.add(prod);
            }
        }

        TopologicalSorting productSorter = new TopologicalSorting<Product>(productsToEvaluate);
        for (CompilationUnit u : getCompilationUnits()) {
            for (ProductDecl p : u.getProductDecls()) {
                ProductExpr productExpr = p.getProductExpr();
                Product high = new Product(p.getName(), new List<Feature>(), new List<Reconfiguration>());

                Set<String> allProductName = new HashSet<String>();
                productExpr.setAllProductName(allProductName);
                for(String productName : allProductName){
                    Product low = new Product(productName, new List<Feature>(), new List<Reconfiguration>());                        
                    productSorter.addEdge(high, low);
                }                    
            }
        }        
        productSorter.sort();
        java.util.List<Product> sortedList = productSorter.getAnOrder();
        
        java.util.List<Product> evaluatedProduct = new ArrayList<Product>();
        for (Product p : sortedList) {
            String name = p.getName();
            
            for (CompilationUnit u : getCompilationUnits()) {
                for (ProductDecl p : u.getProductDecls()) {
                    if(p.getName().equals(name)) {
                        if(p instanceof Product) {
                            evaluatedProduct.add(p);
                        }
                        else if(p instanceof ProductExpr){
                            Set<String> features = ((ProductExpr) p).evaluate();

                            Product product = new Product(p.getName(), new List<Feature>());
                            for(String featureName : features){
                                product.addFeature(new Feature(featureName, new List<AttrAssignment>()));
                            }
                            evaluatedProduct.add(product);
                        }
                    }
                }
            }
        }
    }

    public abstract void ProductExpr.setAllProductName(Set<String> allProductName);
    
    public void ProductFeatureSet.setAllProductName(Set<String> allProductName){
        return;
    }
    
    public void ProductIntersect.setAllProductName(Set<String> allProductName){
        allProductName.add(getLeft().getName());
        allProductName.add(getRight().getName());
    }
    
    public void ProductUnion.setAllProductName(Set<String> allProductName){
        allProductName.add(getLeft().getName());
        allProductName.add(getRight().getName());
    }
    
    public void ProductName.setAllProductName(Set<String> allProductName){
        allProductName.add(getName());
    }    
    
    public abstract Set<String> ProductExpr.evaluate();

    public Set<String> ProductFeatureSet.evaluate() {
        List<Feature> features = getFeatures();

        Set<String> setFeatures = new HashSet<String>();
        for (Feature f : features)
            setFeatures.add(f.getName());

        return setFeatures;
    }

    public Set<String> ProductIntersect.evaluate(){
        Set<String> left = getLeft().evaluate();
        Set<String> right = getRight().evaluate();
        left.retainAll(right);

        return left;
    }

    public Set<String> ProductUnion.evaluate(){
        Set<String> left = getLeft().evaluate();
        Set<String> right = getRight().evaluate();
        left.addAll(right);

        return left;
    }

    public Set<String> ProductName.evaluate() {
        try{
            Product p = getModel().findProduct(getName());

            List<Feature> features = p.getFeatures();

            Set<String> setFeatures = new HashSet<String>();
            for (Feature f : features)
                setFeatures.add(f.getName());

            return setFeatures;
        }
        catch(WrongProgramArgumentException e){
            e.printStackTrace();
        }

        return null;
    }

}