import java.util.Collection;
import java.util.Map;
import java.util.HashMap;
import abs.frontend.delta.*;

aspect OriginalCallResolver {

    /* Walk list of deltas in order of application and resolve original() calls.
     * Original calls in delta are resolved by finding the original method 
     * declaration in the list of previously applied deltas + core,
     * copying it, and calling it instead of original().
     */
    public static void Model.resolveOriginalCalls(Collection<DeltaDecl> deltas) throws DeltaModellingException {
        ArrayList<DeltaDecl> prevdeltas = new ArrayList<DeltaDecl>();
        
        for (DeltaDecl delta : deltas) {
            delta.resolveOriginalCalls(prevdeltas);
            prevdeltas.add(0, delta);
        }
    }

    /* Resolve original() calls in current delta.
     * Calling original() only seems to make sense in a delta that modifies
     * an existing class by modifying a method in that class, so we only 
     * deal with this case.
     */
    protected void DeltaDecl.resolveOriginalCalls(
            Collection<DeltaDecl> deltas) throws DeltaModellingException {

        //System.out.println("*** Processing original calls in delta: " + this.qualifiedName());
        for (ModuleModifier cm : getModuleModifiers()) {
           if (cm instanceof ModifyClassModifier)
               for (Modifier m : ((ModifyClassModifier)cm).getModifiers())
                   if (m instanceof ModifyMethodModifier)
                       ((ModifyMethodModifier)m).resolveOriginalCalls(deltas);
        }
    }
    
    
    /* This field is used to cache the names of original MethodImpls that have been copied,
     * so we don't need to copy them multiple times (which can result in type errors)
     */
    private Set<String> Model.originalMethodsCache = new HashSet<String>();
    public void Model.cacheOriginalMethod(String id) {
        originalMethodsCache.add(id);
    }
    public boolean Model.containsCachedOriginalMethod(String id) {
        return originalMethodsCache.contains(id);
    }
    
    /*
     * resolve OriginalCalls within the body of the method defined
     * inside this ModifyMethodModifier
     */
    protected void ModifyMethodModifier.resolveOriginalCalls(
            Collection<DeltaDecl> deltas) throws DeltaModellingException {
        
        for (Stmt stmt : getMethodImpl().getBlock().getStmts())
            stmt.resolveOriginalCalls(this, deltas);
    }
    
    /* 
     * traverse AST in search of OriginalCalls
     */
    protected void ASTNode.resolveOriginalCalls(
            ModifyMethodModifier mod, 
            Collection<DeltaDecl> deltas) throws DeltaModellingException {
        
        for(int i = 0; i < getNumChild(); i++) {
            getChildNoTransform(i).resolveOriginalCalls(mod, deltas);
        }
    }

    /* Replace this original call with a newly constructed call to 
     * the copy of the original method implementation.
     * 
     * An OriginalCall inside a delta is replaced by a normal SyncCall that points to the original method.
     * This original version of the method needs to be added to the class under a unique name.
     * This is done by constructing a new ModifyClassModifier that contains an AddMethodModifier 
     * that contains the method implementation. This generated ModifyClassModifier is added to the delta, 
     * so that it will be applied later during the regular Modifier application process.
     */
    public void OriginalCall.resolveOriginalCalls(
            ModifyMethodModifier mod, 
            Collection<DeltaDecl> deltas) throws DeltaModellingException {
        
        // found OriginalCall
        //System.out.println("*** found: " + this);
        
        // find and copy original method matching this OriginalCall
        MethodImpl originalMethodCopy = mod.findOriginalMethod(this, deltas);
        
        // Add the copied method to the delta in which this OriginalCall occurred
        // - omit if the method is already cached
        String methodId = mod.targetClassName() + "." + originalMethodCopy.getMethodSig().getName();
        if (! mod.getModel().containsCachedOriginalMethod(methodId)) {
            ModifyClassModifier cm = new ModifyClassModifier();
            cm.setName(mod.targetQualifiedClassName());
            cm.addModifier(new AddMethodModifier(originalMethodCopy));
            mod.getDelta().addModuleModifier(cm);
            mod.getModel().cacheOriginalMethod(methodId);
            //System.out.println("*** copied original method to delta " + mod.getDelta().getName() + " as " + originalMethodCopy.getMethodSig().getName());
        } else {
            //System.out.println("*** original method already cached as " + methodId);
        }
        
        // replace OriginalCall with a normal call to the copied method
        EffExp call = new SyncCall(new ThisExp(), originalMethodCopy.getMethodSig().getName(), this.getParams().treeCopyNoTransform());
        // set line and column from OriginalCall node
        call.setPosition(getStart(), getEnd());
        ASTNode parent = getParent();
        int i = parent.getIndexOfChild(this);
        parent.setChild(call, i);
        //System.out.println("*** replaced " + this + " with call to: " + originalMethodCopy.getMethodSig() + "\n");
    }
    
    /* Given an OriginalCall (targeted or untargeted), find original method.
     * 
     */
    protected MethodImpl ModifyMethodModifier.findOriginalMethod(
            OriginalCall oc, 
            Collection<DeltaDecl> deltas) throws DeltaModellingException {

        String classid = targetQualifiedClassName();
        MethodSig method = getMethodImpl().getMethodSig();
        String methodid = getMethodImpl().getMethodSig().getName();
        MethodImpl originalMethodCopy;
        
        if (oc instanceof TargetedOriginalCall) {
            String targetDeltaID = ((TargetedOriginalCall) oc).getTarget().getName();

            if ("core".equals(targetDeltaID)) {
                originalMethodCopy = findOriginalInCore(method, classid);
                return originalMethodCopy;
            } else {
                for (DeltaDecl delta : deltas) {
                    if (delta.getName().equals(targetDeltaID)) {
                        originalMethodCopy = findOriginalInDelta(method, classid, delta);
                        return originalMethodCopy;
                    }
                }
                throw new DeltaModellingException(getDelta(),"Delta " + targetDeltaID 
                        + " is target of an original call, but has not yet been applied");
            }
            
        } else {
            // untargeted OriginalCall
            originalMethodCopy = findOriginalInAppliedDeltasAndCore(method, classid, deltas);
            return originalMethodCopy;
        }
    }

    
    /* 
     * Given a method's name and class,
     * find original method implementation by searching in the applied deltas and, finally, in the core.
     * This is for untargeted original calls; for targeted OCs, we call findOriginalInDelta/findOriginalInCore directly.
     */
    private MethodImpl ModifyMethodModifier.findOriginalInAppliedDeltasAndCore(            
            MethodSig method,
            String classid, 
            Collection<DeltaDecl> deltas) throws DeltaModellingException {

        //System.out.println("*** searching for method " + classid + "." + method.getName());
        
        // search in list of applied deltas
        for (DeltaDecl delta : deltas) {
            try {
                return findOriginalInDelta(method, classid, delta);
            } catch(DeltaModellingException e) {
                // continue search in next delta, then core
                continue;
            }
        }
        
        // search in core classes
        try {
            return findOriginalInCore(method, classid);
        } catch (DeltaModellingException e) {
            // give up
            throw new DeltaModellingException(getDelta(), ": Could not find original implementation of method " + classid 
                    + "." + method.getName());
        }
    }
    
    /* In given delta:
     * return first MethodImpl that matches classid and methodid
     */
    private MethodImpl ModifyMethodModifier.findOriginalInDelta(            
            MethodSig methodSig,
            String classid, 
            DeltaDecl delta) throws DeltaModellingException {
        
        //System.out.println("*** searching in delta " + delta.getName());
        String methodid = methodSig.getName();
        for (ModuleModifier cm : delta.getModuleModifiers()) {
            if (cm.getName().equals(classid)) {
                if (cm instanceof ModifyClassModifier) {
                    for (Modifier m : ((ModifyClassModifier)cm).getModifiers()) {
                        if (m instanceof AddMethodModifier) {
                            MethodImpl method = ((AddMethodModifier)m).getMethodImpl();
                            if (method.getMethodSig().getName().equals(methodid))
                                return copyMethod(method, delta.getName());
                        } else if (m instanceof ModifyMethodModifier) {
                            MethodImpl method = ((ModifyMethodModifier)m).getMethodImpl();
                            if (method.getMethodSig().getName().equals(methodid))
                                return copyMethod(method, delta.getName());
                        } else if (m instanceof RemoveMethodModifier) {
                            if (((RemoveMethodModifier)m).getMethodSig().getName().equals(methodid))
                                throw new DeltaModellingException(getDelta(),": Could not find original implementation of method " + classid + "." + methodid
                                        + " -- it was removed by delta " + delta.getName());
                        }
                    }
                } else if (cm instanceof AddClassModifier) {
                    for (MethodImpl method : ((AddClassModifier)cm).getClassDecl().getMethods())
                        if (method.getMethodSig().getName().equals(methodid))
                            return copyMethod(method, delta.getName());
                } else if (cm instanceof RemoveClassModifier) {
                    throw new DeltaModellingException(getDelta(), ": Could not find original implementation of method " + classid + "." + methodid
                            + " -- it was removed by delta " + delta.getName());
                }
            }
        }
        // not found
        throw new DeltaModellingException(getDelta(), ": Could not find original implementation of method " + classid + "." + methodid
                + " in delta " + delta.getName());
    }

    /* In core:
     * find first MethodImpl that matches classid and methodid
     * return a copy with changed name
     */
    private MethodImpl ModifyMethodModifier.findOriginalInCore(
            MethodSig method,
            String classid) throws DeltaModellingException {
        Decl coreClass = getDelta().getModel().lookup(new KindedName(Kind.CLASS, classid));
        if (!coreClass.isUnknown()) {
            MethodImpl coreMethod = ((ClassDecl) coreClass).lookupMethod(method.getName());
            if (coreMethod != null)
                return copyMethod(coreMethod, "core");
        }
        // not found
        throw new DeltaModellingException(getDelta(), ": Could not find original implementation of method " + classid + "." + method.getName()
                + " in the core.");
    }
    
    /* Return a copy of given MethodImpl (changed name)
     * 
     * FIXME 
     * We're leaving out the randomness in the name for now, since we need to find an original method by delta-name
     * This breaks potential multiple application of the same delta
     * 
     * String uid = Integer.toHexString(UUID.randomUUID().hashCode());
     * String methodCopyID = method.getMethodSig().getName() + "_Orig" + uid;
     */
    public MethodImpl ModifyMethodModifier.copyMethod(MethodImpl method, String nameSuffix) {
        MethodImpl methodCopy = method.treeCopyNoTransform();
        methodCopy.getMethodSig().setName(method.getMethodSig().getName() + "$ORIGIN_" + nameSuffix); 
        return methodCopy;
    }
    

}
