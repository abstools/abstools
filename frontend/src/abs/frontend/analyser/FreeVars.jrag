import java.util.Collections;
import java.util.Set;

aspect VarUsage {

	syn lazy Set<String> Exp.getFreeVars();

	eq Exp.getFreeVars() = Collections.emptySet();

	eq VarOrFieldUse.getFreeVars() = Collections.singleton(getName());

	eq Binary.getFreeVars() {
		HashSet<String> res = new HashSet<String>();
		res.addAll(getLeft().getFreeVars());
		res.addAll(getRight().getFreeVars());
		return res;
	}

	eq Unary.getFreeVars() {
		HashSet<String> res = new HashSet<String>();
		res.addAll(getOperand().getFreeVars());
		return res;
	}

	eq LetExp.getFreeVars() {
		HashSet<String> res = new HashSet<String>();
		res.addAll(getExp().getFreeVars());
		res.remove(getVar().getName());
		res.addAll(getVal().getFreeVars());
		return res;
	}

    eq IfExp.getFreeVars() {
        HashSet<String> res = new HashSet<String>();
        res.addAll(getCondExp().getFreeVars());
        res.addAll(getThenExp().getFreeVars());
        res.addAll(getElseExp().getFreeVars());
        return res;
    }

	eq CaseExp.getFreeVars() {
		HashSet<String> res = new HashSet<String>();
		res.addAll(getExpr().getFreeVars());
		for (CaseBranch b : getBranchs()) {
		   res.addAll(b.getFreeVars());
		}
		return res;
	}

	eq FnApp.getFreeVars() {
		HashSet<String> res = new HashSet<String>();
		for (PureExp e : getParams()) {
		   res.addAll(e.getFreeVars());
		}
		return res;
	}

	eq ParFnApp.getFreeVars() {
	    Set<String> res = new HashSet<String>();
	    for (PureExp e : getParams()) {
	        res.addAll(e.getFreeVars());
	    }

	    for (ParFnAppParam param : getFuncParams()) {
	        if (param instanceof AnonymousFunctionDecl) {
	            AnonymousFunctionDecl anon = (AnonymousFunctionDecl) param;
	            res.addAll(anon.getFreeVarNames());
	        }
	    }
	    return res;
	}

	eq DataConstructorExp.getFreeVars() {
		HashSet<String> res = new HashSet<String>();
		for (PureExp e : getParams()) {
		   res.addAll(e.getFreeVars());
		}
		return res;
	}

	eq Call.getFreeVars() {
		HashSet<String> res = new HashSet<String>();
		res.addAll(getCallee().getFreeVars());
		for (PureExp e : getParams()) {
		   res.addAll(e.getFreeVars());
		}
		return res;
	}

	eq NewExp.getFreeVars() {
		HashSet<String> res = new HashSet<String>();
		for (PureExp e : getParams()) {
		   res.addAll(e.getFreeVars());
		}
		return res;
	}

	eq GetExp.getFreeVars() {
		HashSet<String> res = new HashSet<String>();
        res.addAll(getPureExp().getFreeVars());
		return res;
	}

	syn lazy Collection<String> CaseBranch.getFreeVars() {
		HashSet<String> res = new HashSet<String>();
		res.addAll(getLeft().getFreeVars());

		res.addAll(getRight().getFreeVars());
		for (PatternVar v : getLeft().getFreePatternVars()) {
			res.remove(v.getVar().getName());
		}
		return res;
	}

	syn lazy Collection<String> Pattern.getFreeVars();

	eq Pattern.getFreeVars() = Collections.emptySet();

	eq PatternVarUse.getFreeVars() = Collections.singleton(getName());

	eq ConstructorPattern.getFreeVars() {
		HashSet<String> res = new HashSet<String>(1);
		for (Pattern p : getParams()) {
			res.addAll(p.getFreeVars());
		}
		return res;
	}
}
