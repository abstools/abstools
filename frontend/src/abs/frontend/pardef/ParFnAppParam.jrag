import abs.frontend.pardef.*;

aspect ParFnAppParam {
    syn PureExp ParFnAppParamDecl.getExpression(FnApp toReplace);

    eq NamedParFnAppParam.getExpression(FnApp toReplace) = new FnApp(getName(), toReplace.getParams().treeCopyNoTransform());
    eq AnonymousFunctionDecl.getExpression(FnApp toReplace) {
        PureExp result = getPureExpNoTransform().treeCopyNoTransform();

        int numParam = getNumParam();
        if (numParam != toReplace.getNumParam()) {
            throw new PardefModellingException(toReplace, ErrorMessage.WRONG_NUMBER_OF_ARGS, numParam, toReplace.getNumParam());
        }

        // Wrap the expression by let expressions for each parameter
        // TODO note: this obviously has some flaws, but works for a start (should be fixed alongside the introduction of closures)
        for (int i = 0; i < numParam; ++i) {
            result = new LetExp(
                getParamNoTransform(i).treeCopyNoTransform(),
                toReplace.getParamNoTransform(i).treeCopyNoTransform(),
                result
            );
        }

        return result;
    }
}