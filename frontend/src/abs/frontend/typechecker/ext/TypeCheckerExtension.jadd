import abs.frontend.ast.*;
import abs.frontend.typechecker.ext.*;
import java.util.Set;
import java.util.Map;
import java.util.HashSet;

aspect TypeCheckerExtension {
    private TypeExtensionHelper Model.typeCheckerExtension = new TypeExtensionHelper();
    

    public void Model.registerTypeSystemExtension(TypeSystemExtension tse) {
        typeCheckerExtension.register(tse);
    }
    
    public TypeExtensionHelper Model.getTypeExt() {
        return typeCheckerExtension;
    }
    
/*    
    refine Typing eq FunctionDecl.getType() {
        Type t = Typing.FunctionDecl.getType();
        getModel().getTypeExt().annotateType(t, this, getTypeUse());
        return t;
    }
        
    refine Typing eq TypedVarOrFieldDecl.getType() {
        Type t = Typing.TypedVarOrFieldDecl.getType();
        getModel().getTypeExt().annotateType(t, this, getAccess());
        return t; 
    }
    
    refine Typing eq MethodSig.getType() {
        Type t = Typing.MethodSig.getType();
        getModel().getTypeExt().annotateType(t, this, getReturnType());
        return t;
    }
*/    
    
//    refine Typing eq ParametricDataTypeUse.getType() {
//        Type t = Typing.ParametricDataTypeUse.getType().treeCopyNoTransform();        
//        getModel().getTypeExt().annotateType(t, this, this);
//        return t;
//    }

    refine Typing eq TypeUse.getType() {
        Type t = refined();        
        getModel().getTypeExt().annotateType(t, this, this);
        return t;
    }
    
    refine Typing eq DataConstructor.getType() {
        Type t = Typing.DataConstructor.getType();        
        for (ConstructorArg du : getConstructorArgs()) {
            getModel().getTypeExt().annotateType(du.getType(),du,du);
        }
//        getModel().getTypeExt().annotateType(t, this, this);
        return t;
    }
    
    refine Typing eq NullExp.getType() {
        Type t = Typing.NullExp.getType().fullCopy();
        getModel().getTypeExt().annotateType(t, this);
        return t;
    }
    
    refine Typing eq ThisExp.getType() {
        Type t = Typing.ThisExp.getType().fullCopy();
        getModel().getTypeExt().annotateType(t, this);
        return t;
    }
    
    refine Typing eq NewExp.getType() {
        Type t = Typing.NewExp.getType().fullCopy();
        getModel().getTypeExt().annotateType(t, this);
        return t;
    }

    /*
    refine Typing eq DataConstructorExp.getType() {
        Type t = Typing.DataConstructorExp.getType();
        if (t != null) {
            t = t.treeCopyNoTransform();
        }
        return t;
    }
    */
    
    refine Typing eq SyncCall.getType() {
        Type t = Typing.SyncCall.getType().fullCopy();
        getModel().getTypeExt().annotateType(t, this);
        return t;
    }

    refine Typing eq AsyncCall.getType() {
        Type t = Typing.AsyncCall.getType().fullCopy();
        getModel().getTypeExt().annotateType(t, this);
        return t;
    }

    refine Typing eq IfExp.getType() {
        Type t = Typing.IfExp.getType().fullCopy();
        getModel().getTypeExt().annotateType(t, this);
        return t;
    }
    
    refine Typing eq CaseExp.getType() {
        Type t = Typing.CaseExp.getType().fullCopy();
        getModel().getTypeExt().annotateType(t, this);
        return t;
    }

    
    // STATEMENTS

    refine TypeChecker public void Stmt.typeCheck(SemanticConditionList s) {
        int size = s.getErrorCount();
        TypeChecker.Stmt.typeCheck(s);
        if (s.getErrorCount() > size) return;
        getModel().getTypeExt().checkStmt(this);
    }
    
    refine TypeChecker public void AssertStmt.typeCheck(SemanticConditionList s) {
        int size = s.getErrorCount();
        TypeChecker.AssertStmt.typeCheck(s);
        if (s.getErrorCount() > size) return;
        getModel().getTypeExt().checkAssertStmt(this);
    }

    
    refine TypeChecker public void AssignStmt.typeCheck(SemanticConditionList s) {
        int size = s.getErrorCount();
        TypeChecker.AssignStmt.typeCheck(s);
        if (s.getErrorCount() > size) return;
        getModel().getTypeExt().checkAssignStmt(this);
    }
    
    refine TypeChecker public void AwaitStmt.typeCheck(SemanticConditionList s) {
        int size = s.getErrorCount();
        TypeChecker.AwaitStmt.typeCheck(s);
        if (s.getErrorCount() > size) return;
        getModel().getTypeExt().checkAwaitStmt(this);
    }

   
    refine TypeChecker public void Block.typeCheck(SemanticConditionList s) {
        int size = s.getErrorCount();
        TypeChecker.Block.typeCheck(s);
        if (s.getErrorCount() > size) return;
        getModel().getTypeExt().checkBlock(this);
    }
    
    refine TypeChecker public void ExpressionStmt.typeCheck(SemanticConditionList s) {
        int size = s.getErrorCount();
        TypeChecker.ExpressionStmt.typeCheck(s);
        if (s.getErrorCount() > size) return;
        getModel().getTypeExt().checkExpressionStmt(this);
    }
    
    refine TypeChecker public void IfStmt.typeCheck(SemanticConditionList s) {
        int size = s.getErrorCount();
        TypeChecker.IfStmt.typeCheck(s);
        if (s.getErrorCount() > size) return;
        getModel().getTypeExt().checkIfStmt(this);
    }

    refine TypeChecker public void ReturnStmt.typeCheck(SemanticConditionList s) {
        int size = s.getErrorCount();
        TypeChecker.ReturnStmt.typeCheck(s);
        if (s.getErrorCount() > size) return;
        getModel().getTypeExt().checkReturnStmt(this);
    }
    
    refine TypeChecker public void SuspendStmt.typeCheck(SemanticConditionList s) {
        int size = s.getErrorCount();
        TypeChecker.SuspendStmt.typeCheck(s);
        if (s.getErrorCount() > size) return;
        getModel().getTypeExt().checkSuspendStmt(this);
    }

    refine TypeChecker public void VarDeclStmt.typeCheck(SemanticConditionList s) {
        int size = s.getErrorCount();
        TypeChecker.VarDeclStmt.typeCheck(s);
        if (s.getErrorCount() > size) return;
        getModel().getTypeExt().checkVarDeclStmt(this);
    }
    
    refine TypeChecker public void WhileStmt.typeCheck(SemanticConditionList s) {
        int size = s.getErrorCount();
        TypeChecker.WhileStmt.typeCheck(s);
        if (s.getErrorCount() > size) return;
        getModel().getTypeExt().checkWhileStmt(this);
    }

    
    // EXPRESSIONS
    
    refine TypeChecker public void NewExp.typeCheck(SemanticConditionList s) {
        int size = s.getErrorCount();
        TypeChecker.NewExp.typeCheck(s);
        if (s.getErrorCount() > size) return;
        getModel().getTypeExt().checkNewExp(this);
    }
    
    refine TypeChecker public void Call.typeCheck(SemanticConditionList s) {
        int size = s.getErrorCount();
        TypeChecker.Call.typeCheck(s);
        if (s.getErrorCount() > size) return;
        getModel().getTypeExt().checkMethodCall(this);
        if (getMethodSig() != null) {
           getModel().getTypeExt().checkAssignable(getCallee().getType(),getMethodSig(),this);
        }
    }
    
    refine TypeChecker public void FnApp.typeCheck(SemanticConditionList s) {
        int size = s.getErrorCount();
        TypeChecker.FnApp.typeCheck(s);
        if (s.getErrorCount() > size) return;
        getModel().getTypeExt().checkFnApp(this);
    }
    

    refine TypeChecker public void GetExp.typeCheck(SemanticConditionList s) {
        int size = s.getErrorCount();
        TypeChecker.GetExp.typeCheck(s);
        if (s.getErrorCount() > size) return;
        getModel().getTypeExt().checkGetExp(this);
    }
    
    refine TypeChecker public void ClassDecl.typeCheck(SemanticConditionList s) {
        int size = s.getErrorCount();
        TypeChecker.ClassDecl.typeCheck(s);
        if (s.getErrorCount() > size) return;

        HashMap<String, MethodSig> sigs = new HashMap<String, MethodSig>();
        addAllMethodSigs(sigs,s);  

        HashMap<String, MethodImpl> methodImpls = new HashMap<String, MethodImpl>(); 

        for (MethodImpl m : getMethods()) {
            String name = m.getMethodSig().getName();
            if (sigs.containsKey(name)) {
                MethodSig sig = sigs.get(name);
                MethodSig ms = m.getMethodSig();
                getModel().getTypeExt().checkOverride(ms,sig);
            }
        }
        getModel().getTypeExt().checkClassDecl(this);
    }

    refine TypeChecker public void InterfaceDecl.typeCheck(SemanticConditionList s) {
        int size = s.getErrorCount();
        TypeChecker.InterfaceDecl.typeCheck(s);
        if (s.getErrorCount() > size) return;
        getModel().getTypeExt().checkInterfaceDecl(this);
    }

    refine TypeChecker public void FunctionDecl.typeCheck(SemanticConditionList s) {
        int size = s.getErrorCount();
        TypeChecker.FunctionDecl.typeCheck(s);
        if (s.getErrorCount() > size) return;
        
        if (getFunctionDef() instanceof ExpFunctionDef) {
            // built-in functions are assumed type-correct.
            ExpFunctionDef def = (ExpFunctionDef)getFunctionDef();
            def.getRhs().typeCheck(s);
            getModel().getTypeExt().checkAssignable(def.getRhs().getType(), getType(), this);
        }
    }
    
    refine TypeChecker public void MethodImpl.typeCheck(SemanticConditionList s) {
        int size = s.getErrorCount();
        TypeChecker.MethodImpl.typeCheck(s);
        if (s.getErrorCount() > size) return;
        getModel().getTypeExt().checkMethodImpl(this);
    }

    refine TypeChecker public void DataConstructor.typeCheck(SemanticConditionList s) {
        int size = s.getErrorCount();
        TypeChecker.DataConstructor.typeCheck(s);
        if (s.getErrorCount() > size) return;
        // to guarantee type annotation:
        getType();
    }
    
    
    refine TypeChecker public void VarDecl.typeCheck(SemanticConditionList s) {
        int size = s.getErrorCount();
        TypeChecker.VarDecl.typeCheck(s);
        if (s.getErrorCount() > size) return;

        if (hasInitExp()) {
            getModel().getTypeExt().checkAssignable(getInitExp().getType(), getType(), this);
        }
    }

    refine TypeChecker public void FieldDecl.typeCheck(SemanticConditionList s) {
        int size = s.getErrorCount();
        TypeChecker.FieldDecl.typeCheck(s);
        if (s.getErrorCount() > size) return;

        if (hasInitExp()) {
            getModel().getTypeExt().checkAssignable(getInitExp().getType(), getType(), this);
        }
 
     }
    
    refine TypeChecker public void IfExp.typeCheck(SemanticConditionList e) {  
        int size = e.getErrorCount();
        TypeChecker.IfExp.typeCheck(e);
        if (e.getErrorCount() > size) return;

        getModel().getTypeExt().checkIfExp(this);
   } 

    refine TypeChecker public void CaseExp.typeCheck(SemanticConditionList e) {  
         int size = e.getErrorCount();
         TypeChecker.CaseExp.typeCheck(e);
         if (e.getErrorCount() > size) return;

         getModel().getTypeExt().checkCaseExp(this);
    } 

     
     refine TypeChecker public void DataConstructorExp.typeCheck(SemanticConditionList s) {
         int size = s.getErrorCount();
        TypeChecker.DataConstructorExp.typeCheck(s);
        if (s.getErrorCount() > size) return;

        getModel().getTypeExt().checkDataConstructorExp(this);
   }
     
     refine TypeChecker public void Model.typeCheck(SemanticConditionList s) {
         getTypeExt().typeCheckStarted(this,s);
         TypeChecker.Model.typeCheck(s);
         getTypeExt().checkModel(this);
         getTypeExt().finished();
     }
}
