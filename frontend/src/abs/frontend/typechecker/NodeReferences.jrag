//inform various nodes about the Model
aspect Model {
    inh Model ModuleModifier.getModel();
    eq DeltaDecl.getModuleModifier().getModel() = this.getModel();

    inh Model ProductLine.getModel();
    inh Model ProductDecl.getModel();
    inh Model ProductName.getModel();

    inh Model Modifier.getModel();
    eq ModifyClassModifier.getModifier().getModel() = this.getDelta().getModel();
    eq ModifyInterfaceModifier.getMethodSigModifier().getModel() = this.getDelta().getModel();
}

// inform ModuleModifiers and Modifiers about the DeltaDecl where they were declared
aspect Delta {
    inh DeltaDecl ModuleModifier.getDelta();
    eq DeltaDecl.getModuleModifier().getDelta() = this;

    inh DeltaDecl Modifier.getDelta();
    eq ModifyClassModifier.getModifier().getDelta() = this.getDelta();

    inh DeltaDecl MethodSigModifier.getDelta();
    eq ModifyInterfaceModifier.getMethodSigModifier().getDelta() = this.getDelta();
}

// inform DeltaClause about the ProductLine where it was declared
aspect ProductLine {
    inh ProductLine DeltaClause.getProductLine();
    eq ProductLine.getDeltaClause().getProductLine() = this;
}

//inform nodes about the Module in which they were declared or to which they apply
aspect Module {
    syn lazy ModuleDecl ModuleModifier.getModule() {
        try { return findModule(); } catch (DeltaModellingException e) { return null; } 
    }
}

//inform ClassModifiers about the Class to which they apply
aspect Class {
    syn lazy ClassDecl ClassModifier.getClassDecl() {
        return this.findClass();
    }
}

// inform Modifier about the ModifyClassModifier where it was declared
aspect ModifyClassModifier {
    inh ModifyClassModifier Modifier.getModifyClassModifier();
    eq ModifyClassModifier.getModifier().getModifyClassModifier() = this;
}

// inform DeltaDecl about their 'used' modules
aspect Uses {
    syn lazy ArrayList<ModuleDecl> DeltaDecl.usesModules();
    eq DeltaDecl.usesModules() {
        ArrayList<ModuleDecl> usedModules = new ArrayList<ModuleDecl>();
        for (DeltaAccess da : getDeltaAccessList()) {
            for (ModuleDecl module : getModel().getModuleDecls()) {
                if (da.getModuleName().equals(module.getName()))
                    usedModules.add(module);
            }
        }
        return usedModules;
    }
}

aspect AsyncCallAnnotations {
    inh List<Annotation> AsyncCall.getAnnotations();
    inh List<Annotation> AwaitAsyncCall.getAnnotations();
    eq AssignStmt.getValue().getAnnotations() = getAnnotations();
    eq ReturnStmt.getRetExp().getAnnotations() = getAnnotations();
    eq ExpressionStmt.getExp().getAnnotations() = getAnnotations();
    eq RebindStmt.getVal().getAnnotations() = getAnnotations();
    eq RebindStmt.getObj().getAnnotations() = getAnnotations();
    eq ObjectGuard.getExp().getAnnotations() = new List<Annotation>();

    syn boolean AsyncCall.hasAnnotations() = getAnnotations().getNumChild() > 0;
    syn boolean AwaitAsyncCall.hasAnnotations() = getAnnotations().getNumChild() > 0;
}

aspect Deltas {

    // inform ProductLine about the deltas it references
    syn lazy Set<String> ProductLine.getAllDeltaIDs() {
        if (! hasDeltaClause())
            return Collections.<String>emptySet();

        Set<String> deltas = new HashSet<String>(getNumDeltaClause());
        for (DeltaClause clause : getDeltaClauses())
            deltas.add(clause.getDeltaspec().getDeltaID());
        return deltas;
    }

    // inform ProductLine about the features it references
    syn lazy Set<String> ProductLine.getDeclaredFeatures() {
        Set<String> definedFeatures = new HashSet<String>();
        for (Feature cf : getFeatures()) {
            definedFeatures.add(cf.getName());
        }
        return definedFeatures;
    }

}

