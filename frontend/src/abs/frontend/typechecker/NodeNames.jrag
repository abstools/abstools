// Inform node about the name of the Module where it was declared
aspect ModuleName {
    syn String Decl.moduleName() = getModuleDecl().getName();
}

aspect DeltaName {
    inh String ModuleModifier.deltaName();
    eq DeltaDecl.getModuleModifier().deltaName() = this.getName();

    inh String Modifier.deltaName();
    eq ModifyClassModifier.getModifier().deltaName() = this.deltaName();
}

// Set the name of ModuleModifier to name of entity that is being modified by ModuleModifier
aspect Name {
    abstract public String ModuleModifier.getName();
    syn String AddClassModifier.getName() = this.getClassDecl().getName();
    syn String AddInterfaceModifier.getName() = this.getInterfaceDecl().getName();
    syn String AddDataTypeModifier.getName() = this.getDataTypeDecl().getName();
    syn String AddFunctionModifier.getName() = this.getFunctionDecl().getName();
    syn String AddTypeSynModifier.getName() = this.getTypeSynDecl().getName();
    syn String ModifyTypeSynModifier.getName() = this.getTypeSynDecl().getName();
    syn String ModifyDataTypeModifier.getName() = this.getDataTypeDecl().getName();
    syn String NamespaceModifier.getName() = "NamespaceModifier"; // not used anywhere
    
    // strip off any module name prefix
    syn String ModuleModifier.getSimpleName() {
        Name name = new Name(this.getName());
        return name.getSimpleName();
    }
}

//Inform modifier node about the module to which it applies
aspect TargetModuleName {
    syn String ModuleModifier.targetModuleName() = getModule() == null ? null : getModule().getName();
 
    inh String Modifier.targetModuleName();
    eq ModifyClassModifier.getModifier().targetModuleName() = this.targetModuleName();
}

// inform modifier node about the name of the class to which it applies
aspect TargetClassName {
    syn String ModifyClassModifier.targetClassName() = this.getSimpleName();
    syn String AddClassModifier.targetClassName() = this.getSimpleName();

    inh String Modifier.targetClassName();
    eq ModifyClassModifier.getModifier().targetClassName() = this.getSimpleName();
}

//inform modifier node about the qualified name of the class to which it applies
aspect TargetQualifiedClassName {
    syn String ModifyClassModifier.targetQualifiedClassName() = this.qualifiedName();
    syn String AddClassModifier.targetQualifiedClassName() = this.qualifiedName();

    inh String Modifier.targetQualifiedClassName();
    eq ModifyClassModifier.getModifier().targetQualifiedClassName() = this.qualifiedName();
}

// qualify node names with the name of the module where they were defined
aspect QualifiedName {
    public String Decl.qualifiedName() {
        return moduleName() + "." + getName();
    }
    
    public String DeltaDecl.qualifiedName() {
        return this.getName();
    }

    public String Product.qualifiedName() {
        return this.getName();
    }

    public String OOModifier.qualifiedName() {
        return this.getName();
    }
}

// inform Nodes about the name of the file where they were declared
aspect FileName {
    /* When flattening, nodes get copied from one CompilationUnit to another, therefore 
     * the information about the source file where they were originally declared is lost.
     * We prevent this by setting sourceFileName whenever a node is copied using fullCopy().
     * When calling getFileName() on a node whose originalFileName is null, we delegate to the parent node.
     * At the latest when reaching the CompilationUnit, we should get a meaningful value.
     */
    private String ASTNode.sourceFileName = null;
    public void ASTNode.setFileName(String fileName) { this.sourceFileName = fileName; }
    syn String ASTNode.getFileName() = this.sourceFileName == null ? getParent().getFileName() : this.sourceFileName;
    syn String Model.getFileName() = "<invalid>";
}

// inform Model about which product of the SPL it represents; default is "core"
aspect SPLProduct {
    private String Model.productName = "core";
    syn String Model.getProductName() = this.productName;
}
