import java.io.PrintWriter;

import abs.frontend.tests.*;

/**
 * A pretty printer to generate ABS source code from an AST.
 * It is uses an ABSFormatter to format the output.
 *
 * @author Jan Sch√§fer
 */
aspect PrettyPrint {

    public String ASTNode.toString() {
        StringWriter writer = new StringWriter();
        PrintWriter w = new PrintWriter(writer);
        ABSFormatter f = new EmptyFormatter();
        prettyPrint(w,f);
        return writer.toString();
    }

    public void ASTNode.prettyPrint(PrintWriter w, ABSFormatter f) {
        w.print(this.getClass().getSimpleName()+"(");
        prettyPrintChildren(w,f);
        w.print(")");
    }

    public void ASTNode.prettyPrintChildren(PrintWriter w, ABSFormatter f) {
        for(int i = 0; i < getNumChild(); i++) {
            if (i > 0) w.print(",");
            ASTNode child = getChild(i);
            if (child != null) {
                child.prettyPrint(w,f);
            } else {
                w.print("null");
            }
        }
    }

    public void List.prettyPrint(PrintWriter w, ABSFormatter f) {
        prettyPrintChildren(w,f);
    }

    public void TypeUse.prettyPrint(PrintWriter w, ABSFormatter f) {
        w.print(getName());
    }

    public void VarOrFieldUse.prettyPrint(PrintWriter w, ABSFormatter f) {
        w.print(getName());
    }

    public void ParametricDataTypeUse.prettyPrint(PrintWriter w, ABSFormatter f) {
        w.print(getName());
        w.print('<');
        getParamList().prettyPrint(w,f);
        w.print('>');
    }

    public void DataConstructorExp.prettyPrint(PrintWriter w, ABSFormatter f) {
        w.print(getConstructor());
        w.print('(');
        getParams().prettyPrint(w,f);
        w.print(')');
    }

    public void MethodSig.prettyPrint(PrintWriter w, ABSFormatter f) {
        getReturnType().prettyPrint(w,f);
        w.print(' ');
        w.print(getName());
        w.print('(');
        getParams().prettyPrint(w,f);
        w.print(')');
    }

    public void FieldDecl.prettyPrint(PrintWriter w, ABSFormatter f) {
        w.print(getAccess());
        w.print(' ');
        w.print(getName());
        if (hasInitExp()) w.print(" = "+getInitExp());
    }
    public void VarDecl.prettyPrint(PrintWriter w, ABSFormatter f) {
        w.print(getAccess());
        w.print(' ');
        w.print(getName());
        if (hasInitExp()) w.print(" = "+getInitExp());
    }
    public void ParamDecl.prettyPrint(PrintWriter w, ABSFormatter f) {
        w.print(getAccess());
        w.print(' ');
        w.print(getName());
    }


    public void ClassDecl.prettyPrintChildren(PrintWriter w, ABSFormatter f) {
        w.print(getName());
        w.print(' ');
        super.prettyPrintChildren(w,f);
    }

    public void OOModifier.prettyPrint(PrintWriter w, ABSFormatter f) {
        w.print(this.getClass().getSimpleName() + "(" + this.qualifiedName() + ")");

    }

    public void Modifier.prettyPrint(PrintWriter w, ABSFormatter f) {
        w.print(this.getClass().getSimpleName());
    }

    public void AddFieldModifier.prettyPrint(PrintWriter w, ABSFormatter f) {
        super.prettyPrint(w, f);
        w.print("(" + this.getFieldDecl() + ")");
    }

    public void RemoveFieldModifier.prettyPrint(PrintWriter w, ABSFormatter f) {
        super.prettyPrint(w, f);
        w.print("(" + this.getFieldDecl() + ")");
    }

    public void AddClassModifier.prettyPrintChildren(PrintWriter w, ABSFormatter f) {
        w.print(getClassDecl().getName());
        w.print(' ');
        super.prettyPrintChildren(w,f);
    }

    public void RemoveClassModifier.prettyPrintChildren(PrintWriter w, ABSFormatter f) {
        w.print(getName());
    }

    public void ModifyClassModifier.prettyPrintChildren(PrintWriter w, ABSFormatter f) {
        w.print(getName());
        w.print(' ');
        super.prettyPrintChildren(w,f);
    }

    public void AddInterfaceModifier.prettyPrintChildren(PrintWriter w, ABSFormatter f) {
        w.print(getInterfaceDecl().getName());
        w.print(' ');
        super.prettyPrintChildren(w,f);
    }

    public abstract void Value.prettyPrintChildren(PrintWriter w, ABSFormatter f);
    public void UnknownVal.prettyPrintChildren(PrintWriter w, ABSFormatter f) {
        w.print("Const(" + getValue() + ")");
    }
    public void BoolVal.prettyPrintChildren(PrintWriter w, ABSFormatter f) {
        w.print("Const(" + getValue() + ")");
    }
    public void StringVal.prettyPrintChildren(PrintWriter w, ABSFormatter f) {
        w.print("Const(\"" + getValue() + "\")");
    }
    public void IntVal.prettyPrintChildren(PrintWriter w, ABSFormatter f) {
        w.print("Const(" + getIntValue() + ")");
    }

    public void StringLiteral.prettyPrint(PrintWriter w, ABSFormatter f) {
        w.print("StringLiteral(" + this.getContent() + ")");
    }
    public void IntLiteral.prettyPrint(PrintWriter w, ABSFormatter f) {
        w.print("IntLiteral(" + this.getContent() + ")");
    }

    public void Name.prettyPrint(PrintWriter w, ABSFormatter f) {
        w.print(this.getName());
    }
    public void FromImport.prettyPrint(PrintWriter w, ABSFormatter f) {
        w.print("FromImport(" + this.getNames() + " from " + this.getModuleName() + ")");
    }

    public void DeltaID.prettyPrint(PrintWriter w, ABSFormatter f) {
    	w.print("DeltaID(\"" + this.getName() + "\")");
    }

    public void Feature.prettyPrint(PrintWriter w, ABSFormatter f) {
        w.print(getName()+"{");
        super.prettyPrintChildren(w,f);
        w.print("}");
    }
    public void AttrAssignment.prettyPrint(PrintWriter w, ABSFormatter f) {
        w.print(getName() + "=" + getValue());
    }

}
