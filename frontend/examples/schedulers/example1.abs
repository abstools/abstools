module M;
import * from ABS.Scheduler;

interface C { Unit m(); }
class CImpl(Int xx) implements C {
    Unit m() {
        while(True) {
            Time t = now();
            suspend;
        }
//        await timeDifference(now(), t) > 5;
//        Unit u = println("Hello");
    }
}

// Well know scheduling policies
// EDF : earliest deadline first
def Process edf(List<Process> l) = edf_h(head(l), tail(l)); 

def Process edf_h(Process p, List<Process> l) = 
 case l {
    Nil => p;
    Cons(p2,l2) => 
        case edf_comp(p, p2) {
            True  => edf_h(p,l2) ;
            False => edf_h(p2,l2);};};
                     
// edf comparison
def Bool edf_comp(Process p1, Process p2) = 
        durationLessThan(proc_deadline(p1), proc_deadline(p2));


{
     [Scheduler: defaultscheduler(queue)] C o = new CImpl(444);

//    [Scheduler: nth(queue, random(length(queue)))] C o2 = new CImpl(555);
    [Scheduler: edf(queue)] C o2 = new CImpl(555);

    C o3 = new CImpl(0);

    [Deadline: Duration(1/1)] o2!m();
    [Deadline: Duration(1/2)] o2!m();
    [Deadline: Duration(1/3)] o2!m();
    [Deadline: Duration(1/4)] o2!m();
    [Deadline: Duration(1/5)] o2!m();
    [Deadline: Duration(1/6)] o2!m();
    [Deadline: Duration(1/7)] o2!m();
    [Deadline: Duration(1/8)] o2!m();
    [Deadline: Duration(1/9)] o2!m();
}
