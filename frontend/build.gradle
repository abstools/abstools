import org.jastadd.JastAddTask

// JastAdd plugin documentation at https://github.com/jastadd/jastaddgradle

plugins {
    // Apply the java plugin to add support for Java
    id 'java'
    // Apply the application plugin to add support for building an application
    id 'application'
    id 'com.palantir.git-version' version '0.5.1'

    id 'org.jastadd' version '1.13.1'
    id 'antlr'
    id "com.github.spotbugs" version "1.6.3"
}

application {
    mainClassName = 'org.abs_models.frontend.parser.Main'
}

distributions {
    main { baseName = 'absc' }
}

def version_details = versionDetails() // https://github.com/palantir/gradle-git-version
project.version = gitVersion().replaceAll(/^version_/, '')
sourceCompatibility = '1.8'
targetCompatibility = '1.8'

dependencies {
    // https://docs.gradle.org/current/userguide/java_plugin.html#sec:java_plugin_and_dependency_management
    implementation 'commons-io:commons-io:2.5'
    implementation 'com.google.guava:guava:20.0'
    implementation "org.antlr:antlr4:4.6"
    implementation files('lib/choco-solver-2.1.1.jar')
    implementation 'org.eclipse.jdt.core.compiler:ecj:4.6.1'
    implementation 'org.apfloat:apfloat:1.8.3'
    implementation 'org.sat4j:org.sat4j.core:2.3.0'
    implementation 'org.sat4j:org.sat4j.pb:2.3.0'
    implementation 'org.sat4j:org.sat4j.maxsat:2.3.0'
    implementation files('lib/semisolver.jar')

    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'

    // Executes JUnit Jupiter (~JUnit 5) tests
    testRuntime("org.junit.jupiter:junit-jupiter-engine:5.3.1")
    // Executes JUnit4 tests
    testRuntime("org.junit.vintage:junit-vintage-engine:5.3.1")
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.easymock:easymock:3.0'
    testImplementation 'com.eclipsesource.minimal-json:minimal-json:0.9.5'
    testImplementation 'org.hamcrest:hamcrest-core:1.3'

    jastadd2 'org.jastadd:jastadd:2.3.2'
    antlr 'org.antlr:antlr4:4.6'
}

repositories {
    jcenter()
}



// JastAdd
task generateJastAddAST(type: JastAddTask) {
    description 'Processes the JastAdd AST.'
    outputDir = file("$buildDir/generated-src/jastadd/main")
    sources = fileTree(dir: 'src/main/java',
                       includes: ['**/*.ast', '**/*.jrag', '**/*.jadd'])
    options = [ '--rewrite=regular', '--visitCheck=false', '--debug',
               '--package=org.abs_models.frontend.ast']
}
sourceSets.main.java.srcDir "$buildDir/generated-src/jastadd/main"
compileJava.dependsOn 'generateJastAddAST'

// antlr
generateGrammarSource {
    arguments += [ '-package', 'org.abs_models.frontend.antlr.parser' ]
}
compileJava.dependsOn 'generateGrammarSource'

// erlang

// There's an erlang plugin at "id 'org.ccrusius.erlang' version
// '2.0.8'" but it re-downloads and compiles rebar after each "gradle
// clean", and we need to have an executable rebar in the source tree
// anyway since it is needed in the compiler itself, so we use a
// simple Exec task instead.

// task compileErlangBackend(type: org.ccrusius.erlang.tasks.Rebar) {
//     setRebarVersion '2.6.0'
//     setRebarTarget 'compile'
//     setDirectory 'src/main/resources/erlang/absmodel'
//     outputs.file('src/main/resources/erlang/absmodel/ebin/cog.beam')
// }

task compileErlangBackend(type: Exec) {
    description 'Compiles Erlang backend support files.'
    workingDir 'src/main/resources/erlang/absmodel'
    commandLine 'escript', '../bin/rebar', 'compile'
}
processResources.dependsOn 'compileErlangBackend'
clean {
    delete fileTree('src/main/resources/erlang/absmodel/').include('**/*.beam')
}

// jar
jar {
    // https://docs.gradle.org/current/dsl/org.gradle.api.tasks.bundling.Jar.html
    baseName='absfrontend'
    manifest {
        attributes 'Main-Class': 'org.abs_models.frontend.parser.Main',
            'Implementation-Title': 'ABS Frontend',
            'Implementation-Version': version_details.lastTag.replaceAll(/^version_/, ''),
            'Bundle-Version': project.version,
            // This is wrong, but we use it anyway for the detailed
            // version string (java.lang.Package only has methods
            // getVersion and getSpecificationVersion)
            'Specification-Version': project.version
    }
    from configurations.runtimeClasspath
        .findAll { it.name.endsWith('jar') }
        .collect { zipTree(it) }
    destinationDir=file('dist')
    reproducibleFileOrder=true
}

task plainJar(type: Copy, dependsOn: jar) {
    description 'Copies absfrontend.jar into its documented location.'
    from jar
    into 'dist'
    rename 'absfrontend(.*).jar', 'absfrontend.jar'
}
clean {
    delete 'dist/'
}

task copyScripts(type: Copy) {
    description 'Copies absc scripts into their documented locations.'
    from('src/main/resources') {
        include 'bash/**'
        include 'win/**'
    }
    into 'bin/'
}
clean {
    delete 'bin/'
}

assemble.dependsOn plainJar
assemble.dependsOn copyScripts

// test
test {
    // https://docs.gradle.org/current/dsl/org.gradle.api.tasks.testing.Test.html
    useJUnitPlatform()
    ignoreFailures=true
    maxParallelForks=project.gradle.startParameter.maxWorkerCount
}

spotbugs {
    // https://docs.gradle.org/current/dsl/org.gradle.api.plugins.quality.FindBugsExtension.html
    ignoreFailures = true
    showProgress = true
    excludeFilter = file('config/findbugs/findbugs-jastadd-filter.xml')
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
    reports {
        // can only have one report type :(
        xml.enabled = false
        html.enabled = true
        emacs.enabled = false
    }
}
