plugins {
    // Apply the java plugin to add support for Java
    id 'java'
    // Apply the application plugin to add support for building an application
    id 'application'

    id 'antlr'
    id "com.github.spotbugs" version "6.0.27"
    id 'com.github.johnrengelman.shadow'
    // add jshell support (https://github.com/mrsarm/jshell-plugin):
    // rlwrap ./gradlew --console plain jshell
    id "com.github.mrsarm.jshell.plugin" version "1.2.1"
}

configurations {
    jastadd2 {
        extendsFrom implementation
    }
}

application {
    mainClass = 'org.abs_models.frontend.parser.Main'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    withJavadocJar()
    withSourcesJar()
}

compileJava.options.encoding = 'UTF-8'

distributions {
    main { distributionBaseName = 'absc' }
}

dependencies {
    // General-purpose utility libraries; these could be replaced with
    // Java 21 standard library built-ins, if possible.
    implementation 'commons-io:commons-io:2.18.0'
    implementation 'com.google.guava:guava:33.4.0-jre'
    // Command-line parser library
    implementation 'info.picocli:picocli:4.7.6'
    // Parser library
    antlr 'org.antlr:antlr4:4.13.2'
    // AST definition and rewriting library
    jastadd2 'org.jastadd:jastadd:2.3.6'

    implementation 'org.sat4j:org.sat4j.core:2.3.1'
    implementation 'org.sat4j:org.sat4j.pb:2.3.1'
    implementation 'org.sat4j:org.sat4j.maxsat:2.3.1'
    // Outdated version of choco-solver for μTVL; note that there does
    // not seem to be source code available anymore for this library.
    // Should be replaced by more up-to-date version of choco-solver,
    // or JSR331
    implementation files('lib/choco-solver-2.1.1.jar')
    // Rational numbers for the Java backend
    implementation 'org.apfloat:apfloat:1.14.0'
    // SQLite library for the Java backend
    implementation 'org.xerial:sqlite-jdbc:3.47.2.0'
    // // Logging backend used by SQLite library
    // implementation 'org.slf4j:slf4j-jdk14:2.0.16'
    // JSON library for the Java backend Model API
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.18.2'

    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'

    // Executes JUnit Jupiter (~JUnit 5) tests
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.11.4")
    // Executes JUnit4 tests, see
    // https://github.com/junit-team/junit5-samples/tree/main/junit5-migration-gradle
    testImplementation("junit:junit:4.13.2")
    testRuntimeOnly("org.junit.vintage:junit-vintage-engine:5.11.4")
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.11.4'
}

// JastAdd
task generateJastAddAST(type: JavaExec) {
    // The JastAdd plugin version <= 1.13.3 does not work with gradle > 6.3,
    // so we use a JavaExec task directly.
    description = 'Processes the JastAdd AST.'
    classpath = project.configurations.jastadd2
    mainClass = 'org.jastadd.JastAdd'
    doFirst {
        // Avoid left-over Java files when modifying the AST.  Re-running
        // JastAdd regenerates all files, so deleting everything beforehand
        // doesn’t hurt.
        delete "$buildDir/generated-src/jastadd/main/**";
    }
    inputs.files fileTree(dir: 'src/main/java',
                          includes: ['**/*.ast', '**/*.jrag', '**/*.jadd']).files
    outputs.dir "$buildDir/generated-src/jastadd/main" // this creates the directory if necessary
    args += "--o=$buildDir/generated-src/jastadd/main"
    args += '--rewrite=regular'
    args += '--visitCheck=false'
    args += '--package=org.abs_models.frontend.ast'
    args += fileTree(dir: 'src/main/java',
                     includes: ['**/*.ast', '**/*.jrag', '**/*.jadd']).files
}
sourceSets.main.java.srcDir "$buildDir/generated-src/jastadd/main"
compileJava.dependsOn 'generateJastAddAST'
compileJava.options.encoding = 'UTF-8'
sourcesJar.dependsOn 'generateJastAddAST'

// antlr
generateGrammarSource {
    arguments += [ '-package', 'org.abs_models.frontend.antlr.parser' ]
}
compileJava.dependsOn 'generateGrammarSource'
sourcesJar.dependsOn 'generateGrammarSource'

// erlang

// There's an erlang plugin at "id 'org.ccrusius.erlang' version
// '2.0.8'" but it re-downloads and compiles rebar after each "gradle
// clean", and we need to have an executable rebar in the source tree
// anyway since it is needed in the compiler itself, so we use a
// simple Exec task instead.

// task compileErlangBackend(type: org.ccrusius.erlang.tasks.Rebar) {
//     setRebarVersion '2.6.0'
//     setRebarTarget 'compile'
//     setDirectory 'src/main/resources/erlang/absmodel'
//     outputs.file('src/main/resources/erlang/absmodel/ebin/cog.beam')
// }

import org.apache.tools.ant.taskdefs.condition.Os
task checkErlang() {
    doLast {
        def minVersion = "26"
        // String quoting across shells and operating systems is woolly and
        // wonderful; this is the best we could come up with
        def command = ['erl', '-noshell', '-eval', 'io:fwrite("~s~n", [erlang:system_info(otp_release)]).', '-s', 'erlang', 'halt']
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            command = 'erl -noshell -eval "io:fwrite(erlang:system_info(otp_release))." -s erlang halt'
        }
        // def command = 'erl -noshell -eval \'io:fwrite("~s~n", [erlang:system_info(otp_release)]).\' -s erlang halt'
        def out = "", serr = new StringBuilder()
        def success = 0
        try {
            def result = command.execute()
            result.consumeProcessErrorStream(serr)
            out = result.text
            result.waitFor()
            success = result.exitValue()
        } catch (IOException e) {
            throw new GradleException("*** Could not find erlang executable in path - please install erlang version ${minVersion} or later")
        }
        if (success != 0) {
            throw new GradleException("*** Could not determine erlang version - please install erlang version ${minVersion} or later")
        }
        def currVersion = out.trim()
        if (currVersion < minVersion) {
            throw new GradleException("*** We need at least erlang version ${minVersion}, installed erlang version is ${currVersion}.")
        }
    }
}

task compileErlangBackend(type: Exec, dependsOn: processResources) {
    description = 'Compiles Erlang backend support files.'
    workingDir = 'build/resources/main/erlang/absmodel'
    commandLine 'escript', '../bin/rebar3', 'compile'
}
compileErlangBackend.dependsOn 'checkErlang'
clean {
    // This removes beam files left over after updating from old versions
    // (e.g. v1.8.1), when we precompiled the erlang backend in `src/` instead
    // of in `build/`.
    delete fileTree('src/main/resources/erlang') {
        include '**/*.beam'
        include '**/.rebar/'
        // for esqlite
        include '**/*.o'
        include '**/*.so'
    }
}
jar.dependsOn 'compileErlangBackend'
processTestResources.dependsOn 'compileErlangBackend'

tasks.withType(AbstractArchiveTask) {
    // Try to create reproducible builds
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

// jar
jar {
    // https://docs.gradle.org/current/dsl/org.gradle.api.tasks.bundling.Jar.html
    archiveBaseName='absfrontend'
    archiveAppendix=gitBranch()
    duplicatesStrategy='exclude'
    manifest {
        attributes 'Main-Class': 'org.abs_models.Absc',
            'Implementation-Title': 'ABS Frontend',
            'Implementation-Version': project.version.tokenize('-').first(),
            // We store complete version information in this attribute
            // since java.lang.Package only has methods getVersion and
            // getSpecificationVersion.
            'Specification-Version': project.version
    }
}

shadowJar {
    
}

// this is necessary for the `absc` scripts
task plainJar(type: Copy, dependsOn: shadowJar) {
    description = 'Copies the combined jar into its documented location.'
    group = 'build'
    from shadowJar.archiveFile
    into 'dist'
    rename '(.*).jar', 'absfrontend.jar'
}
clean {
    delete 'dist/'
}
assemble.dependsOn plainJar

// `absc` script et al. -- copy to well-known location and instruct
// users to set their $PATH (see e.g. `frontend/README.md`,
// https://abstools.github.io/getting_started/local-install/)
task copyScripts(type: Copy) {
    description = 'Copies absc scripts into their documented locations.'
    from 'src/main/resources/scripts'
    into 'bin/'
}
clean {
    delete 'bin/'
}
assemble.dependsOn copyScripts

task generateAutocomplete(type: JavaExec) {
    mainClass = 'picocli.AutoComplete'
    classpath = sourceSets.main.runtimeClasspath
    args = [ '--force', '--completionScript', 'bin/bash/absc_completion.sh', 'org.abs_models.Absc' ]
}
assemble.dependsOn generateAutocomplete

// test
test {
    // https://docs.gradle.org/current/dsl/org.gradle.api.tasks.testing.Test.html
    useJUnitPlatform()
    maxParallelForks=project.gradle.startParameter.maxWorkerCount
    testLogging.showStandardStreams = true

    // Temporary workaround for old choco-solver-2.1.1
    jvmArgs '--add-opens', 'java.base/sun.security.action=ALL-UNNAMED'
    // Usage: ./gradlew test -Dabs.junit.erlang=0 skips (most) erlang tests
    systemProperty 'abs.junit.erlang', System.getProperty('abs.junit.erlang')

    // Allow dynamic exclusion of tests (based on https://blog.jdriven.com/2017/10/run-one-or-exclude-one-test-with-gradle/)
    // Usage: gradle test -PexcludeTests='**/ErlangModelApiTests*,**/ErlangExamplesTests*'
    if (project.hasProperty('excludeTests')) {
        project.property('excludeTests').split(',').each { 
            exclude it
        }
    }
}
// See JavaBackendTest.runJava
test.dependsOn plainJar

spotbugs {
    // https://github.com/spotbugs/spotbugs-gradle-plugin
    ignoreFailures = true
    showProgress = true
    excludeFilter = file('config/findbugs/findbugs-jastadd-filter.xml')
}

spotbugsMain {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}
spotbugsTest {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

javadoc {
    options.encoding = 'UTF-8'
    failOnError = false
    options.addStringOption('Xdoclint:none', '-quiet')
    options.tags = [ 'apilevel', 'declaredat', 'aspect', 'ast', 'attribute',
                    'argument', 'astdecl', 'production' ]
}
