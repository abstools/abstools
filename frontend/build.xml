<?xml version="1.0"?>
<project name="ABS Frontend" default="compile" basedir="."
         xmlns:if="ant:if" xmlns:unless="ant:unless">
  <!-- $Id$ -->

  <!-- this is needed to be able to call targets from maven -->
  <property name="build.compiler" value="extJavac"/>

  <property name="revision.prefix" value="1.5.2" />

  <property environment="env" />
  <!-- include environment variables -->

  <property name="src.dir" value="${basedir}/src" />
  <property name="bash.dir" value="${src.dir}/bash" />
  <property name="win.dir" value="${src.dir}/win" />
  <property name="tests.dir" value="${basedir}/tests" />
  <property name="build.dir" value="${basedir}/bin" />
  <property name="bash.build.dir" value="${basedir}/bin/bash" />
  <property name="win.build.dir" value="${basedir}/bin/win" />
  <property name="dist.dir" value="${basedir}/dist" />
  <property name="gen.dir" value="${basedir}/gen" />
  <!-- temporal directory used during tests -->
  <property name="gen.test.dir" value="${basedir}/gen" />
  <!-- How many junit targets from tests-all are executed in parallel.
  Note that this does not influence the number of concurrent tests INSIDE
  a JUnit test class (yet).
  -->
  <property name="threadCount" value="2" />
  <!-- machine-readable JUnit output goes here: -->
  <property name="test.data.dir" location="${gen.test.dir}/data"/>
  <property name="ext.dir" value="${basedir}/lib" />
  <property name="ast.src.dir" value="${src.dir}/abs/frontend/ast" />
  <!-- TODO: about ast.gen.dir and JastAdd idiosyncrasies -->
  <property name="apidoc.dir" value="${gen.dir}/docs/api" />
  <property name="ast.gen.dir" value="${gen.dir}/abs/frontend" />
  <property name="parser.antlr.src.dir" value="${src.dir}/abs/frontend/antlr" />
  <property name="antlr.jar" value="antlr-4.6-complete.jar"/>
  <property name="apfloat.jar" value="apfloat-1.8.2.jar"/>
  <property name="commons-io.jar" value="commons-io-2.5.jar"/>
  <property name="ecj.jar" value="ecj-4.6.2.jar"/>
  <property name="guava.jar" value="guava-20.0.jar"/>
  <property name="jastadd2.jar" value="jastadd2-2.2.2.jar"/>
  <property name="junit.jar" value="junit-4.11.jar" />
  <property name="hamcrest.jar" value="hamcrest-core-1.3.jar" />
  <property name="easymock.jar" value="easymock-3.0.jar" />
  <property name="cglib.jar" value="cglib-nodep-2.2.2.jar" />
  <property name="objenesis.jar" value="objenesis-1.2.jar" />
  <property name="target.jar" value="${dist.dir}/absfrontend.jar" />
  <property name="plugin.name" value="org.abs-models.abs.compiler" />
  <property name="casestudies.dir" location="${base.dir}/../../examples/" />


  <!-- The package name of JastAdd generated files -->
  <property name="ast.package" value="abs.frontend.ast" />

  <macrodef name="git-revision">
    <attribute name="output"/>
    <attribute name="failonerror" default="false" />
    <sequential>
      <exec executable="git" outputproperty="head"
            failonerror="@{failonerror}" >
        <arg value="rev-parse"/>
        <arg value="--short"/>
        <arg value="HEAD"/>
      </exec>
      <exec executable="git" outputproperty="dirty"
            failonerror="@{failonerror}" >
        <arg value="diff"/>
        <arg value="--shortstat"/>
      </exec>
      <condition  property="@{output}" value="${head}" else="${head}-dirty" >
        <equals arg1="${dirty}" arg2=""/>
      </condition>
    </sequential>
  </macrodef>
  <macrodef name="git-long-revision">
    <attribute name="output"/>
    <attribute name="failonerror" default="false" />
    <sequential>
      <exec executable="git" outputproperty="longhead"
            failonerror="@{failonerror}" >
        <arg value="rev-parse"/>
        <arg value="HEAD"/>
      </exec>
      <exec executable="git" outputproperty="dirty"
            failonerror="@{failonerror}" >
        <arg value="diff"/>
        <arg value="--shortstat"/>
      </exec>
      <condition  property="@{output}" value="${longhead}" else="${longhead}-dirty" >
        <equals arg1="${dirty}" arg2=""/>
      </condition>
    </sequential>
  </macrodef>

  <!-- "jastadd" is an ant task class in jastadd2.jar -->
  <taskdef name="jastadd" classname="org.jastadd.JastAddTask" classpath="${ext.dir}/${jastadd2.jar}" />

  <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpath="${ext.dir}/findbugs-ant-1.3.9.jar"/>

  <path id="common.classpath">
    <pathelement location="${ext.dir}/${ecj.jar}" />
    <pathelement location="${ext.dir}/org.sat4j.core.jar" />
    <pathelement location="${ext.dir}/org.sat4j.maxsat.jar" />
    <pathelement location="${ext.dir}/org.sat4j.pb.jar" />
    <pathelement location="${ext.dir}/sat4j-maxsat.jar" />
    <pathelement location="${ext.dir}/sat4j-pb.jar" />
    <pathelement location="${ext.dir}/choco-solver-2.1.1.jar" />
    <pathelement location="${ext.dir}/${apfloat.jar}" />
    <pathelement location="${ext.dir}/${guava.jar}" />
    <pathelement location="${ext.dir}/${commons-io.jar}" />
    <pathelement location="${ext.dir}/${antlr.jar}" />
    <pathelement location="${ext.dir}/semisolver.jar" />
  </path>

  <path id="run.classpath">
    <pathelement location="${build.dir}" />
    <path refid="common.classpath"/>
  </path>

  <path id="compile.classpath">
    <pathelement location="${ext.dir}/${jastadd2.jar}" />
    <pathelement location="${ext.dir}/${junit.jar}" />
  	<pathelement location="${ext.dir}/${hamcrest.jar}" />
    <pathelement location="${ext.dir}/${easymock.jar}" />
    <pathelement location="${ext.dir}/${cglib.jar}" />
    <pathelement location="${ext.dir}/${objenesis.jar}" />
    <pathelement location="${ext.dir}/jsr305.jar" />
      <pathelement location="${ext.dir}/choco-solver-2.1.1.jar" />
        <path refid="common.classpath"/>
  </path>

    <!-- test classpath -->
    <path id="test.classpath">
        <pathelement location="${ext.dir}/${junit.jar}" />
    	<pathelement location="${ext.dir}/${hamcrest.jar}" />
  <pathelement location="${ext.dir}/${easymock.jar}" />
  <pathelement location="${ext.dir}/${cglib.jar}" />
  <pathelement location="${ext.dir}/${objenesis.jar}" />
        <path refid="run.classpath"/>
    </path>


  <target name="prepare">
    <mkdir dir="${gen.dir}" />
    <mkdir dir="${gen.test.dir}" />
    <mkdir dir="${test.data.dir}" />
    <mkdir dir="${dist.dir}" />
    <mkdir dir="${dist.dir}/plugins" />
    <mkdir dir="${dist.dir}/features" />
    <mkdir dir="${ast.gen.dir}" />
    <mkdir dir="${build.dir}" />
    <mkdir dir="${parser.antlr.src.dir}" />
    <!-- <mkdir dir = "${dist.dir}"/> -->
    <mkdir dir="${apidoc.dir}" />
  </target>

  <target name="compile" depends="prepare,gen,versionstamp" description="Compiles all java files in the source directory and generates absfrontend.jar.">
    <javac srcdir="${src.dir}:${src.dir}:${gen.dir}:${tests.dir}" destdir="${build.dir}" deprecation="on" debug="on" includeantruntime="false" depend="${build.depend}" optimize="off" encoding="utf-8" target="1.7" source="1.7">
      <classpath refid="compile.classpath" />
    </javac>
    <jar jarfile="${target.jar}">
      <fileset dir="${build.dir}" includes="abs/**,deadlock/**,autodeploy/**" />
      <!-- abslang has already been copied into build.dir -->
      <fileset dir="${src.dir}" includes="abs/**,deadlock/**,autodeploy/**" excludes="abs/lang/abslang.abs" />
      <zipfileset src="${ext.dir}/${apfloat.jar}" />
      <zipfileset src="${ext.dir}/${ecj.jar}" />
      <zipfileset src="${ext.dir}/org.sat4j.core.jar" />
      <zipfileset src="${ext.dir}/org.sat4j.pb.jar" />
      <zipfileset src="${ext.dir}/sat4j-maxsat.jar" />
      <zipfileset src="${ext.dir}/choco-solver-2.1.1.jar" />
      <zipfileset src="${ext.dir}/semisolver.jar" />
      <zipfileset src="${ext.dir}/${guava.jar}" />
      <zipfileset src="${ext.dir}/${commons-io.jar}" />
      <zipfileset src="${ext.dir}/${antlr.jar}" />
      <manifest>
        <attribute name="Main-Class" value="abs.frontend.parser.Main"/>
        <attribute name="Implementation-Version" value="${revision.prefix}"/>
        <attribute name="Bundle-Version" value="${frontend.version}"/>
        <!-- Pretty sure that's not the meaning of that attribute, but we'll take it -->
        <attribute name="Specification-Version" value="${frontend.git-long-revision}"/>
      </manifest>
    </jar>
  </target>

  <target name="javadoc" depends="gen,compile" description="Build java doc.">
    <javadoc sourcepath="${src.dir}:${gen.dir}" destdir="${apidoc.dir}">
      <classpath>
        <pathelement location="${ext.dir}/${jastadd2.jar}" />
      </classpath>
    </javadoc>
  </target>


  <target name="clean" description="cleans everything">
    <delete failonerror="false" includeemptydirs="true">
      <fileset dir="${gen.dir}" />
      <!--       <fileset dir = "${gen.dir}/docs"/> -->
      <fileset dir="${build.dir}" />
      <fileset dir="${dist.dir}" />
      <fileset dir="${basedir}/gen-eclipse" />
      <fileset dir="${src.dir}">
        <include name="**/ebin/*.beam" />
      </fileset>
    </delete>
  </target>

  <target name="rebuild" depends="clean, compile">
  </target>

  <target name="build" depends="compile">
  </target>


  <!-- generate ABS -->

  <target name="gen" depends="prepare, genshell, genast, genlang, genruntime, genantlr">
  </target>

  <target name="genast" unless="genast.notRequired">
    <!-- Check if JastAdd-generated files are out of date.  We use
         ASTNode.java instead of one of our own classes since this will always
         be present.  -->
    <uptodate property="genast.notRequired" targetfile="${ast.gen.dir}/ast/ASTNode.java">
      <srcfiles dir="${src.dir}" includes="abs/**/*.ast" />
      <srcfiles dir="${src.dir}" includes="abs/**/*.jrag" />
      <srcfiles dir="${src.dir}" includes="abs/**/*.jadd" />
    </uptodate>
    <echo if:set="genast.notRequired">No change in *.ast / *.jadd / *.jrag files, skipping.</echo>
    <jastadd package="${ast.package}" rewrite="" visitCheck="false" outdir="${gen.dir}" debug="true"
             unless:set="genast.notRequired" >
      <fileset dir=".">
        <include name="src/abs/**/*.ast" />
        <include name="src/abs/**/*.jrag" />
        <include name="src/abs/**/*.jadd" />
      </fileset>
    </jastadd>
  </target>

  <target name="genlang">
    <mkdir dir="${build.dir}/abs/lang" />
    <copy todir="${build.dir}/abs/lang" >
      <fileset dir="${src.dir}/abs/lang" includes="**/*.abs" />
    </copy>
  </target>

  <target name="genruntime">
    <echo message="Trying to precompile erlang libraries, error is safe to ignore" />
    <exec executable="escript" dir="${src.dir}/abs/backend/erlang/runtime/absmodel"
          failonerror="false" failifexecutionfails="false">
      <arg value="../bin/rebar" />
      <arg value="compile" />
    </exec>
    <copy todir="${build.dir}/abs/backend/erlang" >
      <fileset dir="${src.dir}/abs/backend/erlang/" includes="runtime/**/*" />
    </copy>
    <copy file="${src.dir}/abs/backend/maude/abs-interpreter.maude" todir="${build.dir}/abs/backend/maude" />
  </target>

  <target name="genshell">
    <copy todir="${bash.build.dir}">
      <fileset id="shellfiles" dir="${bash.dir}">
        <include name="*" />
      </fileset>
      <filterset>
        <filter token="BASEDIR" value="${basedir}" />
      </filterset>
    </copy>
    <copy todir="${win.build.dir}">
      <fileset id="winshellfiles" dir="${win.dir}">
        <include name="*" />
      </fileset>
    </copy>
    <chmod perm="ugo+x">
      <fileset dir="${bash.build.dir}" >
        <include name="*" />
      </fileset>

    </chmod>
  </target>

  <target name="genantlr" depends="genast">
    <echo message="Running antlr" />
    <java fork="true" failonerror="yes"
          dir="${parser.antlr.src.dir}"
          classpath="${ext.dir}/${antlr.jar}"
          classname="org.antlr.v4.Tool">
      <arg line="ABS.g4 -package abs.frontend.antlr.parser -o '${gen.dir}/abs/frontend/antlr/parser'" />
    </java>
  </target>

  <target name="versionstamp">
    <tstamp/>
    <git-revision output="git-revision"/>
    <condition property="frontend.version" value="${revision.prefix}.${DSTAMP}${TSTAMP}-${git-revision}" else="${revision.prefix}.${DSTAMP}${TSTAMP}">
      <isset property="git-revision" />
    </condition>
    <git-long-revision output="git-long-revision"/>
    <condition property="frontend.git-long-revision" value="${git-long-revision}" else="HEAD">
      <isset property="git-long-revision" />
    </condition>
    <echo message="Version: ${frontend.version}"/>
    <echo message="Git revision: ${frontend.git-long-revision}"/>
  </target>

  <!-- create distribution files for ABS -->
  <target name="dist" depends="clean,compile" description="create distribution files">
  </target>

  <!-- suite file -->
  <property name="test.frontend.suite.name" value="abs.frontend.AllFrontendTests" />
  <property name="test.backend.suite.name" value="abs.backend.AllBackendTests" />
  <property name="test.backend.semantic.suite.name" value="abs.backend.common.AllSemanticTests" />
  <property name="test.backend.java.lib.net.suite.name" value="abs.backend.java.lib.net.AllNetTests" />

  <!-- invoke 'compile' once up front, so that the sub-tasks see the updated build. -->
  <target name="tests-all" depends="compile">
    <parallel threadCount="${threadCount}">
      <antcall target="tests-frontend" />
      <antcall target="tests-backend" />
    </parallel>
  </target>

  <target name="tests-backend-semantic" depends="compile">
    <junit fork="yes">
      <assertions><enable package="abs"/></assertions>
      <test name="${test.backend.semantic.suite.name}" todir="${test.data.dir}" />
      <formatter type="plain" usefile="false" />
      <formatter type="xml" />
      <classpath refid="test.classpath" />
    </junit>
  </target>


  <target name="tests-backend" depends="compile">
    <junit fork="yes">
      <assertions><enable package="abs"/></assertions>
      <test name="${test.backend.suite.name}" todir="${test.data.dir}" />
      <formatter type="plain" usefile="false" />
      <formatter type="xml" />
      <classpath refid="test.classpath" />
    </junit>
  </target>

  <target name="tests-backend-net" depends="compile">
    <junit fork="yes">
      <assertions><enable package="abs"/></assertions>
      <test name="${test.backend.java.lib.net.suite.name}" todir="${test.data.dir}" />
      <formatter type="plain" usefile="false" />
      <formatter type="xml" />
      <classpath refid="test.classpath" />
    </junit>
  </target>

  <target name="test-case-studies" description="typecheck all case studies">
      <antcall target="abs-typecheck">
        <param name="absmodeldir" value="${casestudies.dir}/T4.2/D4.2.1/"/>
       </antcall>
      <antcall target="abs-typecheck">
        <param name="absmodeldir" value="${casestudies.dir}/T4.3/D4.3.1/"/>
       </antcall>
      <antcall target="abs-typecheck">
        <param name="absmodeldir" value="${casestudies.dir}/T4.4/D4.4.1/"/>
       </antcall>
  </target>

  <target name="abs-typecheck">
    <echo message="Typechecking ABS models in ${absmodeldir} ..." />
        <java fork="true" classname="abs.frontend.parser.Main">
            <assertions><enable package="abs"/></assertions>
            <classpath refid="run.classpath"/>
            <arg line="${absmodeldir}"/>
        </java>
  </target>

  <target name="tests-frontend" depends="compile">
    <junit fork="yes">
      <sysproperty key="abs.junit.casestudies" value="${casestudies.dir}/" />
      <assertions><enable package="abs"/></assertions>
      <test name="${test.frontend.suite.name}" todir="${test.data.dir}" />
      <formatter type="plain" usefile="false" />
      <formatter type="xml" />
      <classpath refid="test.classpath" />
    </junit>
  </target>
  <!-- From command line: -->
  <!-- java -cp bin:lib/junit-4.8.1.jar  org.junit.runner.JUnitCore abs.frontend.AllTests -->

  <target name="build-eclipse-plugin" depends="dist">
    <mkdir dir="${basedir}/${plugin.name}_${frontend.version}"/>
    <copy todir="${basedir}/${plugin.name}_${frontend.version}" failonerror="true" overwrite="true">
      <fileset dir="${basedir}">
        <include name="META-INF/"/>
        <include name="${ext.dir}/${apfloat.jar}"/>
        <include name="${ext.dir}/choco-solver-2.1.1.jar"/>
        <include name="${ext.dir}/sat4j-maxsat.jar" />
        <include name="${ext.dir}/semisolver.jar" />
        <include name="${ext.dir}/${guava.jar}" />
        <include name="${ext.dir}/${commons-io.jar}" />
        <include name="${ext.dir}/${antlr.jar}" />
        <include name="feature.xml"/>
      </fileset>
      <fileset dir="${build.dir}">
        <include name="abs/"/>
        <include name="deadlock/"/>
      </fileset>
      <fileset dir="${src.dir}">
        <include name="abs/backend/maude/abs-interpreter.maude" />
      </fileset>
    </copy>
    <manifest file="${basedir}/${plugin.name}_${frontend.version}/META-INF/MANIFEST.MF" mode="update">
      <attribute name="Bundle-Version" value="${frontend.version}"/>
    </manifest>
    <zip destfile="${dist.dir}/plugins/${plugin.name}_${frontend.version}.jar" basedir="${basedir}/${plugin.name}_${frontend.version}" filesonly="true" whenempty="skip" update="false">
      <exclude name="feature.xml" />
    </zip>
    <replace file="${basedir}/${plugin.name}_${frontend.version}/feature.xml" token="0.0.0.VERSION_STRING" value="${frontend.version}"/>
    <zip destfile="${dist.dir}/features/${plugin.name}_${frontend.version}.jar" basedir="${basedir}/${plugin.name}_${frontend.version}" filesonly="true" whenempty="skip" update="false">
      <include name="feature.xml" />
    </zip>
    <delete dir="${basedir}/${plugin.name}_${frontend.version}"/>
  </target>

  <target name="findbugs" depends="compile">
      <findbugs home="${findbugs.home}"
                output="xml"
                outputFile="${gen.dir}/frontend-src-findbugs.xml"
            jvmargs="-Xmx512m"
                excludefilter="findbugs-jastadd-filter.xml"
              quietErrors="true" >
        <sourcePath path="${basedir}/src" />
        <class location="${build.dir}" />
      </findbugs>
    </target>

</project>
